/* Copyright 2024-2025 Joachim Metz <joachim.metz@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

use std::cmp::min;
use std::io::SeekFrom;
use std::sync::{Arc, RwLock};

use keramics_compression::{LzxContext, LzxpressHuffmanContext};
use keramics_core::mediator::{Mediator, MediatorReference};
use keramics_core::{DataStream, DataStreamReference, ErrorTrace};
use keramics_types::{bytes_to_u32_le, bytes_to_u64_le};

use crate::lru_cache::LruCache;

use super::block_stream::NtfsBlockStream;
use super::mft_attribute::NtfsMftAttribute;

/// New Technologies File System (NTFS) Windows Overlay Filter (WOF) compressed stream.
pub struct NtfsWofCompressedStream {
    /// Mediator.
    mediator: MediatorReference,

    /// The data stream.
    data_stream: Option<DataStreamReference>,

    /// Cluster block size.
    cluster_block_size: u32,

    /// Compression method.
    compression_method: u32,

    /// Compression unit size.
    compression_unit_size: usize,

    /// The compressed size.
    compressed_size: u64,

    /// The current offset.
    current_offset: u64,

    /// The size.
    size: u64,

    /// The block offsets.
    block_offsets: Vec<u64>,

    /// Decompressed block cache.
    block_cache: LruCache<u64, Vec<u8>>,
}

impl NtfsWofCompressedStream {
    /// Creates a new compressed stream.
    pub(super) fn new(cluster_block_size: u32, compression_method: u32) -> Self {
        Self {
            mediator: Mediator::current(),
            data_stream: None,
            cluster_block_size: cluster_block_size,
            compression_method: compression_method,
            compression_unit_size: 0,
            compressed_size: 0,
            current_offset: 0,
            size: 0,
            block_offsets: Vec::new(),
            block_cache: LruCache::new(8),
        }
    }

    /// Opens a block stream.
    pub(super) fn open(
        &mut self,
        data_stream: &DataStreamReference,
        wof_data_attribute: &NtfsMftAttribute,
        size: u64,
    ) -> Result<(), ErrorTrace> {
        if wof_data_attribute.is_compressed() {
            return Err(keramics_core::error_trace_new!(
                "Unsupported compressed WofCompressedData $DATA attribute"
            ));
        }
        if wof_data_attribute.is_resident() {
            return Err(keramics_core::error_trace_new!(
                "Unsupported resident WofCompressedData $DATA attribute"
            ));
        }
        let mut block_stream: NtfsBlockStream = NtfsBlockStream::new(self.cluster_block_size);

        match block_stream.open(data_stream, wof_data_attribute) {
            Ok(_) => {}
            Err(mut error) => {
                keramics_core::error_trace_add_frame!(
                    error,
                    "Unable to open WofCompressedData data stream"
                );
                return Err(error);
            }
        }
        self.data_stream = Some(Arc::new(RwLock::new(block_stream)));
        self.compressed_size = wof_data_attribute.valid_data_size;
        self.compression_unit_size = match self.compression_method {
            0 => 4096,
            1 => 32768,
            2 => 8192,
            3 => 16384,
            _ => {
                return Err(keramics_core::error_trace_new!(format!(
                    "Unsupported compression method: {}",
                    self.compression_method
                )));
            }
        };
        self.size = size;

        Ok(())
    }

    /// Reads media data based on the compressed blocks.
    fn read_data_from_blocks(&mut self, data: &mut [u8]) -> Result<usize, ErrorTrace> {
        if self.size > 0 && self.block_offsets.len() == 0 {
            match self.read_compressed_block_offsets() {
                Ok(_) => {}
                Err(mut error) => {
                    keramics_core::error_trace_add_frame!(
                        error,
                        "Unable to read compressed block offsets"
                    );
                    return Err(error);
                }
            }
        }
        let read_size: usize = data.len();
        let mut data_offset: usize = 0;
        let mut current_offset: u64 = self.current_offset;

        while data_offset < read_size {
            if current_offset >= self.size {
                break;
            }
            let block_index: u64 = current_offset / (self.compression_unit_size as u64);
            let block_offset: u64 = self.block_offsets[block_index as usize];

            let next_block_index: usize = (block_index as usize) + 1;
            let next_block_offset: u64 = if next_block_index < self.block_offsets.len() {
                self.block_offsets[next_block_index]
            } else {
                self.compressed_size
            };
            let block_size: usize = (next_block_offset - block_offset) as usize;

            let range_offset: u64 = block_index * (self.compression_unit_size as u64);
            let range_size: u64 = min(self.compression_unit_size as u64, self.size - range_offset);
            let block_relative_offset: u64 = current_offset - range_offset;
            let block_remainder_size: u64 = range_size - block_relative_offset;

            let block_read_size: usize =
                min(read_size - data_offset, block_remainder_size as usize);
            if block_read_size == 0 {
                break;
            }
            let data_end_offset: usize = data_offset + block_read_size;

            if range_size == (block_size as u64) {
                let data_stream: &DataStreamReference = match self.data_stream.as_ref() {
                    Some(data_stream) => data_stream,
                    None => {
                        return Err(keramics_core::error_trace_new!("Missing data stream"));
                    }
                };
                let read_offset: u64 = block_offset + block_relative_offset;

                keramics_core::data_stream_read_exact_at_position!(
                    data_stream,
                    &mut data[data_offset..data_end_offset],
                    SeekFrom::Start(read_offset)
                );
            } else {
                if !self.block_cache.contains(&block_offset) {
                    let mut data: Vec<u8> = vec![0; self.compression_unit_size];

                    match self.read_compressed_block(block_offset, block_size, &mut data) {
                        Ok(_) => {}
                        Err(mut error) => {
                            keramics_core::error_trace_add_frame!(
                                error,
                                format!(
                                    "Unable to read compressed block at offset: {} (0x{:08x})",
                                    block_offset, block_offset
                                )
                            );
                            return Err(error);
                        }
                    }
                    self.block_cache.insert(block_offset, data);
                }
                let block_data: &Vec<u8> = match self.block_cache.get(&block_offset) {
                    Some(data) => data,
                    None => {
                        return Err(keramics_core::error_trace_new!(
                            "Unable to retrieve data from cache"
                        ));
                    }
                };
                let block_data_offset: usize = block_relative_offset as usize;
                let block_data_end_offset: usize = block_data_offset + block_read_size;

                data[data_offset..data_end_offset]
                    .copy_from_slice(&block_data[block_data_offset..block_data_end_offset]);
            }
            data_offset += block_read_size;
            current_offset += block_read_size as u64;
        }
        Ok(data_offset)
    }

    /// Reads a compressed block.
    fn read_compressed_block(
        &mut self,
        block_offset: u64,
        block_size: usize,
        data: &mut Vec<u8>,
    ) -> Result<(), ErrorTrace> {
        let data_stream: &DataStreamReference = match self.data_stream.as_ref() {
            Some(data_stream) => data_stream,
            None => {
                return Err(keramics_core::error_trace_new!("Missing data stream"));
            }
        };
        let mut compressed_data: Vec<u8> = vec![0; block_size];

        keramics_core::data_stream_read_exact_at_position!(
            data_stream,
            &mut compressed_data,
            SeekFrom::Start(block_offset)
        );
        if self.mediator.debug_output {
            self.mediator.debug_print(format!(
                "Compressed data of size: {} at offset: {} (0x{:08x})\n",
                block_size, block_offset, block_offset,
            ));
            self.mediator.debug_print_data(&compressed_data, true);
        }
        match self.compression_method {
            0 | 2 | 3 => {
                let mut lzxpress_context: LzxpressHuffmanContext = LzxpressHuffmanContext::new();

                match lzxpress_context.decompress(&compressed_data, data) {
                    Ok(_) => {}
                    Err(mut error) => {
                        keramics_core::error_trace_add_frame!(
                            error,
                            "Unable to decompress LZXPRESS Huffman data"
                        );
                        return Err(error);
                    }
                }
            }
            1 => {
                let mut lzx_context: LzxContext = LzxContext::new();

                match lzx_context.decompress(&compressed_data, data) {
                    Ok(_) => {}
                    Err(mut error) => {
                        keramics_core::error_trace_add_frame!(
                            error,
                            "Unable to decompress LZX data"
                        );
                        return Err(error);
                    }
                }
            }
            _ => {
                return Err(keramics_core::error_trace_new!(format!(
                    "Unsupported compression method: {}",
                    self.compression_method
                )));
            }
        }
        Ok(())
    }

    /// Reads the compressed block offsets.
    fn read_compressed_block_offsets(&mut self) -> Result<(), ErrorTrace> {
        let block_offset_data_size: usize = if self.compressed_size > u32::MAX as u64 {
            8
        } else {
            4
        };
        let number_of_block_offsets: usize =
            self.size.div_ceil(self.compression_unit_size as u64) as usize;

        // Note that the number of block offsets in the table is total number of blocks - 1.
        // Given that the first block offset is directly after the block offsets table.
        let data_size: usize = (number_of_block_offsets - 1) * block_offset_data_size;

        let data_stream: &DataStreamReference = match self.data_stream.as_ref() {
            Some(data_stream) => data_stream,
            None => {
                return Err(keramics_core::error_trace_new!("Missing data stream"));
            }
        };
        let mut data: Vec<u8> = vec![0; data_size];

        keramics_core::data_stream_read_exact_at_position!(
            data_stream,
            &mut data,
            SeekFrom::Start(0)
        );
        if self.mediator.debug_output {
            self.mediator.debug_print(format!(
                "Block offsets data of size: {} at offset: 0 (0x00000000)\n",
                data_size,
            ));
            self.mediator.debug_print_data(&data, true);
        }
        self.block_offsets.push(data_size as u64);

        for data_offset in (0..data_size).step_by(block_offset_data_size) {
            let mut block_offset: u64 = if block_offset_data_size == 8 {
                bytes_to_u64_le!(data, data_offset)
            } else {
                bytes_to_u32_le!(data, data_offset) as u64
            };
            block_offset += data_size as u64;

            if block_offset > self.compressed_size {
                return Err(keramics_core::error_trace_new!(format!(
                    "Invalid block offset: {} (0x{:08x}) value out of bounds",
                    block_offset, block_offset
                )));
            }
            self.block_offsets.push(block_offset);
        }
        if self.mediator.debug_output {
            self.mediator
                .debug_print(format!("NtfsWofCompressedBlockOffsets {{\n",));
            self.mediator.debug_print(
                self.block_offsets
                    .iter()
                    .map(|offset| format!("    offset: {} (0x{:08x}),", offset, offset))
                    .collect::<Vec<String>>()
                    .join("\n"),
            );
            self.mediator.debug_print(format!("\n}}\n\n"));
        }
        Ok(())
    }
}

impl DataStream for NtfsWofCompressedStream {
    /// Retrieves the size of the data stream.
    fn get_size(&mut self) -> Result<u64, ErrorTrace> {
        Ok(self.size)
    }

    /// Reads data at the current position.
    fn read(&mut self, buf: &mut [u8]) -> Result<usize, ErrorTrace> {
        if self.current_offset >= self.size {
            return Ok(0);
        }
        let remaining_size: u64 = self.size - self.current_offset;
        let mut read_size: usize = buf.len();

        if (read_size as u64) > remaining_size {
            read_size = remaining_size as usize;
        }
        let read_count: usize = match self.read_data_from_blocks(&mut buf[..read_size]) {
            Ok(read_count) => read_count,
            Err(mut error) => {
                keramics_core::error_trace_add_frame!(error, "Unable to read data from blocks");
                return Err(error);
            }
        };
        self.current_offset += read_count as u64;

        Ok(read_count)
    }

    /// Sets the current position of the data.
    fn seek(&mut self, pos: SeekFrom) -> Result<u64, ErrorTrace> {
        self.current_offset = match pos {
            SeekFrom::Current(relative_offset) => {
                let mut current_offset: i64 = self.current_offset as i64;
                current_offset += relative_offset;
                current_offset as u64
            }
            SeekFrom::End(relative_offset) => {
                let mut end_offset: i64 = self.size as i64;
                end_offset += relative_offset;
                end_offset as u64
            }
            SeekFrom::Start(offset) => offset,
        };
        Ok(self.current_offset)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    use keramics_core::open_fake_data_stream;

    fn get_test_data() -> Vec<u8> {
        return vec![
            0x53, 0x08, 0x00, 0x00, 0x99, 0x11, 0x00, 0x00, 0x53, 0x18, 0x00, 0x00, 0x5d, 0x19,
            0x00, 0x00, 0x2e, 0x1b, 0x00, 0x00, 0x83, 0x1f, 0x00, 0x00, 0x75, 0x88, 0x96, 0x89,
            0x86, 0x99, 0x86, 0x68, 0x06, 0x0a, 0x88, 0x98, 0x98, 0x9b, 0xaa, 0x9a, 0x98, 0xb9,
            0x9b, 0x9b, 0xb9, 0xab, 0x99, 0x08, 0x08, 0x7b, 0xba, 0xa9, 0x79, 0x7a, 0x99, 0x98,
            0x97, 0x88, 0x78, 0x87, 0xb9, 0xbb, 0x79, 0xb8, 0x87, 0x88, 0x89, 0x87, 0xa8, 0x99,
            0x8a, 0x77, 0x99, 0x9a, 0x9a, 0xa8, 0x98, 0x08, 0x99, 0x98, 0x87, 0x77, 0x67, 0x8a,
            0xba, 0x99, 0x99, 0x87, 0x88, 0x6a, 0x77, 0x90, 0x60, 0x5a, 0x7b, 0xba, 0xba, 0x00,
            0x0a, 0xbb, 0x0b, 0xb0, 0x00, 0xbb, 0xb9, 0x00, 0x0a, 0xb0, 0xbb, 0xb0, 0xb0, 0x90,
            0x09, 0xb0, 0x0b, 0xa0, 0xa8, 0x0b, 0xa9, 0x0b, 0x87, 0x7a, 0x08, 0x88, 0x89, 0xb0,
            0x99, 0xa9, 0x09, 0xb8, 0xb0, 0x9a, 0xb9, 0x80, 0xb0, 0xaa, 0xb9, 0xb0, 0xb0, 0x00,
            0x78, 0x8b, 0xb8, 0xa0, 0x98, 0xbb, 0xaa, 0xb8, 0x88, 0xa0, 0xa7, 0x5a, 0xbb, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x77, 0xb0, 0xb0, 0x0b, 0xb0, 0x00, 0x00, 0xa0, 0x77, 0xb8, 0x0b, 0x0a, 0xa0, 0x00,
            0x0b, 0x90, 0x77, 0x99, 0xa0, 0xb0, 0xbb, 0xb0, 0x00, 0x00, 0x77, 0x98, 0x09, 0x0b,
            0xaa, 0x00, 0x0b, 0xaa, 0x67, 0xb8, 0xa8, 0x00, 0x00, 0xbb, 0xb0, 0x00, 0x77, 0x08,
            0x90, 0xb0, 0xb0, 0x00, 0xb0, 0xab, 0x76, 0x99, 0xb9, 0x00, 0x00, 0xbb, 0x00, 0xa0,
            0x76, 0x89, 0xa0, 0x0a, 0xaa, 0xa0, 0x00, 0xa0, 0x87, 0xaa, 0x0a, 0x00, 0x00, 0x00,
            0x00, 0xa0, 0x9a, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xaa, 0x53, 0x01, 0xed, 0x00, 0x22, 0x67, 0x00, 0x84, 0x40, 0x59, 0x00, 0x1f, 0xbc,
            0x9b, 0x9e, 0x8f, 0xf6, 0x1d, 0x17, 0x01, 0x10, 0x0a, 0x99, 0x2b, 0xd2, 0xfa, 0xfa,
            0xa0, 0x7b, 0xb2, 0xd5, 0xfc, 0x2d, 0x9a, 0xff, 0x46, 0xa9, 0x35, 0xd8, 0xab, 0x9a,
            0x30, 0xbf, 0x5c, 0xd7, 0x67, 0xd6, 0x2f, 0xa6, 0xec, 0xda, 0xb5, 0xda, 0xda, 0x9b,
            0xdd, 0xae, 0x19, 0x5f, 0xb3, 0xbc, 0x34, 0xd9, 0xba, 0x85, 0xad, 0xd5, 0x6c, 0xc3,
            0x07, 0x9a, 0xa5, 0x6c, 0xd9, 0xdd, 0xfa, 0xdc, 0x7c, 0xa6, 0xa4, 0xdd, 0x53, 0xb3,
            0x62, 0xaf, 0xa5, 0x94, 0xa4, 0xcc, 0xda, 0xd6, 0x68, 0x91, 0x7e, 0x6e, 0x7d, 0x63,
            0xe9, 0xc1, 0x07, 0xbb, 0x56, 0xb7, 0x48, 0x61, 0xe2, 0x2a, 0x0d, 0xa6, 0xdd, 0x48,
            0x10, 0x7e, 0xb5, 0xd1, 0x10, 0xae, 0x2d, 0x25, 0x78, 0xe9, 0x97, 0xf6, 0x16, 0x78,
            0x18, 0x2c, 0xd2, 0xde, 0xea, 0x0a, 0x0a, 0x12, 0xed, 0x0c, 0xdb, 0xa3, 0x21, 0x85,
            0xc3, 0x73, 0x05, 0x90, 0x75, 0xb5, 0x71, 0xfa, 0x98, 0x42, 0x58, 0xba, 0x82, 0x8f,
            0x77, 0x9b, 0x14, 0x75, 0x0d, 0xd6, 0x59, 0xff, 0x62, 0xb5, 0xfa, 0xc0, 0x49, 0x42,
            0x0d, 0x20, 0x29, 0x0e, 0x7c, 0xf6, 0xfe, 0xc8, 0xa7, 0x20, 0x5e, 0x33, 0x24, 0x54,
            0x59, 0xb2, 0x52, 0xea, 0xa0, 0x16, 0x5f, 0x90, 0x87, 0x29, 0xdd, 0x03, 0x4f, 0x57,
            0xb1, 0x0a, 0x1c, 0xd9, 0x03, 0x00, 0x20, 0xf9, 0x64, 0xe3, 0x1f, 0x36, 0x00, 0x2a,
            0xe7, 0xe4, 0xba, 0x98, 0x00, 0xa8, 0xf2, 0x82, 0x09, 0x31, 0xc8, 0x00, 0xc2, 0xde,
            0xc3, 0xac, 0xe7, 0x37, 0x00, 0x80, 0x90, 0xb2, 0xb3, 0x3e, 0x00, 0xc2, 0x29, 0x40,
            0x6e, 0x19, 0x09, 0x53, 0x3c, 0x5f, 0x7f, 0x00, 0xbb, 0x30, 0x37, 0xba, 0x10, 0x00,
            0xa0, 0x7f, 0xd1, 0xfd, 0x18, 0xe8, 0xd3, 0x07, 0x40, 0xbc, 0xfe, 0x3f, 0xb1, 0x17,
            0x52, 0xd0, 0xdf, 0x37, 0xfe, 0x63, 0x9b, 0xec, 0xaf, 0xbc, 0x18, 0x05, 0xdf, 0xa6,
            0x23, 0x88, 0x21, 0x23, 0x9b, 0x7f, 0x03, 0x80, 0x98, 0xa0, 0x09, 0x59, 0x03, 0xbf,
            0x36, 0xd6, 0xad, 0xd6, 0xb1, 0x1d, 0x80, 0xbb, 0x5c, 0x89, 0xe9, 0x61, 0xf2, 0x9d,
            0xe0, 0x4a, 0xf2, 0xa6, 0xf1, 0x13, 0x00, 0xf2, 0x4d, 0x0b, 0x4e, 0x93, 0x1c, 0x5d,
            0xe1, 0xf4, 0x8d, 0xd4, 0x00, 0x68, 0xf9, 0x37, 0x6d, 0xe4, 0xb0, 0xa9, 0xa7, 0xb2,
            0x89, 0x00, 0xc6, 0x8e, 0x32, 0x7e, 0x85, 0x13, 0x5a, 0xce, 0x4d, 0x6b, 0x4e, 0xba,
            0xaa, 0x14, 0xe4, 0x22, 0x11, 0x98, 0x76, 0x6b, 0xa8, 0xc4, 0x3c, 0x60, 0x2f, 0x01,
            0x5c, 0xbf, 0xf9, 0xf9, 0x87, 0x87, 0x00, 0xa2, 0x0f, 0xe4, 0xf2, 0x5c, 0x8c, 0x95,
            0x7e, 0x81, 0x63, 0xbf, 0x80, 0xb3, 0x9f, 0x9f, 0xeb, 0x19, 0xe7, 0xbb, 0x6c, 0x52,
            0xa3, 0x7c, 0x10, 0x00, 0x3d, 0x11, 0x8b, 0xfc, 0xb7, 0x8d, 0x99, 0xdf, 0xc8, 0x3d,
            0xc0, 0x00, 0xc8, 0xec, 0xe3, 0x5d, 0x67, 0xcb, 0x3d, 0xd5, 0xb6, 0xb9, 0xdb, 0xbc,
            0xcc, 0x7c, 0xf9, 0xa6, 0xb3, 0x00, 0xd1, 0x8e, 0x0b, 0xfa, 0xd9, 0xfd, 0x74, 0xcf,
            0x23, 0xcd, 0xc2, 0x7c, 0xba, 0x00, 0x14, 0x33, 0x0e, 0x77, 0x99, 0xe3, 0x8b, 0xdf,
            0xe1, 0x78, 0xa5, 0x64, 0x93, 0x2d, 0xdd, 0xfb, 0x1e, 0x8d, 0xde, 0x44, 0xe2, 0xdb,
            0x7e, 0x10, 0x82, 0x38, 0x26, 0x27, 0xf9, 0xb8, 0xb6, 0x1c, 0xd5, 0x44, 0x82, 0x0e,
            0x3f, 0x95, 0x07, 0xdf, 0x7d, 0x51, 0x52, 0x49, 0xd3, 0xaa, 0x05, 0xb6, 0xdd, 0x49,
            0x07, 0x38, 0xb4, 0x19, 0x6e, 0xd6, 0xd9, 0x0e, 0x9c, 0xef, 0xfd, 0x88, 0xc0, 0x41,
            0x6f, 0x7b, 0x04, 0xbf, 0xa7, 0x25, 0x79, 0xff, 0x02, 0x30, 0x6b, 0xcc, 0xe9, 0x4b,
            0xbf, 0x97, 0xb9, 0xa8, 0x8b, 0xae, 0x39, 0x0d, 0xf6, 0x1f, 0xe4, 0x31, 0xa0, 0x88,
            0x15, 0xbb, 0x97, 0xe2, 0x3a, 0x6b, 0x4e, 0x7f, 0xaa, 0x6e, 0xdf, 0x4b, 0x23, 0xb8,
            0xa3, 0x7b, 0xe2, 0x17, 0xb8, 0x41, 0xdc, 0x6d, 0xbe, 0xe7, 0xfc, 0xbe, 0xdd, 0xef,
            0xf9, 0xef, 0xfa, 0xe6, 0xe6, 0x7c, 0x25, 0xb7, 0xa3, 0xfe, 0x3c, 0x57, 0x7b, 0x6c,
            0x6f, 0xf1, 0x85, 0xc6, 0xc7, 0x37, 0x89, 0x3b, 0xb2, 0x03, 0xdd, 0xfb, 0xfe, 0xa8,
            0x99, 0x66, 0x43, 0x2a, 0x22, 0x9e, 0xea, 0xa7, 0xf6, 0x5c, 0x02, 0x2c, 0x52, 0x16,
            0xec, 0xe7, 0xf5, 0xd9, 0x17, 0x41, 0xc4, 0x76, 0xba, 0x7b, 0xb0, 0x14, 0xff, 0x55,
            0x19, 0x46, 0x41, 0xe5, 0x54, 0x6b, 0x7e, 0xf0, 0xb7, 0x08, 0x11, 0x78, 0x69, 0xf8,
            0x95, 0x49, 0x31, 0x14, 0xfe, 0x70, 0x14, 0xc3, 0x7d, 0xe0, 0xe4, 0xe7, 0x3f, 0x58,
            0x39, 0x4e, 0x98, 0x92, 0x06, 0xf7, 0x2a, 0x84, 0x86, 0xc0, 0x1d, 0x3f, 0xe7, 0x4c,
            0xde, 0x97, 0xbe, 0xb8, 0x30, 0x61, 0xe6, 0xad, 0x78, 0x6f, 0x30, 0xff, 0xb6, 0x01,
            0xd9, 0x4c, 0x88, 0x10, 0x31, 0xb9, 0x38, 0x16, 0xc1, 0xa5, 0x02, 0x62, 0xf2, 0xac,
            0xaa, 0x0e, 0xe8, 0x9e, 0x79, 0x80, 0x9c, 0xfa, 0x6f, 0x7e, 0x03, 0xee, 0xfb, 0x58,
            0xcf, 0x0a, 0x58, 0x01, 0xfe, 0x1b, 0x4c, 0xa9, 0xd6, 0x55, 0xca, 0x01, 0x58, 0x44,
            0x16, 0xee, 0x24, 0xbf, 0xfb, 0x42, 0x0c, 0xe1, 0x12, 0x38, 0x85, 0x75, 0x29, 0x40,
            0x56, 0xcb, 0x28, 0x9a, 0x59, 0x25, 0x9f, 0xed, 0xdb, 0x08, 0xf4, 0xab, 0x52, 0x0e,
            0xa7, 0x74, 0xdc, 0x4d, 0x77, 0xc6, 0x04, 0x22, 0x7d, 0x18, 0xd2, 0x85, 0xce, 0x0d,
            0x49, 0x18, 0x2e, 0x08, 0xf5, 0xd2, 0xef, 0x1d, 0x2d, 0xbc, 0x97, 0x09, 0x0d, 0x1b,
            0x01, 0xd1, 0x76, 0x1c, 0xb3, 0xaa, 0xba, 0xf5, 0xbc, 0x0a, 0x40, 0xbb, 0xa3, 0xdc,
            0xef, 0x46, 0x88, 0x90, 0x5a, 0x00, 0x66, 0x74, 0x99, 0x19, 0x50, 0xc3, 0x23, 0x96,
            0x50, 0x7d, 0xbc, 0x09, 0xb7, 0xc0, 0x6a, 0xd5, 0xb7, 0xb7, 0xd4, 0xb0, 0x5a, 0xe8,
            0xcd, 0x0f, 0x9e, 0x93, 0xf2, 0x50, 0xc7, 0xa3, 0xb0, 0x71, 0x0a, 0x55, 0xe9, 0xbf,
            0xa3, 0xb7, 0x34, 0xed, 0x34, 0x12, 0x1b, 0xb5, 0xcf, 0xaf, 0x8e, 0x5c, 0x24, 0x2c,
            0x41, 0x84, 0xc3, 0x25, 0x4a, 0x62, 0x9f, 0x87, 0xf0, 0x44, 0x6e, 0x3b, 0x32, 0xa9,
            0x50, 0xcb, 0x2a, 0x1c, 0x06, 0x0a, 0x3b, 0xc8, 0xf5, 0x92, 0xee, 0x0e, 0x54, 0x9c,
            0xca, 0x88, 0x29, 0xb7, 0x0c, 0x69, 0xca, 0xc6, 0x72, 0xa5, 0x81, 0x19, 0xfb, 0xaa,
            0x66, 0x12, 0x24, 0x30, 0xda, 0xd5, 0xd4, 0x8d, 0x5b, 0x29, 0x3b, 0x32, 0x94, 0x42,
            0xda, 0x69, 0xd8, 0x56, 0xd0, 0x93, 0x0a, 0xe0, 0xa6, 0x1a, 0x35, 0x8d, 0x76, 0x54,
            0x53, 0x55, 0xee, 0x5f, 0x0a, 0x7a, 0x78, 0x96, 0xb1, 0xcd, 0xb2, 0x17, 0x1b, 0x91,
            0x9f, 0xcc, 0x2d, 0x92, 0x24, 0x58, 0xf1, 0xf4, 0x66, 0x13, 0x54, 0x2d, 0xa2, 0x14,
            0x15, 0x93, 0x31, 0x6a, 0xe9, 0xdb, 0x07, 0x15, 0x7d, 0x5e, 0x16, 0x24, 0x26, 0x6b,
            0xf2, 0x6c, 0x43, 0x56, 0xb3, 0xbf, 0x1f, 0x92, 0xcb, 0x7f, 0xf5, 0x3c, 0xa8, 0x0f,
            0x69, 0x28, 0x84, 0x1d, 0xdc, 0xd1, 0x80, 0x1e, 0x2a, 0x8c, 0x86, 0x88, 0x3e, 0xdf,
            0x49, 0x91, 0x73, 0x0c, 0x4c, 0xa1, 0x68, 0x38, 0x17, 0x3b, 0x9e, 0x2f, 0x9a, 0x67,
            0x7d, 0xae, 0xdf, 0x85, 0xf0, 0xc8, 0x20, 0x84, 0x62, 0xef, 0xe0, 0xad, 0x90, 0x89,
            0xb4, 0xc1, 0x6e, 0xa9, 0x5f, 0x7a, 0xb0, 0xff, 0x1f, 0xff, 0xc0, 0xc5, 0x48, 0x0d,
            0x2e, 0xed, 0x67, 0x89, 0x8f, 0x91, 0x0a, 0x2b, 0x97, 0x36, 0xb3, 0xe4, 0x15, 0x67,
            0x41, 0x05, 0x97, 0x01, 0x1f, 0x2a, 0x70, 0xba, 0x08, 0xe9, 0xc2, 0x75, 0x42, 0xad,
            0x24, 0x31, 0x3b, 0x64, 0xe0, 0x2c, 0x59, 0x5f, 0x6d, 0x16, 0x18, 0x2e, 0xd1, 0xcb,
            0x29, 0xa0, 0x3c, 0xb9, 0x08, 0x8e, 0xb6, 0x5f, 0x68, 0x1c, 0xb2, 0x52, 0x6d, 0x1f,
            0x02, 0x75, 0xf2, 0x1c, 0xcf, 0x45, 0xea, 0x27, 0xc2, 0x85, 0xc9, 0xbc, 0xc6, 0xfe,
            0x05, 0x15, 0xdf, 0x07, 0xd4, 0x9c, 0x8f, 0x01, 0xd7, 0x18, 0x3e, 0xde, 0xc8, 0xd0,
            0xfa, 0xf8, 0x23, 0xdf, 0x02, 0x5f, 0x9e, 0xd5, 0x23, 0xa8, 0xc8, 0xfd, 0x07, 0x02,
            0xf2, 0x03, 0x1d, 0xe3, 0x36, 0x96, 0x80, 0xe8, 0x72, 0xd5, 0x41, 0xb2, 0x84, 0xb2,
            0x39, 0xee, 0xe4, 0x7c, 0x06, 0x2a, 0x08, 0x68, 0x0a, 0x59, 0x22, 0x48, 0xfe, 0xe9,
            0x77, 0x77, 0x54, 0xf6, 0x00, 0x80, 0x85, 0x48, 0x7a, 0x6c, 0x82, 0x47, 0xbc, 0x99,
            0xb0, 0x28, 0xfe, 0x6a, 0x49, 0x85, 0x36, 0x4b, 0x53, 0xc8, 0x82, 0x17, 0xa3, 0x87,
            0xd9, 0x68, 0x60, 0x6f, 0x7e, 0x89, 0x08, 0xee, 0x99, 0x98, 0x1f, 0x4b, 0x0e, 0x99,
            0x3f, 0x5d, 0xd0, 0x8e, 0xa5, 0x90, 0x6c, 0xda, 0x7b, 0xa4, 0xb9, 0x6a, 0x1a, 0x5d,
            0xd5, 0x50, 0xec, 0xc5, 0x32, 0x28, 0x7b, 0x11, 0xcc, 0x64, 0x58, 0xb6, 0x8c, 0x79,
            0x4d, 0x25, 0xd1, 0x57, 0xe0, 0x86, 0xc9, 0xa8, 0x4a, 0x1e, 0xcd, 0x0c, 0x9c, 0x41,
            0x72, 0x99, 0xe2, 0x2f, 0x70, 0x3b, 0xeb, 0x34, 0x0d, 0x62, 0x02, 0xca, 0x7a, 0x1b,
            0xc9, 0x97, 0x66, 0x6b, 0x4c, 0xae, 0x1a, 0x27, 0xa5, 0x15, 0x33, 0x00, 0xd0, 0x58,
            0x0e, 0xdc, 0x9e, 0xea, 0x89, 0xd7, 0xa3, 0x26, 0x35, 0xe7, 0x60, 0x21, 0x0b, 0x20,
            0x34, 0x98, 0x27, 0x35, 0x16, 0xbd, 0x51, 0xf2, 0x3c, 0xad, 0x64, 0xf7, 0xd7, 0xb5,
            0xda, 0x2a, 0xab, 0x86, 0x5b, 0xf2, 0x48, 0x04, 0xdd, 0xbe, 0x53, 0x8f, 0x63, 0x07,
            0x3a, 0x6f, 0x57, 0x06, 0x1e, 0xe6, 0x01, 0xa0, 0xdc, 0x04, 0x91, 0x1c, 0x31, 0x9e,
            0x45, 0x66, 0xe4, 0xbf, 0x1f, 0x67, 0xe9, 0x1e, 0x18, 0x7b, 0xe0, 0x32, 0xe8, 0x30,
            0xe8, 0x52, 0x9d, 0x0c, 0x7a, 0x01, 0xc9, 0x5a, 0x02, 0x64, 0xb2, 0x5c, 0x4f, 0xb1,
            0xa9, 0xa1, 0xa1, 0xf7, 0x41, 0x52, 0xa1, 0xa3, 0x37, 0x38, 0x35, 0x4e, 0x61, 0xba,
            0x04, 0xfa, 0xdd, 0x36, 0x1f, 0x31, 0xf6, 0xa3, 0x59, 0xd6, 0x3f, 0xb9, 0x97, 0x58,
            0x65, 0x87, 0x83, 0x05, 0xce, 0xab, 0x1a, 0x33, 0x09, 0xa4, 0x20, 0xc7, 0x73, 0x02,
            0xe6, 0x2a, 0x89, 0x0b, 0x72, 0x3a, 0x24, 0x92, 0x61, 0x28, 0xa7, 0x2f, 0xb9, 0xf7,
            0x5c, 0x8d, 0x6e, 0xa8, 0xb7, 0xf5, 0xf0, 0x00, 0x8a, 0x3d, 0x96, 0x66, 0x3c, 0x8c,
            0xbd, 0xbb, 0x66, 0xc3, 0x21, 0x47, 0x44, 0xdd, 0x37, 0xdd, 0xa8, 0x41, 0xcf, 0xf9,
            0x55, 0x0c, 0xfe, 0x06, 0x75, 0x0d, 0x22, 0xa8, 0x6b, 0xdc, 0x8c, 0x38, 0x52, 0x79,
            0x11, 0x0d, 0x65, 0x5e, 0xc6, 0x72, 0x0e, 0x2b, 0xa8, 0x5c, 0x95, 0x62, 0x63, 0x3f,
            0x50, 0x9f, 0x3d, 0x9b, 0xec, 0xf3, 0xff, 0x0c, 0x66, 0xd4, 0xec, 0x85, 0x53, 0xb0,
            0x1a, 0xcb, 0xc0, 0x9f, 0x3b, 0xc8, 0x21, 0x54, 0x47, 0x19, 0x4a, 0x73, 0xe8, 0x8e,
            0x67, 0xda, 0xd4, 0x26, 0x35, 0xe0, 0x26, 0xd5, 0x4c, 0x49, 0x2c, 0x39, 0xdf, 0xe6,
            0x77, 0x38, 0xda, 0xaa, 0x22, 0xd7, 0x91, 0xec, 0x99, 0x69, 0x2f, 0xb6, 0xa6, 0x07,
            0x1a, 0xe0, 0xf7, 0xa6, 0x3e, 0xd7, 0xdc, 0x89, 0xfb, 0x12, 0x74, 0xbe, 0x44, 0x67,
            0x73, 0x00, 0x34, 0xcf, 0x5e, 0xf5, 0xc3, 0x81, 0x26, 0x1d, 0xff, 0x4c, 0xa9, 0x15,
            0x1a, 0x1a, 0x97, 0x36, 0x91, 0x25, 0x2e, 0x48, 0xa2, 0x0f, 0xa4, 0xf8, 0x31, 0x3f,
            0x8c, 0xee, 0x0e, 0xf8, 0x69, 0x04, 0xd3, 0xd7, 0x81, 0xf6, 0x8b, 0xd8, 0x0d, 0xf0,
            0xb9, 0xdb, 0x7c, 0xc7, 0x9a, 0xd3, 0xf5, 0x5d, 0xeb, 0xda, 0x87, 0xfc, 0xa8, 0x40,
            0x85, 0xee, 0xd2, 0x80, 0x8e, 0x3f, 0xa4, 0xf0, 0xd5, 0xb6, 0x9e, 0xf1, 0x31, 0xf4,
            0xf7, 0x9e, 0xe9, 0xc7, 0xc8, 0x62, 0x7a, 0x66, 0x43, 0x07, 0xe6, 0x4c, 0x31, 0x02,
            0xe3, 0x86, 0x27, 0x0a, 0xda, 0xb3, 0x4d, 0x47, 0x4d, 0xc3, 0x84, 0x7c, 0xe5, 0x2a,
            0x6e, 0x8e, 0x2b, 0x34, 0x22, 0xb7, 0x34, 0x86, 0x63, 0x02, 0x80, 0xd1, 0xe3, 0x50,
            0x28, 0xc0, 0x25, 0x53, 0x97, 0xee, 0xd8, 0xfd, 0x70, 0xe8, 0x23, 0x67, 0x6d, 0xbf,
            0xcb, 0x2f, 0xac, 0x9e, 0x56, 0x96, 0x4c, 0x2f, 0x1b, 0xd8, 0x53, 0xe3, 0x8b, 0xb9,
            0xf8, 0xd3, 0xf6, 0x50, 0x75, 0xa0, 0xc3, 0x80, 0x42, 0x65, 0xa3, 0xa4, 0x86, 0x68,
            0x51, 0xb7, 0x78, 0x8e, 0x8e, 0x51, 0x51, 0x78, 0x78, 0x8e, 0x0a, 0x9c, 0xc0, 0x88,
            0x4e, 0xeb, 0x81, 0x24, 0xc7, 0xa9, 0xb0, 0x31, 0xa7, 0xc6, 0x8b, 0xbe, 0x55, 0xb0,
            0xf6, 0x1f, 0xf0, 0x5e, 0x3f, 0xaa, 0xaa, 0x49, 0x88, 0x3d, 0x8b, 0x0a, 0x6e, 0x14,
            0x83, 0x24, 0xc3, 0xf3, 0xdd, 0x9e, 0x0a, 0x21, 0x8f, 0xb2, 0x96, 0x41, 0xa6, 0x6b,
            0x55, 0x19, 0xf7, 0x27, 0xfc, 0x00, 0xe5, 0x0b, 0x53, 0x51, 0x6b, 0x79, 0xd1, 0x7c,
            0xf9, 0x13, 0x20, 0xa2, 0xc4, 0x2b, 0x01, 0x11, 0x53, 0x30, 0x86, 0xde, 0x73, 0x88,
            0x13, 0x30, 0xe3, 0x75, 0x86, 0x87, 0xde, 0x67, 0x63, 0x6c, 0xd1, 0x74, 0xa6, 0xd5,
            0x35, 0xa4, 0x9b, 0x8f, 0xd5, 0x08, 0xc1, 0x37, 0x11, 0x21, 0x47, 0xaa, 0xd8, 0x27,
            0x2c, 0x0c, 0x20, 0xbc, 0x97, 0x43, 0xed, 0x66, 0x7f, 0x26, 0xd4, 0x86, 0xc7, 0x6c,
            0x00, 0x9d, 0xd1, 0x37, 0x13, 0xbe, 0x49, 0x0d, 0x5a, 0xa9, 0x26, 0x4d, 0xe6, 0x21,
            0x2f, 0xa7, 0x85, 0x56, 0xa5, 0x4d, 0x6d, 0xdf, 0xed, 0xe0, 0x7d, 0x90, 0xc7, 0x8f,
            0xc7, 0x19, 0xf9, 0x8a, 0x70, 0x52, 0x8c, 0x16, 0xf5, 0x28, 0x40, 0x5e, 0xcb, 0xb8,
            0x8f, 0x84, 0x10, 0x8d, 0x26, 0xd3, 0x89, 0x25, 0xda, 0xb0, 0xb4, 0x18, 0xc9, 0x35,
            0xdd, 0x5d, 0xe6, 0x76, 0x2b, 0xd5, 0x04, 0xa3, 0x19, 0xa0, 0xfc, 0x00, 0x00, 0x65,
            0x78, 0x77, 0x8a, 0xb6, 0x99, 0x86, 0x69, 0x96, 0xaa, 0x87, 0xba, 0x98, 0xba, 0xa8,
            0x80, 0xa8, 0xab, 0x8a, 0xb9, 0xb9, 0x90, 0x09, 0xa9, 0xb8, 0x79, 0x99, 0xa9, 0x8a,
            0x70, 0x89, 0xba, 0x98, 0xaa, 0x69, 0x98, 0xa8, 0xba, 0x79, 0xa9, 0x87, 0x8a, 0x7a,
            0x88, 0x79, 0xaa, 0x70, 0x98, 0xab, 0xb0, 0x99, 0xb8, 0x07, 0xa7, 0x0b, 0x00, 0xb8,
            0x9a, 0x66, 0xbb, 0x00, 0xbb, 0x89, 0x8b, 0x89, 0x69, 0x77, 0x99, 0x68, 0x5a, 0x7b,
            0x00, 0x0b, 0x00, 0xa0, 0x00, 0xb8, 0xbb, 0x0b, 0x00, 0x80, 0xb0, 0x90, 0x00, 0x0b,
            0xa0, 0x00, 0x00, 0xb9, 0xba, 0xb0, 0xbb, 0x89, 0x9a, 0x0b, 0x99, 0x87, 0x79, 0xa9,
            0x89, 0x87, 0x0b, 0x09, 0x99, 0xaa, 0x9b, 0x00, 0xa8, 0x00, 0x90, 0x00, 0xb0, 0xb9,
            0x90, 0xa9, 0x99, 0x85, 0x69, 0x97, 0x0b, 0xb8, 0xb9, 0xb8, 0xa9, 0x97, 0xa9, 0xb7,
            0x59, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x0b, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xa9, 0x00,
            0x00, 0xb0, 0x00, 0x00, 0xb0, 0x96, 0x89, 0xab, 0xba, 0x0b, 0x00, 0x00, 0xb0, 0x97,
            0xa9, 0x09, 0xb0, 0x0b, 0x00, 0x0b, 0x00, 0x76, 0x99, 0xa0, 0x09, 0xb0, 0x00, 0x00,
            0xbb, 0x76, 0x8b, 0x9a, 0x09, 0x00, 0x00, 0xbb, 0xb0, 0x76, 0xa8, 0x09, 0xab, 0xb0,
            0xb0, 0x0b, 0xab, 0x77, 0x98, 0x99, 0x90, 0x00, 0x0b, 0x0b, 0xb0, 0x77, 0xaa, 0xb0,
            0x00, 0x00, 0x00, 0x00, 0xa0, 0x98, 0xb0, 0xaa, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0xa7, 0xbd, 0xe4, 0x21, 0xa8, 0x90, 0x16, 0xea, 0x92, 0xe7,
            0x1e, 0x42, 0x88, 0xec, 0x00, 0x20, 0xac, 0xc0, 0x80, 0x45, 0x03, 0x84, 0x38, 0xd8,
            0x21, 0xe1, 0xf5, 0x4d, 0x68, 0x78, 0xde, 0x1d, 0x63, 0x9a, 0xc6, 0x00, 0x15, 0x93,
            0x01, 0xad, 0xfc, 0x13, 0x5f, 0x34, 0xae, 0xf8, 0xd0, 0x00, 0x7c, 0x70, 0x49, 0x42,
            0x5c, 0x48, 0x0b, 0x6d, 0x61, 0x1c, 0x78, 0x48, 0xc9, 0x66, 0xe5, 0x99, 0x83, 0x19,
            0x31, 0xaa, 0xf9, 0x9a, 0xc4, 0xd2, 0x04, 0x3e, 0x5e, 0x89, 0x3a, 0xa0, 0xab, 0x74,
            0x0e, 0x20, 0xcd, 0x0e, 0x0c, 0xab, 0x58, 0xa8, 0xe9, 0xab, 0xee, 0xf2, 0x3c, 0x33,
            0x89, 0xbd, 0xf5, 0x7c, 0xe8, 0x0f, 0xa7, 0x33, 0xf0, 0xc9, 0xf5, 0xd4, 0xb0, 0x02,
            0xce, 0x14, 0xad, 0x58, 0x3b, 0x47, 0x6e, 0x18, 0xf6, 0x45, 0x91, 0x3f, 0x60, 0xb0,
            0xcf, 0xac, 0xd4, 0xca, 0x92, 0x16, 0xe5, 0xea, 0x90, 0x0a, 0xd6, 0x16, 0x6c, 0x3c,
            0xa5, 0x87, 0xfb, 0x69, 0x67, 0x0c, 0x2a, 0xb7, 0x3b, 0x68, 0xa4, 0xd9, 0x51, 0x9e,
            0xa0, 0x97, 0x65, 0x6a, 0x05, 0x1f, 0x2b, 0x48, 0x93, 0x62, 0x1a, 0x9a, 0x43, 0xc8,
            0xd2, 0xf7, 0x31, 0x86, 0xce, 0xac, 0xd6, 0x94, 0x67, 0xd8, 0xf4, 0x19, 0x6b, 0xa5,
            0x7d, 0x10, 0x9e, 0xb1, 0xd7, 0xf8, 0x78, 0xad, 0xfe, 0xa6, 0x6a, 0x2d, 0x7b, 0x76,
            0x11, 0xfe, 0x5b, 0xa6, 0x3c, 0x6f, 0xc3, 0x21, 0x5b, 0x6f, 0xfd, 0x18, 0x7e, 0x93,
            0xf5, 0x20, 0xd5, 0x10, 0xd6, 0xf4, 0x23, 0x32, 0x31, 0xcf, 0x06, 0x48, 0x22, 0x79,
            0xdf, 0xf8, 0x43, 0x85, 0xd7, 0x2b, 0x8c, 0x8e, 0xbd, 0x73, 0x90, 0xdd, 0x42, 0x0c,
            0x68, 0xe4, 0xe7, 0x6b, 0x3e, 0xde, 0xa2, 0x2e, 0xc3, 0xdd, 0xe0, 0xff, 0xaa, 0x8e,
            0x3c, 0x8f, 0x3f, 0x03, 0xa8, 0x53, 0x3c, 0x87, 0x90, 0x51, 0x42, 0x0b, 0x32, 0xbd,
            0x6b, 0xdd, 0x54, 0xa0, 0x72, 0xb5, 0xe0, 0x05, 0xcf, 0x00, 0xd0, 0x31, 0x83, 0x1c,
            0x88, 0xa9, 0x58, 0xa7, 0x15, 0xab, 0x4b, 0x58, 0x59, 0x95, 0x58, 0xfc, 0xa9, 0xf4,
            0x01, 0x04, 0x51, 0x99, 0x20, 0x17, 0x54, 0xdc, 0x04, 0x0c, 0x1b, 0x6d, 0x1e, 0xb0,
            0xc1, 0x5d, 0xb8, 0xb2, 0x5e, 0xfb, 0x9a, 0xb5, 0x79, 0xdf, 0x2d, 0xb8, 0x64, 0x0b,
            0x00, 0xe7, 0x49, 0x25, 0x97, 0xc9, 0xbb, 0x75, 0x44, 0xdf, 0x81, 0xac, 0xbd, 0xc1,
            0x23, 0xcd, 0x9b, 0x7c, 0xbb, 0xfd, 0x7e, 0xfc, 0x62, 0x01, 0x8f, 0x65, 0xad, 0xa8,
            0x48, 0x00, 0xff, 0x8c, 0xd5, 0x16, 0x52, 0xc0, 0x10, 0xb5, 0x5b, 0x4e, 0xf1, 0x30,
            0x83, 0x3c, 0x1f, 0xf5, 0xa8, 0x55, 0x7a, 0xbf, 0x0a, 0x81, 0x7b, 0x88, 0xd0, 0xe6,
            0x2d, 0x69, 0xc6, 0xfd, 0x43, 0x52, 0xe5, 0x2f, 0x2e, 0x97, 0x45, 0xba, 0xe2, 0x38,
            0xf4, 0xf5, 0x8f, 0x76, 0xd3, 0x1f, 0x7c, 0x48, 0x90, 0xb4, 0x7c, 0x2f, 0x37, 0xd8,
            0x90, 0x04, 0x53, 0xd0, 0xdb, 0xa4, 0xf7, 0x98, 0x86, 0xe7, 0xa0, 0x21, 0x2d, 0xd0,
            0xa2, 0x16, 0x9f, 0x19, 0x55, 0xf4, 0x9e, 0xdb, 0xbe, 0xf5, 0x7a, 0x5d, 0x7e, 0xcb,
            0xab, 0xcc, 0x93, 0xe7, 0xa9, 0x96, 0xc9, 0x5e, 0xaf, 0xa4, 0xae, 0xa9, 0x8c, 0x49,
            0xe9, 0x49, 0xa7, 0x3f, 0x95, 0xf0, 0x84, 0xbb, 0x65, 0x51, 0xa6, 0xa6, 0x87, 0xa3,
            0xcf, 0x4e, 0x60, 0x24, 0x14, 0x4f, 0x34, 0xab, 0xbc, 0x15, 0xac, 0xab, 0xda, 0x48,
            0xc2, 0xd7, 0xeb, 0x72, 0xa1, 0x84, 0x42, 0xa4, 0x67, 0xeb, 0x43, 0xed, 0xe7, 0x98,
            0x96, 0x14, 0x1e, 0x3b, 0x4b, 0x16, 0x7b, 0x85, 0x0a, 0x1c, 0x4b, 0x61, 0xcf, 0x2e,
            0xa2, 0x0c, 0xb9, 0x6f, 0xc6, 0xf6, 0xa5, 0x4f, 0xf7, 0xc8, 0x6b, 0x4c, 0x59, 0x21,
            0x2d, 0x58, 0x59, 0x74, 0x5e, 0x3d, 0xbf, 0xaf, 0x74, 0x64, 0xcd, 0xce, 0xaf, 0x17,
            0x9e, 0xf3, 0x43, 0x87, 0x6d, 0xd3, 0xf9, 0x7f, 0xf4, 0x3e, 0x21, 0x34, 0xf4, 0x23,
            0xe5, 0xb4, 0xa3, 0x1a, 0x86, 0x03, 0x73, 0x2b, 0x4b, 0x8a, 0xc4, 0x03, 0xb7, 0xb1,
            0x87, 0x39, 0x2a, 0x27, 0xef, 0xad, 0xa1, 0x45, 0xe7, 0x8f, 0x71, 0xda, 0xdd, 0xb2,
            0x43, 0x46, 0xe0, 0xb4, 0x20, 0xd9, 0x3d, 0x1c, 0x0b, 0x94, 0xd3, 0xb8, 0xf7, 0xc1,
            0x1a, 0xcd, 0xe1, 0x4a, 0x5a, 0x95, 0x5b, 0x86, 0x5c, 0xa3, 0x8e, 0x93, 0x83, 0x7f,
            0x3d, 0x9a, 0x6e, 0x62, 0x3d, 0xac, 0xdb, 0x04, 0x92, 0x96, 0xee, 0x29, 0xf5, 0xe3,
            0xa8, 0x84, 0x1b, 0xcb, 0x33, 0x08, 0x6f, 0x02, 0x56, 0x16, 0xa1, 0xec, 0x3e, 0x14,
            0x29, 0xec, 0xec, 0xce, 0x68, 0x87, 0xb4, 0xc7, 0x53, 0xc0, 0x5c, 0x3b, 0x95, 0x51,
            0xb8, 0x1f, 0x89, 0x79, 0xf7, 0x2e, 0x15, 0x3e, 0xc1, 0xa9, 0x4b, 0x39, 0xc7, 0x28,
            0x89, 0xa5, 0x57, 0x3c, 0x02, 0x92, 0x06, 0x76, 0x66, 0xd7, 0x90, 0xaa, 0x5b, 0xcf,
            0xb2, 0xdc, 0x08, 0x30, 0xa5, 0xe9, 0xf7, 0x0a, 0xd2, 0x01, 0xda, 0xc8, 0xda, 0xad,
            0xc9, 0xcc, 0x15, 0xfb, 0x99, 0xf2, 0xd4, 0x68, 0x54, 0xd3, 0x39, 0xcd, 0x10, 0xf8,
            0x7c, 0x89, 0x73, 0xc6, 0xc2, 0x5b, 0x48, 0x91, 0xf5, 0x2e, 0xe5, 0x2d, 0xb7, 0x8a,
            0xdf, 0xca, 0x9e, 0x2d, 0x5e, 0xd1, 0x61, 0x31, 0x66, 0x8c, 0xff, 0xdd, 0xc2, 0x51,
            0xf8, 0x2d, 0x4b, 0x2d, 0x67, 0xcd, 0xdf, 0x16, 0xe5, 0x85, 0x42, 0x4f, 0xac, 0x1b,
            0x65, 0x6c, 0xb9, 0x7a, 0x21, 0x78, 0x54, 0x4e, 0x91, 0xb6, 0x55, 0x20, 0x4e, 0xc6,
            0xcf, 0xb9, 0x6e, 0x39, 0x1b, 0x11, 0x12, 0x56, 0xaf, 0x4d, 0xdc, 0xa0, 0xc0, 0x47,
            0xc2, 0x19, 0xfd, 0x75, 0x22, 0xcf, 0x95, 0xee, 0xe9, 0x17, 0x0f, 0xad, 0x8c, 0x08,
            0xc2, 0x2f, 0x51, 0x6d, 0x61, 0x9f, 0x34, 0xc2, 0x52, 0xa1, 0x58, 0xe1, 0xd5, 0x87,
            0x54, 0xf6, 0xad, 0xbd, 0x19, 0x45, 0xa2, 0x56, 0x60, 0xfa, 0x00, 0x98, 0x99, 0xa5,
            0x66, 0x36, 0x80, 0xca, 0x9e, 0x3a, 0xea, 0xcd, 0x49, 0x20, 0x8e, 0xb3, 0x51, 0x8a,
            0x74, 0x98, 0x8b, 0x52, 0xa2, 0xc3, 0x2e, 0x90, 0x29, 0x3a, 0xc1, 0x4d, 0x4c, 0xd1,
            0x7d, 0x20, 0xbc, 0x72, 0x04, 0xa4, 0x99, 0x03, 0x22, 0x20, 0xa1, 0x0e, 0x38, 0xe1,
            0x12, 0xde, 0x93, 0xc1, 0x64, 0xea, 0xc4, 0xa8, 0xdf, 0x67, 0xd2, 0x18, 0x25, 0x60,
            0xd9, 0xf7, 0x61, 0x7f, 0x54, 0xf2, 0xb8, 0x1e, 0x48, 0x64, 0x4b, 0xb2, 0xb7, 0x5f,
            0xc4, 0x48, 0x0c, 0x2c, 0x7e, 0x01, 0xe4, 0x13, 0xa8, 0xe9, 0x49, 0x9b, 0xb7, 0x48,
            0xae, 0x71, 0x1f, 0x28, 0xba, 0xf8, 0xc1, 0xfc, 0x8e, 0xd1, 0xef, 0x49, 0x60, 0x80,
            0x2e, 0xbe, 0x63, 0xf0, 0x01, 0x74, 0x2b, 0x7d, 0xbb, 0xed, 0xc5, 0xb7, 0xf2, 0xbb,
            0x20, 0x14, 0x78, 0x5b, 0xcc, 0x9a, 0xbf, 0xdd, 0x22, 0xd6, 0xc6, 0xcd, 0x0d, 0xe9,
            0x30, 0x0c, 0x4b, 0x21, 0xf8, 0xa4, 0x6a, 0xf2, 0xbc, 0x65, 0xcc, 0xd5, 0xd8, 0x3b,
            0xd5, 0x5f, 0x00, 0x1c, 0x68, 0xbc, 0x76, 0xa8, 0xe6, 0xf8, 0xb2, 0x82, 0x31, 0x82,
            0xa9, 0x8b, 0x85, 0x89, 0xbe, 0x91, 0x95, 0x5c, 0x05, 0x54, 0xee, 0x1f, 0x7e, 0x94,
            0xaa, 0x9b, 0x1b, 0x00, 0x94, 0xb7, 0x17, 0xf0, 0x14, 0x89, 0x5b, 0x91, 0xe5, 0x42,
            0x4a, 0x7d, 0x06, 0x7c, 0xf4, 0xa9, 0x17, 0xff, 0x39, 0xae, 0xc9, 0x28, 0x03, 0x63,
            0xb5, 0x29, 0x1b, 0x53, 0x61, 0x83, 0x9b, 0xcc, 0x4a, 0x45, 0x8e, 0xa5, 0xa7, 0xf6,
            0xc2, 0xf6, 0x22, 0xf3, 0x37, 0xe4, 0x76, 0x88, 0x3a, 0x80, 0xac, 0x82, 0xfe, 0x5d,
            0x93, 0x0a, 0xcb, 0x98, 0xdd, 0x49, 0x4b, 0x4d, 0x43, 0x87, 0x0e, 0x97, 0x73, 0xc8,
            0xf9, 0xa0, 0x30, 0xc0, 0x43, 0x77, 0x46, 0x61, 0x86, 0xaa, 0x14, 0x4b, 0xe0, 0x17,
            0xdd, 0xb8, 0xfd, 0x0c, 0x98, 0xb8, 0x9e, 0xf1, 0x93, 0xfd, 0x57, 0xe1, 0x2b, 0xa8,
            0x53, 0xf7, 0xfa, 0x62, 0x0c, 0x29, 0xdc, 0x7f, 0xf3, 0x23, 0x45, 0xc7, 0xc8, 0x39,
            0x22, 0x3c, 0x48, 0xa8, 0xc8, 0xac, 0xa5, 0x9e, 0x6c, 0xf9, 0x3e, 0xf5, 0x9d, 0xd3,
            0x47, 0x42, 0xbf, 0x89, 0xfa, 0x99, 0xa5, 0x8f, 0xbb, 0xda, 0x54, 0xfc, 0x68, 0xbb,
            0xe8, 0x03, 0x19, 0x94, 0xf0, 0x5e, 0xe8, 0xf2, 0x25, 0x16, 0x85, 0x77, 0x12, 0x44,
            0x33, 0x1f, 0xee, 0x65, 0x1e, 0xa6, 0xcf, 0x5b, 0x4f, 0x0c, 0xad, 0x18, 0x73, 0xf1,
            0xf0, 0xf9, 0xa2, 0x6e, 0x51, 0xf7, 0x33, 0xee, 0x02, 0x06, 0x62, 0xe2, 0xf1, 0x71,
            0xf8, 0x1e, 0x43, 0xd6, 0x2d, 0xfa, 0xef, 0x5b, 0xc5, 0xa2, 0x8e, 0x12, 0x77, 0x3a,
            0x6c, 0x71, 0x02, 0x1b, 0x0c, 0x9e, 0xe9, 0xf2, 0x63, 0x29, 0xb1, 0xa5, 0x64, 0x9b,
            0xef, 0xfa, 0xb6, 0x18, 0x74, 0x14, 0x56, 0xca, 0x11, 0xce, 0xa4, 0xd8, 0x34, 0x07,
            0x00, 0x73, 0x31, 0xb8, 0x43, 0x23, 0xf8, 0x96, 0xcb, 0x72, 0x8d, 0xc8, 0xf8, 0xe6,
            0x08, 0xf6, 0xb8, 0x9b, 0x7e, 0x4a, 0xb2, 0xaa, 0x47, 0x43, 0x66, 0xf6, 0xe2, 0x0d,
            0xee, 0x27, 0x6f, 0x1e, 0x77, 0x8b, 0x55, 0xae, 0x17, 0xd7, 0x9b, 0x05, 0x63, 0xfc,
            0xa0, 0x1f, 0x1f, 0xfe, 0xed, 0xa0, 0x75, 0xa3, 0x72, 0xc6, 0x20, 0x03, 0xaa, 0xfc,
            0x51, 0x88, 0x35, 0xd5, 0xa6, 0x8f, 0x38, 0x95, 0xc4, 0xaa, 0xa4, 0x07, 0x19, 0x8b,
            0x36, 0x17, 0xb0, 0xb1, 0xdd, 0x44, 0x4c, 0xb7, 0x71, 0xc3, 0x30, 0x58, 0xda, 0x39,
            0xb6, 0x2d, 0x06, 0xcf, 0x04, 0x73, 0xb8, 0x06, 0xf3, 0xfe, 0x47, 0x95, 0x87, 0xdd,
            0xa0, 0xcb, 0xde, 0xec, 0x95, 0x0a, 0x5d, 0x16, 0x97, 0x4e, 0x55, 0x65, 0x12, 0xfd,
            0xd8, 0x25, 0xa4, 0x05, 0x91, 0x10, 0x3a, 0x52, 0x3d, 0x37, 0x5f, 0x8f, 0x3a, 0x24,
            0xb6, 0x7f, 0x5d, 0x13, 0x7a, 0xac, 0xbe, 0x86, 0xf8, 0x79, 0x22, 0x74, 0xbe, 0x65,
            0x57, 0x56, 0x20, 0x3a, 0x01, 0x3b, 0x13, 0x67, 0x70, 0xaf, 0xff, 0x1c, 0xdf, 0xd0,
            0xa3, 0xee, 0x22, 0xc1, 0x60, 0x0e, 0xab, 0x84, 0x12, 0xd9, 0x84, 0xdd, 0x1a, 0x9d,
            0x54, 0x95, 0x84, 0xe5, 0x89, 0x11, 0x2c, 0xe6, 0xe9, 0xad, 0xba, 0xfe, 0x71, 0xad,
            0xf4, 0x05, 0x83, 0xdf, 0xc5, 0xf3, 0xe2, 0x71, 0x24, 0xc3, 0xf4, 0x81, 0x65, 0x1e,
            0x44, 0x56, 0xc0, 0x72, 0xb7, 0xa3, 0xf2, 0x91, 0xf9, 0xe9, 0x3a, 0x24, 0x32, 0xe5,
            0x35, 0xfd, 0x38, 0x6c, 0xb8, 0x28, 0x18, 0x62, 0x41, 0x86, 0x86, 0x0f, 0xf4, 0xbd,
            0x4d, 0x43, 0x43, 0x12, 0x08, 0xfe, 0xe6, 0x67, 0xce, 0x6c, 0xaa, 0x46, 0x26, 0xa2,
            0xde, 0x31, 0x6c, 0xe6, 0xce, 0x7f, 0x22, 0x7e, 0x81, 0xbc, 0x69, 0xf4, 0xe2, 0x31,
            0xd8, 0x9a, 0x4b, 0x96, 0xe3, 0xeb, 0xf1, 0x6c, 0x48, 0x82, 0x8d, 0xd8, 0xc8, 0xad,
            0x6c, 0x66, 0xfa, 0xf9, 0xc3, 0xbf, 0xc9, 0x9c, 0xe1, 0xbc, 0x32, 0x55, 0x06, 0x6b,
            0xd6, 0xbb, 0x73, 0x6d, 0x9a, 0xb3, 0x5e, 0x98, 0x10, 0x9e, 0x8d, 0xe5, 0xcc, 0x36,
            0xef, 0xe3, 0x47, 0x62, 0xc5, 0xd0, 0xa9, 0x67, 0xc0, 0x3e, 0xb3, 0xdb, 0x6e, 0x4f,
            0xb9, 0xc6, 0x52, 0xd8, 0x26, 0xcc, 0xa9, 0x6c, 0x6e, 0xb7, 0x00, 0x19, 0xdb, 0x80,
            0x8b, 0x1f, 0x8f, 0x5f, 0x5e, 0x9f, 0x91, 0x71, 0x46, 0x81, 0x8a, 0xfa, 0xd6, 0xae,
            0xcc, 0x39, 0x7b, 0x01, 0xa1, 0x3b, 0xe5, 0xce, 0x1b, 0x55, 0xee, 0xc4, 0x16, 0x1f,
            0x19, 0xc7, 0x3e, 0x2c, 0xfa, 0xbf, 0xf2, 0xac, 0xfc, 0x7c, 0x05, 0x5a, 0x43, 0x81,
            0xbd, 0x50, 0x57, 0x02, 0x50, 0xa3, 0x48, 0xbc, 0x48, 0x8a, 0xff, 0x36, 0x44, 0x4d,
            0x92, 0xde, 0x03, 0x6b, 0xc7, 0xda, 0x18, 0x4e, 0x8d, 0x0c, 0x0f, 0x25, 0x41, 0xbd,
            0x81, 0xb4, 0x1c, 0xed, 0x3e, 0xbf, 0xdb, 0x50, 0x3a, 0x50, 0x6f, 0xa1, 0x81, 0x91,
            0x85, 0x88, 0x90, 0x36, 0x30, 0x19, 0x33, 0xe3, 0x2d, 0x90, 0xc7, 0x8e, 0xa2, 0xff,
            0x44, 0xbc, 0xc8, 0x4f, 0x8d, 0xb0, 0x0c, 0xdd, 0x45, 0x6d, 0xe6, 0xa7, 0xf4, 0x07,
            0x56, 0x41, 0x8c, 0x1a, 0xe8, 0xc2, 0xfd, 0x05, 0xcb, 0x9c, 0xb5, 0x17, 0xcb, 0x33,
            0x78, 0xbc, 0xa8, 0x87, 0xef, 0xef, 0x0b, 0x32, 0xac, 0xb7, 0x8e, 0xee, 0x45, 0xc7,
            0x3e, 0xe3, 0xaf, 0xe0, 0x14, 0x03, 0xd4, 0x1e, 0xdd, 0x95, 0x4c, 0xa9, 0x78, 0xe0,
            0x21, 0x05, 0xc8, 0xae, 0xba, 0x33, 0x76, 0x3f, 0xf5, 0xc9, 0x24, 0x6e, 0xd7, 0x84,
            0xbf, 0x25, 0x4b, 0xff, 0x79, 0x37, 0x1f, 0x35, 0x35, 0xe5, 0x05, 0x26, 0xb6, 0x8f,
            0xde, 0x69, 0x15, 0x00, 0x84, 0xd4, 0x3f, 0x9f, 0x9e, 0xc9, 0x91, 0xca, 0xa0, 0xa9,
            0xe5, 0x01, 0xb1, 0xea, 0x76, 0x72, 0xd4, 0x15, 0x99, 0x99, 0xd7, 0xe3, 0x48, 0xea,
            0xff, 0x70, 0xfb, 0x28, 0xd7, 0x9a, 0x8e, 0x94, 0xd6, 0x82, 0x4d, 0x7a, 0xfd, 0xdd,
            0xb5, 0x58, 0x91, 0xbb, 0x19, 0xe2, 0xa8, 0x23, 0x07, 0x70, 0xed, 0x58, 0x90, 0x63,
            0x5e, 0xb5, 0xf6, 0x92, 0x39, 0x7e, 0x32, 0xc6, 0x1f, 0x7c, 0x78, 0xb7, 0xd5, 0x5f,
            0x4b, 0xc6, 0x2f, 0x64, 0x8f, 0x32, 0x5f, 0xab, 0x48, 0xea, 0x11, 0xff, 0xd2, 0x62,
            0x3d, 0xfa, 0x16, 0x9b, 0x21, 0xca, 0x78, 0x4a, 0xdf, 0x46, 0x00, 0x6b, 0x2d, 0x4e,
            0xa9, 0x0e, 0xd9, 0xc5, 0xcf, 0x47, 0xa4, 0xc5, 0x75, 0x89, 0x3f, 0x24, 0x6d, 0xe5,
            0xa5, 0xc2, 0xd9, 0xc7, 0x89, 0x25, 0xbe, 0xdd, 0x2e, 0x6f, 0xe2, 0x79, 0xbe, 0x40,
            0x0f, 0x27, 0xc7, 0x9f, 0xcb, 0x7f, 0x2c, 0x50, 0xf1, 0x45, 0x2c, 0x36, 0x64, 0xbc,
            0x9f, 0xb7, 0x42, 0xb3, 0x31, 0x45, 0x0d, 0x15, 0x80, 0xf3, 0x01, 0x8b, 0x77, 0x09,
            0xf3, 0x27, 0xc8, 0xf1, 0x7a, 0x4a, 0xca, 0x61, 0x31, 0x9a, 0x18, 0x98, 0x25, 0xf4,
            0xa5, 0x2d, 0xb3, 0xbe, 0x3e, 0xe3, 0x57, 0x78, 0x4c, 0x85, 0xbf, 0x95, 0x10, 0xc8,
            0x6f, 0xbc, 0xf9, 0x2b, 0x29, 0x7a, 0x81, 0xce, 0x82, 0x5e, 0xf1, 0xdd, 0xfc, 0x88,
            0x9e, 0x5b, 0x65, 0x4a, 0xde, 0xbb, 0xfc, 0x44, 0xaa, 0xd6, 0x14, 0xb3, 0xb7, 0x56,
            0xc7, 0xbb, 0xca, 0x27, 0x95, 0xc4, 0xb0, 0x3c, 0x07, 0x24, 0xec, 0xcd, 0x59, 0x18,
            0xe1, 0xc5, 0xd9, 0x02, 0xc2, 0xa7, 0x4f, 0xa9, 0x76, 0x55, 0x43, 0xbe, 0x8d, 0x60,
            0xa2, 0x4c, 0x54, 0x5c, 0xc7, 0x5d, 0xdd, 0x68, 0xb9, 0x2b, 0xfe, 0x10, 0x35, 0xa8,
            0xc3, 0xfa, 0x95, 0xc1, 0xa5, 0xa4, 0xcc, 0xd1, 0x4e, 0xcb, 0xd4, 0x9b, 0x77, 0x91,
            0xb4, 0x66, 0x58, 0xa5, 0x25, 0x4f, 0xfa, 0xe6, 0x8f, 0x59, 0x20, 0xc1, 0x11, 0xfb,
            0xe0, 0x50, 0xc7, 0xa5, 0x04, 0xcb, 0xee, 0x3d, 0x9c, 0x0a, 0x75, 0xb4, 0x49, 0x2b,
            0xe6, 0x16, 0x3b, 0xbe, 0x7f, 0x8c, 0xce, 0x9d, 0xca, 0xa7, 0x4b, 0x3e, 0x61, 0xe1,
            0xde, 0xb2, 0x7b, 0x9f, 0x25, 0x59, 0xad, 0x6d, 0x5f, 0x8f, 0x77, 0x0d, 0xd3, 0x88,
            0x2b, 0x7a, 0x65, 0xb4, 0xe1, 0x76, 0xef, 0x49, 0x35, 0x6a, 0x8d, 0x1a, 0x60, 0x6c,
            0x06, 0x30, 0xf0, 0x2c, 0x3f, 0x13, 0x61, 0xb0, 0x71, 0x1c, 0x75, 0x0b, 0xeb, 0x4a,
            0x60, 0x3a, 0xa1, 0x2f, 0xf6, 0xb8, 0xce, 0x63, 0x97, 0x6d, 0x12, 0xb9, 0x44, 0x32,
            0x73, 0xf8, 0x45, 0xb8, 0x2a, 0x17, 0x99, 0xb9, 0xea, 0xf6, 0xe9, 0xd9, 0x0a, 0xf7,
            0x30, 0xb9, 0x16, 0x00, 0x80, 0x2d, 0xcb, 0x00, 0x50, 0x1a, 0x03, 0x00, 0x9a, 0x9c,
            0x1f, 0xc5, 0xb6, 0x00, 0x90, 0x52, 0x57, 0xcf, 0x59, 0x06, 0x00, 0xda, 0x1f, 0xd2,
            0x04, 0x81, 0x6d, 0x80, 0xe6, 0x00, 0x00, 0x74, 0x78, 0x77, 0x87, 0x96, 0x98, 0x87,
            0x89, 0xa6, 0x09, 0x78, 0xa0, 0x98, 0x9a, 0x88, 0x90, 0x98, 0x9a, 0x88, 0xa0, 0x99,
            0x9a, 0xa9, 0x0a, 0xa9, 0x79, 0x89, 0x00, 0x99, 0x80, 0x79, 0x9a, 0xa8, 0x9a, 0x69,
            0x90, 0xa8, 0xaa, 0x8a, 0xaa, 0x98, 0x80, 0x9a, 0x99, 0x78, 0x8a, 0x8a, 0x89, 0x09,
            0xaa, 0x88, 0x08, 0xa7, 0xa7, 0xa8, 0x09, 0x98, 0x89, 0x66, 0xa9, 0xa9, 0x00, 0x88,
            0x00, 0x88, 0x60, 0x78, 0xa0, 0x68, 0x5a, 0x78, 0x90, 0x08, 0xaa, 0x98, 0x00, 0xa9,
            0xa0, 0x98, 0x00, 0x99, 0x8a, 0xa9, 0x00, 0xa8, 0x00, 0xa9, 0x00, 0xa8, 0xa0, 0xa9,
            0xa0, 0x98, 0xa0, 0xa9, 0xaa, 0x86, 0x7a, 0xaa, 0x7a, 0x88, 0x00, 0x98, 0x90, 0x09,
            0xa0, 0x00, 0xa0, 0x09, 0x8a, 0x08, 0x0a, 0x98, 0xaa, 0xa9, 0x00, 0x96, 0x80, 0x07,
            0x00, 0x07, 0x98, 0x09, 0x89, 0x98, 0x00, 0x97, 0x5a, 0x0a, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x77, 0x05, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x90, 0x87, 0x09, 0xaa, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x78,
            0x99, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x90, 0xa9, 0xa0, 0x00, 0xa0, 0x00,
            0xa0, 0x97, 0x89, 0x0a, 0xa9, 0xa0, 0x00, 0xa0, 0x0a, 0x87, 0xaa, 0xa9, 0x0a, 0x90,
            0x00, 0x00, 0x00, 0x87, 0x88, 0xa9, 0x00, 0x00, 0x00, 0x00, 0x80, 0x88, 0x09, 0xa9,
            0x90, 0x0a, 0x00, 0xa0, 0xa0, 0x87, 0x9a, 0x0a, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x09,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x5f,
            0x2b, 0xa1, 0x2b, 0xd7, 0x4b, 0x31, 0x70, 0x5e, 0xaf, 0x13, 0xc9, 0xe3, 0x7a, 0x71,
            0xf5, 0x43, 0xc1, 0x6a, 0x91, 0x8f, 0x63, 0x63, 0x8c, 0x6a, 0x1d, 0x6c, 0x6b, 0x8c,
            0x80, 0x20, 0x6c, 0x63, 0x5b, 0x9a, 0x49, 0x00, 0x52, 0x45, 0x8c, 0x78, 0x4d, 0xda,
            0xab, 0x71, 0x0a, 0x48, 0x2e, 0x08, 0x73, 0xe8, 0xa5, 0x06, 0xef, 0x96, 0x36, 0x2e,
            0x5f, 0x4d, 0x88, 0x0f, 0x47, 0x92, 0x18, 0xe1, 0x49, 0xdf, 0x47, 0x11, 0x50, 0x44,
            0x8a, 0x1d, 0x8e, 0x5a, 0x97, 0xd6, 0x05, 0x50, 0xc9, 0xf8, 0x7e, 0xa6, 0xbd, 0xbf,
            0x1a, 0x25, 0x6b, 0xea, 0x03, 0xb4, 0x51, 0x55, 0x2b, 0xd1, 0xb1, 0x03, 0x38, 0xa3,
            0xbb, 0xa4, 0xb6, 0xf7, 0x06, 0xba, 0xa5, 0x3e, 0xfa, 0x7a, 0xb1, 0xdf, 0xb4, 0xef,
            0x2d, 0x7b, 0x73, 0x89, 0x58, 0xe0, 0x16, 0xac, 0x9b, 0xa9, 0x93, 0x7b, 0x79, 0xf7,
            0xab, 0x07, 0x2c, 0xf7, 0xb9, 0x0f, 0xd0, 0x19, 0x21, 0xa9, 0x01, 0x0c, 0x8b, 0x6d,
            0xf2, 0x60, 0xd4, 0x52, 0x8b, 0x3b, 0x37, 0xee, 0xf1, 0x4b, 0xdc, 0xe8, 0x72, 0x6e,
            0x15, 0x46, 0xd3, 0xcc, 0xe7, 0x9a, 0x26, 0xf1, 0xf0, 0x7e, 0xc1, 0x9b, 0x4c, 0x95,
            0x64, 0xef, 0xed, 0xde, 0xcc, 0xf2, 0x42, 0x1e, 0x4e, 0x59, 0x0b, 0x51, 0xdf, 0xfe,
            0xed, 0xbd, 0x1b, 0xea, 0xea, 0x57, 0x22, 0x6f, 0x49, 0xdd, 0x43, 0xf2, 0x69, 0x5c,
            0x5b, 0xc0, 0xa0, 0x47, 0x6d, 0xa4, 0x9c, 0x1c, 0x59, 0x02, 0x56, 0x8f, 0x6a, 0x97,
            0x18, 0xf8, 0xaa, 0x00, 0x28, 0x45, 0xdf, 0x56, 0xc5, 0x28, 0x5e, 0x3a, 0xc0, 0x47,
            0xb5, 0x31, 0x1d, 0x51, 0x08, 0x65, 0xcd, 0x00, 0xa4, 0x95, 0x86, 0x08, 0x2a, 0x21,
            0xd8, 0x91, 0x03, 0xa0, 0x95, 0xfd, 0x32, 0x68, 0xe1, 0xa7, 0x68, 0x0c, 0xa6, 0x33,
            0x6b, 0x75, 0x5d, 0x69, 0xfa, 0x5a, 0x57, 0x37, 0x42, 0xa5, 0xf5, 0xea, 0x6e, 0x75,
            0xda, 0x69, 0x6e, 0x7d, 0x9b, 0xc8, 0x71, 0x3d, 0x79, 0x3d, 0xd9, 0xa4, 0x93, 0x4f,
            0x67, 0xf3, 0xf9, 0x89, 0x1c, 0xec, 0x5a, 0xf5, 0x55, 0xc6, 0x71, 0x4e, 0xa1, 0x18,
            0x55, 0x06, 0xcb, 0x2e, 0xa3, 0x3b, 0x76, 0xb0, 0xf2, 0x5a, 0x4c, 0xf8, 0x80, 0x09,
            0x4e, 0x52, 0xca, 0x18, 0xca, 0xa0, 0x8b, 0xa3, 0x97, 0xd5, 0xad, 0xa2, 0x00, 0x8a,
            0x27, 0x7b, 0x5a, 0xe3, 0x58, 0x99, 0x02, 0xb0, 0xa9, 0x49, 0x34, 0x9b, 0x00, 0xc0,
            0x9b, 0x81, 0xac, 0x41, 0xd1, 0xcb, 0x6c, 0x81, 0x9c, 0x41, 0xee, 0xb8, 0xd9, 0x2c,
            0x58, 0x99, 0x97, 0x81, 0xac, 0x3f, 0xb2, 0x2e, 0x0c, 0xcd, 0x03, 0x22, 0xac, 0x41,
            0xbd, 0xc9, 0x33, 0x03, 0x65, 0x2e, 0xb3, 0x46, 0xed, 0x2c, 0x44, 0x32, 0x74, 0xe5,
            0x67, 0xb6, 0xff, 0x14, 0xbf, 0xae, 0x84, 0x77, 0x98, 0x70, 0xc5, 0x17, 0x27, 0xcf,
            0xc2, 0xe7, 0xf8, 0xf0, 0x67, 0x0c, 0x29, 0xcf, 0xb6, 0xcf, 0xb1, 0x33, 0xb3, 0x7a,
            0x6d, 0x41, 0xda, 0x67, 0xfb, 0xdd, 0xec, 0xde, 0xe7, 0x3e, 0x47, 0x80, 0xf3, 0x49,
            0x62, 0x55, 0x8d, 0xe9, 0x11, 0xda, 0x98, 0x3b, 0xd9, 0x69, 0x18, 0xcb, 0x7f, 0xa8,
            0xa5, 0x62, 0xb4, 0x59, 0x03, 0xfa, 0x17, 0x37, 0x26, 0xb5, 0x33, 0xef, 0x94, 0x27,
            0x40, 0x65, 0x73, 0xd7, 0x1d, 0x4f, 0x8a, 0x9e, 0x38, 0x93, 0xc2, 0x2a, 0x37, 0x01,
            0x60, 0x95, 0xd1, 0xb7, 0xd8, 0xa7, 0xfe, 0x7d, 0x73, 0x51, 0xa4, 0xd3, 0xd8, 0x53,
            0xfc, 0x9a, 0x71, 0x67, 0xa5, 0x52, 0xed, 0x16, 0x80, 0xa7, 0x06, 0x4c, 0xad, 0x30,
            0xd3, 0xf2, 0x8f, 0xfd, 0xc7, 0xb0, 0xe3, 0xcb, 0xf2, 0xf0, 0x02, 0x9e, 0x01, 0xf4,
            0x63, 0x30, 0x82, 0x05, 0xa1, 0x6b, 0x26, 0xa0, 0xc0, 0xed, 0xf0, 0x8f, 0x4e, 0x56,
            0x3f, 0x73, 0x5a, 0x02, 0xb2, 0x89, 0x92, 0x1a, 0x5d, 0xc9, 0xa7, 0x1b, 0xc7, 0x5d,
            0x8f, 0x75, 0x91, 0xae, 0xc4, 0x5d, 0xeb, 0xeb, 0x70, 0x4b, 0x82, 0x7e, 0xca, 0x6a,
            0xcd, 0x3e, 0x33, 0x80, 0xc2, 0x73, 0x4b, 0x01, 0x0a, 0x63, 0xcc, 0x27, 0xe8, 0xd4,
            0xc7, 0xcb, 0x61, 0x39, 0x5f, 0xa3, 0x2d, 0x9c, 0xf5, 0xc0, 0x77, 0xa8, 0x5f, 0x64,
            0xe2, 0x91, 0x0b, 0x50, 0xdf, 0xb4, 0x63, 0xec, 0x82, 0x0c, 0xd9, 0x61, 0xd8, 0x06,
            0x6e, 0x2a, 0xb0, 0x84, 0x1f, 0x4f, 0xf7, 0xd4, 0xf6, 0xef, 0x48, 0x3b, 0xb5, 0xad,
            0xd9, 0xc7, 0x2c, 0x33, 0x39, 0xa8, 0xdb, 0x7b, 0x9a, 0x1a, 0x75, 0xba, 0x6f, 0xb0,
            0xff, 0x1b, 0x2b, 0x0b, 0x1e, 0x26, 0x5c, 0x86, 0x9b, 0x0b, 0x85, 0x1c, 0x30, 0xf0,
            0xf1, 0xb3, 0xa1, 0xc5, 0x1c, 0x3d, 0x37, 0x5b, 0x56, 0x26, 0x5b, 0xd6, 0xa4, 0x47,
            0x66, 0xe8, 0x23, 0xbb, 0x2d, 0x1c, 0xa5, 0xf6, 0x9c, 0x50, 0x67, 0x48, 0x88, 0x5c,
            0x1f, 0xc7, 0x71, 0xf0, 0x2b, 0x86, 0xbc, 0x31, 0x5f, 0xdd, 0x16, 0x1f, 0x05, 0xed,
            0xde, 0x28, 0x08, 0x6d, 0xa8, 0x7b, 0x69, 0xbe, 0x28, 0xfa, 0xba, 0x13, 0x7e, 0x1b,
            0x7f, 0x72, 0x0b, 0xc3, 0x85, 0x2e, 0x24, 0xae, 0x16, 0x67, 0x95, 0x33, 0xe2, 0x8c,
            0x48, 0x98, 0x40, 0xf5, 0x0c, 0x5b, 0x09, 0x40, 0x35, 0x29, 0x73, 0x58, 0xae, 0x38,
            0x4b, 0x91, 0xef, 0x0e, 0xe0, 0x7e, 0xff, 0xf0, 0xcb, 0x87, 0x28, 0xa8, 0xe1, 0x7b,
            0xa8, 0x45, 0x70, 0xd2, 0x77, 0x7b, 0x88, 0xbe, 0xe0, 0xd6, 0xe1, 0x5c, 0xa3, 0x90,
            0x6f, 0xea, 0x0f, 0x94, 0x1d, 0x6d, 0xb6, 0x2c, 0x3d, 0xcf, 0x8c, 0x8a, 0x82, 0x8b,
            0x31, 0x2d, 0x4a, 0x86, 0xf3, 0xa1, 0x91, 0x4c, 0xa5, 0x88, 0x81, 0x9e, 0x7c, 0xfc,
            0x70, 0xe3, 0x89, 0x5a, 0xef, 0xf0, 0x11, 0x2e, 0x8e, 0x6d, 0x48, 0x8f, 0x67, 0x84,
            0x8c, 0x1e, 0xad, 0xe8, 0xa2, 0x25, 0xc1, 0x3c, 0xa6, 0x6f, 0x85, 0x10, 0xc4, 0x43,
            0x87, 0x50, 0x52, 0x76, 0x14, 0xdb, 0x8a, 0x34, 0x65, 0xc4, 0xa8, 0xa0, 0x88, 0xb7,
            0xbf, 0x19, 0xb8, 0xa4, 0x9b, 0xd3, 0x3c, 0x39, 0x12, 0x23, 0xf0, 0x90, 0xf3, 0x74,
            0xb3, 0x9d, 0xa2, 0xff, 0xd6, 0x32, 0x41, 0x43, 0xa7, 0x39, 0x0a, 0x3b, 0xb5, 0x50,
            0x2e, 0x19, 0xd9, 0x46, 0xda, 0xcc, 0x9e, 0x20, 0x1a, 0x01, 0x0a, 0x14, 0x6d, 0x31,
            0x66, 0x71, 0xa1, 0x5c, 0x14, 0xdc, 0xb2, 0x84, 0xb3, 0xb3, 0x86, 0xcf, 0x6f, 0x8f,
            0x1c, 0x9d, 0xe4, 0x42, 0x26, 0x55, 0x72, 0x03, 0xb4, 0x4b, 0xa1, 0xca, 0xd8, 0x00,
            0xd3, 0xb5, 0xb5, 0xee, 0xa5, 0x8b, 0x27, 0x55, 0x71, 0x03, 0x6a, 0x97, 0x85, 0xe7,
            0x54, 0xbb, 0x77, 0xe0, 0x25, 0x54, 0xec, 0xda, 0x0f, 0x43, 0x99, 0x70, 0x21, 0x0e,
            0x55, 0xb6, 0x0d, 0xf5, 0xfe, 0x16, 0x46, 0x14, 0x20, 0x3f, 0x87, 0xe2, 0xc6, 0x30,
            0x5d, 0x16, 0x8f, 0x6d, 0xc5, 0xe7, 0x62, 0xe6, 0xb5, 0x99, 0x68, 0xb8, 0x49, 0x10,
            0x71, 0x03, 0xee, 0x87, 0x3e, 0x21, 0x13, 0xf1, 0x65, 0x8a, 0xd6, 0xbc, 0xce, 0x97,
            0x18, 0x83, 0xb3, 0x81, 0x00, 0xb8, 0x1a, 0x0a, 0xbd, 0xa9, 0xf5, 0xf8, 0x77, 0x21,
            0x51, 0x00, 0xd3, 0xbd, 0xb3, 0xac, 0x0b, 0x74, 0x62, 0x6c, 0x6e, 0x13, 0x31, 0x50,
            0x1a, 0xb2, 0xf8, 0x26, 0xf4, 0x91, 0x73, 0xa3, 0x55, 0xed, 0x72, 0x1f, 0xee, 0xa8,
            0x63, 0xc7, 0x6e, 0x7c, 0x81, 0x7d, 0x8c, 0x5c, 0x81, 0xa7, 0x56, 0xe5, 0xb8, 0xf0,
            0x23, 0x0d, 0xc6, 0x4d, 0x61, 0x9f, 0xc6, 0x1b, 0x33, 0x78, 0x71, 0x40, 0x6a, 0x5d,
            0x1f, 0x33, 0xa3, 0xde, 0x05, 0xfa, 0x2e, 0x7d, 0x3b, 0x04, 0x3d, 0xa8, 0x45, 0xd4,
            0xe6, 0xc0, 0xc6, 0xe8, 0xf4, 0xe4, 0x84, 0xcb, 0x61, 0x6d, 0x77, 0x84, 0xce, 0x69,
            0xb7, 0xbd, 0x6f, 0xfb, 0xce, 0x1f, 0xe3, 0x3c, 0x2b, 0x3e, 0x21, 0x55, 0x20, 0x82,
            0x93, 0x61, 0x15, 0x3a, 0x20, 0xcb, 0x66, 0x52, 0x0c, 0x44, 0x80, 0x22, 0x6b, 0xd2,
            0xae, 0xdf, 0x08, 0xe7, 0x26, 0x21, 0xe9, 0xb0, 0xac, 0x7d, 0xd6, 0xfa, 0x37, 0xfa,
            0x0b, 0x80, 0x62, 0x47, 0x0c, 0x8c, 0xf5, 0xfd, 0x22, 0x52, 0xbe, 0x61, 0xaf, 0x02,
            0xa9, 0x87, 0xd0, 0x75, 0xaa, 0xd7, 0x2c, 0xa3, 0x3a, 0x5d, 0x2a, 0x15, 0x52, 0xa5,
            0x0e, 0xee, 0xd4, 0xda, 0x69, 0x95, 0x75, 0xe1, 0xc4, 0x64, 0xf6, 0x29, 0xe3, 0xa9,
            0x89, 0x27, 0xa5, 0x46, 0x1f, 0xb0, 0x4f, 0x73, 0xa1, 0x6b, 0xd5, 0xd6, 0x14, 0xc4,
            0xb9, 0x55, 0x60, 0xb8, 0xec, 0x45, 0x81, 0x63, 0x5d, 0xcc, 0xb0, 0xaa, 0xc2, 0x8f,
            0xf6, 0xfd, 0x03, 0xda, 0x78, 0x6f, 0xa9, 0x19, 0x84, 0x09, 0x4c, 0x62, 0x83, 0x6a,
            0xf3, 0x6e, 0xf6, 0x55, 0xf3, 0x07, 0x3b, 0xec, 0x35, 0xaa, 0x26, 0x5c, 0x76, 0x00,
            0x5e, 0xa6, 0x6a, 0xe7, 0xb7, 0x54, 0x4c, 0xf8, 0x4b, 0x83, 0x48, 0x3d, 0x5a, 0xd8,
            0xa5, 0x74, 0x5f, 0x80, 0xf1, 0xe3, 0x57, 0x77, 0x48, 0x6e, 0x2a, 0xc2, 0x6e, 0xd4,
            0xbe, 0x0f, 0x05, 0x00, 0x13, 0xe0, 0xa9, 0x9b, 0x30, 0x02, 0x97, 0xa1, 0xd2, 0x18,
            0xb4, 0x6e, 0xf0, 0x9a, 0xef, 0x30, 0x49, 0xca, 0x98, 0xad, 0x7e, 0xc7, 0xef, 0x9e,
            0x36, 0xd2, 0x4e, 0x8b, 0x01, 0x01, 0x84, 0x23, 0x67, 0xfc, 0xa2, 0xff, 0xa4, 0xe0,
            0x20, 0x6f, 0x5c, 0x78, 0xf4, 0xd0, 0x27, 0xa4, 0x7e, 0x1c, 0xaf, 0x29, 0x70, 0x90,
            0x66, 0x07, 0xd1, 0x9f, 0x1d, 0xc1, 0x04, 0xbf, 0x26, 0xc0, 0x8d, 0xe0, 0x04, 0x23,
            0xc1, 0x41, 0xf0, 0x70, 0x2d, 0x65, 0x0f, 0x41, 0x1b, 0xea, 0x0f, 0x54, 0xfd, 0xf4,
            0x31, 0x81, 0x45, 0x0f, 0xca, 0x56, 0x9c, 0x61, 0x17, 0xd5, 0x8c, 0x1f, 0x41, 0xc9,
            0x95, 0x64, 0xa0, 0x61, 0x14, 0x95, 0x5c, 0x6e, 0x5d, 0x4b, 0x11, 0x4e, 0xa2, 0x2b,
            0x94, 0x80, 0x00, 0xc7, 0xf9, 0x6c, 0x01, 0xae, 0xf4, 0xa0, 0x24, 0x10, 0xa3, 0xa9,
            0x50, 0x15, 0x13, 0x2c, 0xd0, 0x05, 0x76, 0xe0, 0x28, 0x22, 0x5a, 0xaf, 0xc4, 0x41,
            0xc7, 0x2a, 0x5b, 0xb7, 0xe7, 0xb4, 0xb6, 0xd0, 0x61, 0xac, 0x33, 0xbf, 0xf7, 0x3e,
            0xc3, 0x59, 0x1f, 0x32, 0x38, 0xc8, 0x7c, 0xfa, 0xa4, 0x3e, 0x31, 0x7d, 0x52, 0x2a,
            0x62, 0x5b, 0xf4, 0x52, 0x74, 0x90, 0xfe, 0x28, 0x94, 0xf0, 0x2a, 0xa9, 0x45, 0x62,
            0x50, 0x12, 0x09, 0x48, 0x92, 0x44, 0x92, 0x2c, 0x51, 0xb2, 0x9c, 0x44, 0xc8, 0x72,
            0x25, 0xb9, 0x24, 0xbf, 0x93, 0xd8, 0x59, 0x72, 0x52, 0xf2, 0xb3, 0x44, 0xb3, 0x84,
            0xb3, 0x44, 0xb2, 0x24, 0xb2, 0xe4, 0xb2, 0xc4, 0xa3, 0x64, 0x46, 0x89, 0x8b, 0x92,
            0x14, 0x25, 0x4d, 0x4a, 0xd4, 0xcd, 0x3f, 0x11, 0xa8, 0x37, 0x39, 0x36, 0xf8, 0xb7,
            0xc8, 0x7f, 0x00, 0x00, 0xff, 0x13, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x73, 0x00,
            0x00, 0xff, 0x46, 0x0d, 0xff, 0xb2, 0x02, 0x83, 0x08, 0x00, 0x00, 0x00, 0x08, 0x87,
            0x00, 0x05, 0x80, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0x88, 0x67, 0x08, 0x00,
            0x00, 0x08, 0x08, 0x67, 0x07, 0x00, 0x88, 0x78, 0x07, 0x00, 0x00, 0x00, 0x80, 0x08,
            0x00, 0x78, 0x00, 0x08, 0x00, 0x08, 0x67, 0x00, 0x00, 0x00, 0x88, 0x76, 0x00, 0x80,
            0x67, 0x58, 0x00, 0x78, 0x08, 0x86, 0x60, 0x86, 0x55, 0x87, 0x87, 0x88, 0x08, 0x00,
            0x00, 0x08, 0x00, 0x07, 0x08, 0x00, 0x80, 0x00, 0x00, 0x08, 0x00, 0x80, 0x00, 0x08,
            0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,
            0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x06,
            0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
            0x88, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x08, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x80, 0x76, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x80, 0x87,
            0x77, 0x60, 0x70, 0x00, 0x07, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x70, 0x07,
            0x00, 0x70, 0x00, 0x70, 0x00, 0x77, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x70, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x07, 0x00, 0x00, 0x00, 0x70, 0x00, 0x70, 0x00,
            0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x1f, 0x2f,
            0x05, 0xff, 0x1c, 0x06, 0x49, 0xc4, 0x7c, 0x2e, 0x87, 0x9c, 0x28, 0x14, 0xc3, 0x29,
            0x38, 0x4d, 0x9f, 0x5a, 0xfc, 0xea, 0x89, 0x71, 0x50, 0x22, 0x0f, 0xde, 0x41, 0xc1,
            0x8c, 0xbe, 0x88, 0x20, 0xc1, 0xe6, 0xcd, 0x2a, 0x04, 0xe1, 0x40, 0xf6, 0x45, 0xeb,
            0xf3, 0xf5, 0x3a, 0x8f, 0xa1, 0x63, 0x41, 0xd8, 0x6c, 0x33, 0x91, 0x09, 0xf3, 0x68,
            0xf9, 0xb8, 0x96, 0xcf, 0xa9, 0x81, 0xd4, 0xf8, 0x9b, 0xfc, 0xff, 0x47, 0x32, 0x22,
            0xcf, 0x09, 0x23, 0x09, 0xb4, 0x53, 0x8d, 0x40, 0xdd, 0xc5, 0x96, 0xb4, 0xa0, 0xfa,
            0xcb, 0x41, 0xf7, 0xff, 0x6a, 0x01, 0xbe, 0x79, 0x9a, 0x32, 0xf0, 0x3e, 0xca, 0xcd,
            0xf4, 0xef, 0xe4, 0xe6, 0xf0, 0xeb, 0xd7, 0xe9, 0xed, 0xa7, 0x81, 0xd1, 0xc5, 0xea,
            0x1e, 0x56, 0x5f, 0xbb, 0x22, 0x63, 0x26, 0xab, 0x7c, 0x3a, 0x4a, 0xc9, 0xab, 0xb1,
            0x90, 0x66, 0x4c, 0xaf, 0x0c, 0xe5, 0x01, 0x66, 0x9d, 0x56, 0x59, 0x57, 0x31, 0xe1,
            0x2e, 0x4a, 0xcb, 0x59, 0xb4, 0x91, 0xdd, 0x37, 0x71, 0x17, 0x31, 0x3a, 0xd9, 0x3c,
            0xe5, 0xf0, 0xbe, 0xf0, 0xbb, 0x17, 0xff, 0x22, 0x04, 0xb7, 0x6d, 0x29, 0x78, 0xf4,
            0x6b, 0x12, 0x3a, 0x62, 0xe0, 0x0e, 0x06, 0x8d, 0x87, 0x43, 0x60, 0xa8, 0x4a, 0x01,
            0x2d, 0x9e, 0xcb, 0xd8, 0x09, 0xbb, 0x82, 0x00, 0x16, 0xb2, 0xf2, 0x76, 0x06, 0x26,
            0x80, 0x0c, 0x92, 0x0f, 0x25, 0x00, 0xc0, 0x6a, 0x00, 0x00, 0x84, 0x79, 0x89, 0xaa,
            0xaa, 0x0a, 0x00, 0x09, 0x99, 0xa0, 0xa0, 0xaa, 0x99, 0x0a, 0x0a, 0xaa, 0x0a, 0x0a,
            0xa8, 0x00, 0x0a, 0x00, 0x7a, 0x0a, 0x88, 0xa8, 0xa8, 0x0a, 0xaa, 0x00, 0x00, 0x08,
            0x8a, 0x80, 0x78, 0xa7, 0x77, 0xa0, 0x88, 0x08, 0x97, 0x88, 0x97, 0x9a, 0x00, 0x0a,
            0x00, 0x59, 0x50, 0x67, 0x46, 0x76, 0x57, 0x9a, 0x66, 0x65, 0xa7, 0x55, 0x65, 0x87,
            0x78, 0x09, 0x00, 0x00, 0x89, 0xaa, 0xa8, 0xaa, 0xa9, 0xa0, 0x00, 0x00, 0x0a, 0x00,
            0x0a, 0x00, 0x00, 0x09, 0x0a, 0xaa, 0x00, 0x00, 0x90, 0xa0, 0x00, 0x0a, 0x00, 0xa0,
            0xa9, 0x00, 0x0a, 0x09, 0x00, 0xa0, 0x0a, 0xa0, 0x00, 0x00, 0x0a, 0x0a, 0x09, 0x0a,
            0x09, 0x00, 0x00, 0x0a, 0x0a, 0x00, 0x00, 0x0a, 0x00, 0x00, 0xa0, 0x00, 0xa0, 0x0a,
            0x00, 0x0a, 0x09, 0x00, 0x08, 0x00, 0x00, 0xa0, 0x0a, 0x00, 0x0a, 0xa0, 0x09, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xa4, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0xa9, 0xa0, 0x90, 0x0a, 0x00,
            0x00, 0x90, 0x96, 0x09, 0x8a, 0x0a, 0x07, 0x00, 0x00, 0x99, 0x87, 0xa0, 0x98, 0x00,
            0xa0, 0x00, 0x0a, 0x70, 0x77, 0x8a, 0x80, 0x00, 0x09, 0x00, 0xa0, 0x89, 0x87, 0xa0,
            0x00, 0x00, 0x0a, 0x00, 0x00, 0x80, 0x87, 0xa0, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x89, 0xaa, 0x99, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00,
            0x00, 0x00, 0x97, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xb7, 0x0f, 0xe2, 0xec, 0x91, 0xa7, 0x68, 0x9a, 0xee, 0xb6, 0x00, 0x7a, 0xa4, 0xbc,
            0xff, 0xcc, 0xe0, 0xe1, 0x00, 0xb1, 0x91, 0x1b, 0x86, 0x80, 0xd8, 0x8f, 0x18, 0x64,
            0x47, 0xde, 0x01, 0xec, 0x91, 0x9e, 0xd2, 0x1e, 0x41, 0x29, 0xb5, 0x46, 0x90, 0x29,
            0x55, 0x51, 0x73, 0x52, 0x1b, 0x47, 0x14, 0x47, 0xa0, 0x47, 0xaa, 0x8f, 0x00, 0x8f,
            0x84, 0x8f, 0x94, 0x8a, 0xa4, 0x6b, 0xf1, 0x20, 0x82, 0xc2, 0x6b, 0x3a, 0xdc, 0xeb,
            0xc0, 0xae, 0x43, 0x51, 0x07, 0xa1, 0x31, 0x9f, 0x52, 0x7c, 0x57, 0xae, 0xdb, 0xf1,
            0xf1, 0x48, 0xb9, 0x87, 0x69, 0x72, 0x6b, 0x1d, 0xc5, 0x33, 0xa1, 0xd4, 0x93, 0xb2,
            0x84, 0x57, 0xa8, 0x35, 0x54, 0x09, 0xe2, 0x70, 0x04, 0x79, 0x84, 0x05, 0xbc, 0xe6,
            0x35, 0x76, 0x57, 0x38, 0x85, 0xcb, 0x87, 0x8e, 0xfb, 0x3c, 0x00, 0x8b, 0xe6, 0x40,
            0x0d, 0xb4, 0x54, 0x9e, 0x3e, 0x2b, 0x70, 0xb6, 0xa2, 0xc6, 0x0b, 0x17, 0xac, 0x4b,
            0xf5, 0x21, 0x54, 0x8f, 0xa4, 0x91, 0x5c, 0xa5, 0xff, 0x49, 0x01, 0x55, 0xff, 0xfe,
            0x30, 0x13, 0x7f, 0xf6, 0xdc, 0x9e, 0xb6, 0x07, 0xf6, 0x35, 0x24, 0x9f, 0x2d, 0x97,
            0x71, 0x81, 0x9c, 0xf9, 0xf5, 0xff, 0xd1, 0x01, 0x1b, 0x80, 0x90, 0x3c, 0x82, 0x0b,
            0xc8, 0x2e, 0x22, 0xbd, 0x1b, 0x51, 0x3c, 0xff, 0xd4, 0x03, 0x76, 0x23, 0x48, 0x42,
            0x45, 0x94, 0x1d, 0xe1, 0x1d, 0xc9, 0x19, 0x81, 0x70, 0x5e, 0xc8, 0x07, 0xbe, 0x47,
            0xb1, 0x47, 0x10, 0xc5, 0xa8, 0xa6, 0x7b, 0x83, 0x26, 0x0f, 0x5b, 0x89, 0x48, 0x68,
            0xe4, 0xf0, 0x09, 0x86, 0x55, 0x1a, 0xc2, 0xc2, 0x1d, 0x99, 0x8d, 0x57, 0x1f, 0x01,
            0x9a, 0x11, 0xf4, 0x11, 0xf1, 0x45, 0x82, 0x17, 0xe9, 0x6f, 0x64, 0xc7, 0x48, 0x70,
            0x23, 0x00, 0x47, 0x21, 0x8d, 0xd6, 0x9c, 0x1a, 0x2a, 0x6c, 0x2a, 0x63, 0x8f, 0xc1,
            0x48, 0x8f, 0x79, 0xe7, 0x1d, 0x86, 0xa1, 0x97, 0x07, 0x1d, 0x90, 0x9f, 0xca, 0x04,
            0x6e, 0xf6, 0x38, 0xc0, 0xd3, 0x34, 0x85, 0xdb, 0x61, 0x32, 0xb3, 0x40, 0xcd, 0xc1,
            0xc5, 0x55, 0x9e, 0x8f, 0x29, 0xec, 0xd3, 0xe9, 0xf0, 0x48, 0xac, 0xa4, 0x0e, 0x80,
            0x34, 0x15, 0x14, 0x72, 0x42, 0xde, 0x34, 0x97, 0x79, 0xd3, 0x70, 0x0a, 0xa1, 0xeb,
            0x6f, 0x9e, 0x35, 0xe4, 0x9d, 0x48, 0xb6, 0xb5, 0xff, 0xb5, 0x01, 0x16, 0x02, 0x8e,
            0x79, 0xb9, 0x8c, 0x13, 0xca, 0x82, 0xb7, 0x8a, 0x89, 0xa8, 0x3a, 0x9d, 0xdf, 0x56,
            0xd7, 0xd1, 0x17, 0x09, 0x24, 0xdf, 0xe7, 0xeb, 0x3a, 0x04, 0xed, 0x34, 0x8e, 0x1f,
            0xc4, 0x46, 0xc3, 0x68, 0xe3, 0x41, 0xfd, 0x1b, 0x3e, 0x77, 0xfd, 0x2c, 0x8a, 0xa7,
            0x94, 0x15, 0xda, 0x32, 0xaf, 0x1b, 0x00, 0x68, 0xeb, 0xa9, 0xef, 0xb3, 0xe3, 0x12,
            0x0a, 0xd1, 0x3c, 0x80, 0xdb, 0xd1, 0x78, 0x30, 0xb1, 0x60, 0xe3, 0xf7, 0xf7, 0xc4,
            0x7a, 0x3b, 0xfc, 0x31, 0xb0, 0xc6, 0x96, 0xca, 0xcc, 0xc4, 0x33, 0x4b, 0xc8, 0x99,
            0x8f, 0x5b, 0xb1, 0xfd, 0x14, 0x3a, 0x13, 0xb0, 0x85, 0x40, 0x02, 0x2f, 0x3c, 0xd0,
            0x2e, 0x0f, 0xcf, 0x0c, 0x00, 0xed, 0x38, 0xf6, 0x0c, 0x71, 0x1a, 0xdb, 0xd2, 0xab,
            0xa2, 0x34, 0xc3, 0xcf, 0xfb, 0x17, 0x5a, 0x3d, 0xbe, 0x26, 0xfe, 0x0e, 0xdb, 0x9c,
            0x5c, 0xd7, 0x28, 0x97, 0x57, 0xcb, 0x39, 0x31, 0x28, 0x5b, 0x9a, 0x7a, 0x1f, 0xcc,
            0x62, 0x0d, 0xb0, 0x74, 0x96, 0x7f, 0x88, 0x26, 0x36, 0xbc, 0xa0, 0x62, 0x6d, 0xe0,
            0xf8, 0x63, 0x07, 0xcc, 0xcc, 0x44, 0xcd, 0x07, 0xf7, 0xe5, 0xcf, 0x54, 0x1e, 0x38,
            0x78, 0xbd, 0xd4, 0x92, 0x21, 0xfa, 0x01, 0xe1, 0x94, 0x90, 0x82, 0x31, 0x83, 0xa7,
            0xe3, 0xc3, 0x08, 0xc3, 0x01, 0x5f, 0x33, 0x96, 0xe2, 0x8c, 0x87, 0x1d, 0xdd, 0x4c,
            0x5d, 0xa4, 0x0b, 0xb4, 0xd2, 0x00, 0x26, 0xe2, 0xa1, 0xc0, 0x4f, 0x32, 0x23, 0x69,
            0x18, 0x63, 0x9b, 0xea, 0x34, 0x40, 0x57, 0x6f, 0x07, 0x19, 0x1b, 0x75, 0xd2, 0xaf,
            0x34, 0xc5, 0xa7, 0x10, 0xf0, 0xd2, 0x49, 0xda, 0xe0, 0x01, 0x39, 0xe7, 0x27, 0x9a,
            0x38, 0xd2, 0x61, 0xe8, 0x7b, 0x98, 0xe0, 0x35, 0xa0, 0x17, 0x0c, 0x65, 0x26, 0xdb,
            0xa3, 0x22, 0x74, 0x7e, 0x09, 0xe4, 0x88, 0x69, 0x3d, 0xb2, 0xa6, 0x71, 0x2d, 0x70,
            0xc1, 0x40, 0xbf, 0xcb, 0xbd, 0xd6, 0x81, 0xc5, 0x61, 0x8a, 0xca, 0x8e, 0x87, 0xe4,
            0xf8, 0x6f, 0x79, 0xe3, 0x21, 0x50, 0xcd, 0xad, 0xb4, 0x96, 0x7e, 0x59, 0x21, 0xed,
            0x57, 0x6e, 0x92, 0x87, 0x38, 0x1a, 0x9a, 0x50, 0x03, 0x8f, 0x44, 0xcf, 0x97, 0x57,
            0x19, 0x17, 0x8a, 0x09, 0x99, 0xd2, 0xa7, 0x15, 0x40, 0xd3, 0x07, 0x69, 0xa2, 0x6e,
            0x45, 0xdd, 0x20, 0xff, 0x71, 0x7f, 0x8d, 0x2d, 0xf8, 0xa1, 0x40, 0xb5, 0x26, 0xa4,
            0x0a, 0xec, 0x6f, 0xe6, 0x1f, 0x40, 0x45, 0x21, 0x96, 0x8b, 0xe1, 0x12, 0xce, 0xbf,
            0x3e, 0x00, 0x6b, 0x8c, 0xaa, 0x53, 0xa1, 0x86, 0x9a, 0xb4, 0x24, 0xef, 0x37, 0x30,
            0xd4, 0x3b, 0xa8, 0x44, 0x3d, 0xfc, 0x35, 0x50, 0x0a, 0xa4, 0xa7, 0x92, 0x8d, 0x76,
            0xd8, 0xda, 0xb4, 0xe5, 0x5c, 0x1c, 0x74, 0xa8, 0x30, 0xdc, 0x7c, 0xc5, 0x96, 0x5e,
            0xd6, 0xeb, 0x92, 0x7c, 0x43, 0xe8, 0xb8, 0x78, 0x74, 0x37, 0xa8, 0x24, 0x11, 0xd7,
            0xd9, 0xdd, 0x41, 0x23, 0xb3, 0x82, 0x8b, 0xb2, 0x85, 0x49, 0x45, 0xea, 0x86, 0x95,
            0x24, 0x0c, 0xe0, 0x26, 0xc8, 0x15, 0xcd, 0x50, 0x4a, 0xb4, 0xae, 0xbe, 0x61, 0xdb,
            0xb7, 0xff, 0x27, 0x37, 0x4a, 0x1d, 0x1b, 0x9f, 0xa1, 0xef, 0xa6, 0x76, 0x58, 0x16,
            0x58, 0x6f, 0x03, 0x2c, 0x8a, 0x7f, 0xe6, 0xf8, 0x0b, 0x07, 0x87, 0xf9, 0x20, 0x53,
            0x25, 0x9f, 0x3f, 0x2e, 0x0c, 0xb7, 0xd0, 0x8a, 0x68, 0x74, 0xaa, 0x2f, 0x9d, 0x38,
            0x28, 0x90, 0xe8, 0x73, 0x63, 0x66, 0x9f, 0xb0, 0x07, 0x6e, 0x47, 0x46, 0x03, 0xfd,
            0x53, 0xe8, 0x2f, 0xbb, 0xb6, 0xee, 0x03, 0x6e, 0xde, 0x26, 0xa9, 0x58, 0x69, 0xe4,
            0x65, 0xd6, 0x4d, 0x9f, 0xe4, 0x9e, 0x20, 0x3e, 0x00, 0x00, 0xff, 0x1b, 0x02, 0x84,
            0x98, 0x98, 0x90, 0x9a, 0xa9, 0x89, 0x99, 0x98, 0x89, 0x99, 0x09, 0x89, 0xaa, 0x9a,
            0x9a, 0xa6, 0xa9, 0x8a, 0x70, 0x9a, 0x9a, 0x79, 0x78, 0x66, 0x57, 0x66, 0x56, 0x76,
            0x67, 0x76, 0x77, 0x98, 0x8a, 0x88, 0xa8, 0x70, 0x09, 0x99, 0x99, 0xa8, 0xa9, 0x99,
            0xa8, 0xa0, 0x90, 0x0a, 0x9a, 0x69, 0x78, 0x68, 0x78, 0x78, 0xa9, 0x77, 0x66, 0x98,
            0x66, 0x77, 0x08, 0x79, 0x9a, 0xa9, 0x99, 0xa9, 0x09, 0x9a, 0x00, 0x99, 0x99, 0xa0,
            0x09, 0xa8, 0x9a, 0x0a, 0xaa, 0x9a, 0x00, 0xaa, 0xaa, 0xa9, 0x90, 0x90, 0x0a, 0xa0,
            0xa9, 0xaa, 0xaa, 0xaa, 0xa9, 0xa9, 0x00, 0x9a, 0x90, 0xa0, 0xa0, 0x89, 0x0a, 0xaa,
            0xa9, 0x00, 0x9a, 0x99, 0xa0, 0x09, 0x09, 0x90, 0xa9, 0xa9, 0x00, 0x9a, 0x8a, 0xaa,
            0x9a, 0x89, 0x0a, 0x99, 0x90, 0xa0, 0x90, 0xa9, 0xa9, 0xa0, 0xa9, 0x9a, 0xa9, 0xa0,
            0x9a, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x08, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xa8, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xa9, 0xaa,
            0x00, 0x00, 0x00, 0x00, 0x90, 0x96, 0xa9, 0x0a, 0xaa, 0xa0, 0x0a, 0x00, 0x9a, 0x96,
            0x09, 0x00, 0x0a, 0x00, 0xa0, 0x00, 0xa0, 0x96, 0x09, 0x09, 0xaa, 0xa0, 0x00, 0x00,
            0x90, 0x87, 0x08, 0x99, 0xaa, 0x00, 0x0a, 0x00, 0x00, 0x87, 0x09, 0x89, 0x0a, 0xa9,
            0x00, 0xa0, 0x00, 0x98, 0xa9, 0x00, 0xa9, 0x00, 0xa0, 0x00, 0x00, 0xa0, 0x0a, 0xa0,
            0x00, 0x00, 0x00, 0x00, 0xa0, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xdb, 0xbd, 0x58, 0x82, 0x09, 0x3e, 0x38, 0x3e, 0xff, 0x06, 0x02,
            0x80, 0x34, 0x6d, 0x0c, 0xc8, 0xce, 0x74, 0x28, 0xfd, 0x61, 0xe4, 0x86, 0x49, 0x82,
            0xa0, 0x71, 0x44, 0xdd, 0xf1, 0x9a, 0x01, 0xba, 0x4b, 0x4c, 0x8b, 0x01, 0xd8, 0xa7,
            0x2a, 0xac, 0x37, 0x48, 0x51, 0x11, 0x67, 0x19, 0x90, 0xfb, 0xe5, 0x0c, 0xf1, 0x9b,
            0x11, 0x9b, 0x00, 0x99, 0xf7, 0xea, 0xfd, 0xb2, 0xb7, 0x27, 0xcb, 0x59, 0xff, 0x1a,
            0x01, 0x72, 0x31, 0x28, 0x08, 0xa4, 0x43, 0x20, 0x0c, 0x84, 0x50, 0x60, 0xf0, 0x27,
            0x23, 0x7f, 0xa1, 0xf2, 0x0b, 0xf6, 0xe0, 0x9f, 0xb6, 0x2c, 0x8d, 0x7c, 0x10, 0x4d,
            0x69, 0xbc, 0x7f, 0x3b, 0x1c, 0x15, 0xeb, 0x8c, 0xdf, 0xe2, 0x3c, 0x48, 0x2f, 0x09,
            0xa7, 0x92, 0x3f, 0x5d, 0x7c, 0x44, 0xc2, 0x93, 0xc4, 0x43, 0x28, 0x42, 0x05, 0x26,
            0x00, 0xc2, 0x0f, 0x30, 0x7e, 0x09, 0x82, 0xd8, 0x03, 0x90, 0xda, 0x61, 0x14, 0x06,
            0x3b, 0x24, 0x2b, 0x81, 0x04, 0xa3, 0x75, 0xb0, 0x8d, 0x8d, 0x9e, 0x2a, 0x00, 0x69,
            0x2b, 0xb6, 0x2f, 0xac, 0x13, 0x60, 0x51, 0xbe, 0x7d, 0x98, 0x22, 0xb2, 0x21, 0x8c,
            0x32, 0xbd, 0x85, 0xf9, 0xa2, 0x51, 0x1a, 0x08, 0x2f, 0x91, 0xd6, 0x85, 0x40, 0x4a,
            0xf1, 0x60, 0xd9, 0x14, 0x88, 0x85, 0xd5, 0x68, 0x17, 0x86, 0x6b, 0x4a, 0xef, 0xd5,
            0x02, 0xab, 0x86, 0x10, 0xb4, 0x84, 0x45, 0x00, 0x57, 0x21, 0x54, 0xd3, 0x2f, 0xa2,
            0x95, 0x29, 0x4c, 0xe4, 0x58, 0x8d, 0x95, 0x18, 0x29, 0x6c, 0xf2, 0x0f, 0xdd, 0x42,
            0x7f, 0xd2, 0xcc, 0x2d, 0xdc, 0xff, 0x31, 0xa0, 0x70, 0xc7, 0x50, 0xab, 0x20, 0x40,
            0x27, 0x49, 0x62, 0xef, 0xd7, 0x1d, 0x6f, 0x40, 0xe1, 0x0a, 0xe0, 0x37, 0xac, 0x27,
            0x0b, 0xec, 0xd2, 0x5b, 0x80, 0xa5, 0x18, 0xc8, 0x76, 0xc8, 0x7b, 0xcf, 0x26, 0x64,
            0x10, 0x22, 0x2a, 0xc9, 0xce, 0x08, 0x30, 0xef, 0x35, 0x6e, 0x1f, 0x5d, 0x71, 0x93,
            0xf7, 0x46, 0x41, 0x6b, 0x10, 0x19, 0x00, 0x31, 0x40, 0x5f, 0x8e, 0xc7, 0x17, 0xcb,
            0xfb, 0x30, 0x4e, 0x60, 0x0a, 0xc3, 0x8b, 0x7e, 0x02, 0xb1, 0x14, 0x00, 0xe0, 0xe1,
            0x73, 0x17, 0x38, 0xec, 0x78, 0xbe, 0x37, 0xce, 0x12, 0x43, 0x8d, 0x1a, 0x84, 0xbb,
            0xf2, 0xd8, 0x5e, 0x31, 0x92, 0x52, 0xe3, 0x35, 0xb3, 0x6b, 0x76, 0x26, 0xeb, 0x0e,
            0x43, 0x7a, 0xa9, 0x30, 0x40, 0x5e, 0xdf, 0x57, 0x4d, 0xdc, 0x90, 0xdc, 0x64, 0x48,
            0x8a, 0xe1, 0x4c, 0x38, 0x02, 0xa6, 0x49, 0xa2, 0x38, 0xee, 0xf4, 0x04, 0xbf, 0x7c,
            0xed, 0xff, 0xcb, 0x04, 0x04, 0x0f, 0x09, 0xb0, 0xc8, 0x11, 0x4b, 0xeb, 0x0a, 0x99,
            0x50, 0x17, 0x80, 0x01, 0x48, 0xc6, 0x44, 0xfd, 0x92, 0x3f, 0x94, 0x85, 0x4a, 0xaa,
            0x85, 0x4a, 0x3d, 0xe9, 0x05, 0xfa, 0x48, 0x30, 0x22, 0x7c, 0x68, 0xef, 0x50, 0x80,
            0xbf, 0x85, 0x06, 0x02, 0xc7, 0x83, 0x4f, 0xdd, 0xfb, 0xe1, 0xdb, 0x85, 0x7c, 0xf7,
            0x02, 0xed, 0x9b, 0x6d, 0x0d, 0x2c, 0x57, 0xa1, 0x4e, 0xde, 0x95, 0x41, 0x44, 0x86,
            0x13, 0xff, 0x16, 0x92, 0x25, 0xd8, 0x3a, 0x20, 0x65, 0xba, 0xdb, 0x26, 0x7a, 0x57,
            0xf4, 0xb1, 0x29, 0x20, 0x1c, 0xe4, 0x5a, 0x2d, 0x88, 0x71, 0x0e, 0x16, 0xec, 0x10,
            0x4b, 0x87, 0x90, 0x03, 0x58, 0x6d, 0xb9, 0x7f, 0x5b, 0x8a, 0x45, 0x21, 0x58, 0x10,
            0x36, 0x94, 0xfc, 0xe0, 0xc3, 0x8b, 0xf9, 0xb0, 0xee, 0x73, 0xf3, 0x2e, 0x09, 0x69,
            0xbf, 0x53, 0x7d, 0xe9, 0xc1, 0x42, 0xe4, 0x15, 0xbf, 0x37, 0x70, 0xa8, 0x3c, 0x07,
            0x6a, 0x1c, 0x07, 0x56, 0xd2, 0x8e, 0xc8, 0x4e, 0xfc, 0xc5, 0x20, 0xab, 0x0d, 0x72,
            0x99, 0x16, 0x07, 0x4f, 0x10, 0x76, 0xe6, 0x41, 0x14, 0x22, 0x29, 0x12, 0x55, 0xd2,
            0x0a, 0x68, 0xe9, 0x26, 0x53, 0xa1, 0xb4, 0x44, 0x24, 0x21, 0x29, 0xdf, 0x01, 0x47,
            0xee, 0x37, 0x60, 0x9a, 0x33, 0xb0, 0x4e, 0xed, 0x42, 0x68, 0xd1, 0xd0, 0x8d, 0x4e,
            0x2a, 0x18, 0x93, 0x26, 0x91, 0xa6, 0x59, 0x52, 0xc7, 0xa3, 0xb6, 0x72, 0x11, 0xa4,
            0x64, 0x59, 0x51, 0xa1, 0x8a, 0x41, 0x20, 0x43, 0xb3, 0xa6, 0x91, 0xa6, 0x4d, 0x15,
            0xcf, 0xca, 0x52, 0xa9, 0x8a, 0x84, 0x61, 0xcd, 0x7c, 0x40, 0x8b, 0xaa, 0x49, 0x29,
            0xab, 0x0d, 0x21, 0xe5, 0x45, 0x39, 0x53, 0x68, 0xe5, 0x54, 0x22, 0x34, 0x29, 0x12,
            0xa4, 0xc0, 0x68, 0x49, 0x3f, 0x74, 0xcc, 0x95, 0x41, 0x96, 0x43, 0x08, 0x22, 0x56,
            0xde, 0xd0, 0x48, 0xa7, 0xfc, 0xa6, 0xb7, 0xeb, 0xe1, 0x00, 0xb7, 0x5d, 0x0d, 0x63,
            0x98, 0x24, 0x4b, 0x22, 0xfa, 0x21, 0xb0, 0xf9, 0xc5, 0x72, 0xc1, 0x2c, 0x55, 0x46,
            0x3c, 0x4a, 0x66, 0x81, 0x8e, 0x14, 0x58, 0x20, 0xf0, 0xfd, 0xa4, 0xbe, 0x25, 0xfa,
            0x8d, 0x7b, 0xbe, 0x93, 0x10, 0x90, 0xe8, 0xf7, 0xe3, 0x25, 0xbe, 0x94, 0x4e, 0x20,
            0x12, 0x33, 0xfc, 0x88, 0xa6, 0xf5, 0xac, 0x75, 0x3a, 0x94, 0x3a, 0x68, 0x95, 0x48,
            0x44, 0xa7, 0x17, 0x92, 0xcf, 0x3d, 0x5a, 0x44, 0xca, 0xac, 0x60, 0x42, 0x93, 0x7e,
            0x1b, 0x20, 0x04, 0x81, 0xdb, 0x0d, 0x32, 0x08, 0x52, 0xbf, 0x36, 0x88, 0xee, 0xfc,
            0x1b, 0xd8, 0x47, 0xb6, 0x71, 0x88, 0xff, 0x1a, 0x0e, 0xc7, 0x4b, 0xdc, 0x64, 0x00,
            0xff, 0x01, 0x03, 0xa1, 0x2c, 0x41, 0x19, 0x8b, 0x54, 0x29, 0x5c, 0xf5, 0xa2, 0xe3,
            0x65, 0xaa, 0xcc, 0xd5, 0x33, 0xd0, 0x32, 0xb1, 0x6c, 0x26, 0xb3, 0x6b, 0x92, 0x7c,
            0x83, 0x6a, 0x83, 0xf5, 0x8d, 0x92, 0x8d, 0x58, 0x1f, 0x80, 0x3c, 0x23, 0xf3, 0x1d,
            0xb9, 0x3b, 0x74, 0x77, 0x3a, 0x76, 0x9a, 0xe9, 0xa4, 0x16, 0x47, 0x19, 0xf7, 0x1e,
            0xa7, 0x8a, 0x73, 0x1b, 0xb7, 0x03, 0x47, 0x8e, 0x73, 0x91, 0x73, 0xe7, 0x73, 0xf4,
            0xb9, 0xeb, 0x9c, 0xec, 0x9c, 0xcc, 0x5c, 0x41, 0x1e, 0x8f, 0xed, 0xfc, 0x34, 0xf9,
            0xb1, 0xfb, 0x73, 0xf3, 0xc3, 0xd5, 0x67, 0xfd, 0x1e, 0x48, 0x08, 0x43, 0x45, 0x87,
            0x22, 0x87, 0x60, 0x87, 0x7a, 0x85, 0x86, 0xab, 0x5b, 0xbc, 0xf3, 0xbc, 0x3b, 0xbe,
            0xd3, 0xe7, 0xb9, 0xf3, 0x62, 0x79, 0xb8, 0x3c, 0xdd, 0x72, 0xd3, 0x29, 0x84, 0x1a,
            0x00, 0xe2, 0x28, 0x93, 0x1e, 0x27, 0x85, 0x27, 0xbe, 0x4e, 0x3c, 0x9d, 0xa0, 0x36,
            0x91, 0xaf, 0xb2, 0x53, 0x25, 0xb3, 0x95, 0x96, 0x2b, 0x2e, 0x6f, 0x61, 0xde, 0xa8,
            0xbc, 0xc5, 0xa5, 0x2b, 0x30, 0xa6, 0xa8, 0x78, 0x45, 0x58, 0x16, 0x50, 0x5e, 0xa2,
            0xb4, 0x05, 0xf6, 0x8a, 0xed, 0x5d, 0xdc, 0xbe, 0xc8, 0xb4, 0x74, 0x84, 0x8b, 0x98,
            0x5e, 0xa2, 0xba, 0xa5, 0xf5, 0x85, 0xfb, 0x99, 0xcb, 0x33, 0x8a, 0x66, 0x28, 0xcd,
            0x6c, 0x97, 0x09, 0x4d, 0x63, 0x06, 0x37, 0x86, 0x6a, 0x8d, 0xe3, 0x1f, 0x93, 0x3c,
            0x34, 0xf2, 0x48, 0xca, 0x43, 0x2e, 0x8f, 0x08, 0x3d, 0xe7, 0xec, 0x0e, 0x5b, 0x73,
            0x68, 0x8d, 0x53, 0x78, 0x3a, 0x4e, 0xe5, 0x9d, 0xc9, 0x9d, 0xdb, 0x71, 0x8b, 0xe5,
            0x3c, 0x3d, 0x57, 0x77, 0xfc, 0xc9, 0x9c, 0x01, 0xfd, 0x8f, 0xee, 0x7f, 0x7a, 0x7e,
            0x4c, 0xfc, 0x18, 0xf5, 0x69, 0xe9, 0x27, 0xd4, 0xcf, 0xaa, 0x9f, 0xd9, 0x3f, 0x6a,
            0x3f, 0x31, 0x7e, 0xaa, 0x0c, 0x4a, 0x1e, 0x24, 0x1a, 0xd0, 0x2a, 0x75, 0x95, 0x74,
            0x71, 0xd2, 0xd5, 0x9e, 0x2e, 0xc2, 0x3b, 0x80, 0x3b, 0xad, 0xee, 0xb5, 0xdd, 0x11,
            0xe6, 0x4f, 0xe2, 0xef, 0x33, 0x2f, 0x34, 0x8f, 0x34, 0x55, 0x35, 0x09, 0xd3, 0xb9,
            0x00, 0x4a, 0xf2, 0x99, 0xfc, 0x82, 0x36, 0x82, 0x79, 0x44, 0x6f, 0x04, 0xf5, 0x93,
            0xd4, 0x27, 0xa0, 0x27, 0xda, 0x4c, 0x6a, 0x5c, 0xb1, 0x4e, 0xd9, 0x9d, 0x0a, 0x50,
            0x2b, 0xa6, 0x57, 0xb4, 0x56, 0x96, 0xa9, 0x1b, 0xee, 0xb7, 0xcd, 0x6f, 0xa6, 0xbe,
            0x15, 0xbd, 0x39, 0x7c, 0x43, 0x7b, 0xb3, 0x7b, 0x7c, 0x05, 0xce, 0x8a, 0xd0, 0x2c,
            0xfa, 0xb1, 0x08, 0xeb, 0x62, 0x92, 0x45, 0x40, 0x15, 0x21, 0xbb, 0xa2, 0x76, 0x0b,
            0xcc, 0x2f, 0x34, 0x5e, 0x08, 0xbc, 0x28, 0x68, 0x71, 0xa3, 0x05, 0x98, 0x16, 0x91,
            0x5a, 0x8b, 0x55, 0x16, 0xd7, 0x5b, 0xd0, 0x59, 0x51, 0xb6, 0xcb, 0x30, 0x97, 0xdc,
            0x5d, 0x05, 0xb7, 0x2f, 0xbd, 0x5e, 0x00, 0xbd, 0x80, 0x7a, 0x11, 0xf5, 0x52, 0xfa,
            0x05, 0x31, 0x32, 0xc5, 0xb5, 0x4b, 0xec, 0x96, 0xd9, 0x5a, 0x06, 0xb6, 0x0c, 0x71,
            0x19, 0xe8, 0x32, 0xc9, 0x64, 0x4c, 0x8d, 0xc7, 0x38, 0x4e, 0x46, 0x7d, 0x19, 0xa5,
            0x33, 0x0c, 0x33, 0x86, 0x62, 0x86, 0x79, 0x0c, 0x69, 0x99, 0xd3, 0x19, 0xe8, 0x19,
            0xea, 0x33, 0xac, 0x66, 0x5e, 0xcf, 0xc8, 0xc9, 0x74, 0x79, 0x43, 0x6d, 0x73, 0xcc,
            0xe6, 0xce, 0x1b, 0x77, 0x1b, 0xa3, 0x34, 0x36, 0x50, 0x6f, 0xf4, 0x6f, 0x44, 0x6e,
            0x46, 0xdc, 0x24, 0xb9, 0x91, 0x73, 0xb3, 0xca, 0xa6, 0x5c, 0x8e, 0x03, 0x73, 0x8e,
            0xba, 0x77, 0x64, 0x94, 0x81, 0x8d, 0x31, 0xe7, 0xd0, 0xf4, 0x06, 0xf1, 0x77, 0x87,
            0xe0, 0x1a, 0x83, 0x7e, 0x23, 0x43, 0x38, 0x71, 0x58, 0x8c, 0x47, 0x3c, 0x1e, 0x31,
            0x79, 0xe3, 0xf5, 0xc7, 0xec, 0x0f, 0xdb, 0x3e, 0x30, 0x7e, 0xec, 0xfc, 0x00, 0xe7,
            0x41, 0x52, 0x87, 0x2c, 0x3f, 0x31, 0x7a, 0x00, 0x85, 0xc2, 0x05, 0x25, 0x47, 0xd4,
            0x19, 0x6a, 0xa7, 0xd6, 0xce, 0xb0, 0x1d, 0x16, 0xe5, 0x2f, 0x7c, 0x84, 0xcc, 0x36,
            0x15, 0x4e, 0x57, 0x14, 0x56, 0x51, 0xac, 0xd2, 0x58, 0x93, 0x83, 0x6d, 0x06, 0xe3,
            0x7f, 0x4f, 0x38, 0xd0, 0xfe, 0xe0, 0xfb, 0xff, 0x5f, 0x01, 0x00, 0x00,
        ];
    }

    fn get_test_mft_attribute_data() -> Vec<u8> {
        return vec![
            0x80, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x01, 0x11, 0x40, 0x00, 0x00, 0x00,
            0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xd6, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x00, 0x6f, 0x00, 0x66, 0x00,
            0x43, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x70, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00,
            0x73, 0x00, 0x65, 0x00, 0x64, 0x00, 0x44, 0x00, 0x61, 0x00, 0x74, 0x00, 0x61, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
    }

    #[test]
    fn test_open() -> Result<(), ErrorTrace> {
        let test_data: Vec<u8> = get_test_data();
        let data_stream: DataStreamReference = open_fake_data_stream(&test_data);

        let test_mft_attribute_data: Vec<u8> = get_test_mft_attribute_data();
        let mut data_attribute: NtfsMftAttribute = NtfsMftAttribute::new();
        data_attribute.read_data(&test_mft_attribute_data)?;

        let mut block_stream: NtfsWofCompressedStream = NtfsWofCompressedStream::new(4096, 0);

        block_stream.open(&data_stream, &data_attribute, 28672)?;

        assert_eq!(block_stream.cluster_block_size, 4096);
        assert_eq!(block_stream.compression_method, 0);
        assert_eq!(block_stream.compression_unit_size, 4096);
        assert_eq!(block_stream.compressed_size, 9686);

        Ok(())
    }

    // TODO: add tests for read_data_from_blocks

    #[test]
    fn test_read_compressed_block() -> Result<(), ErrorTrace> {
        let test_data: Vec<u8> = get_test_data();
        let data_stream: DataStreamReference = open_fake_data_stream(&test_data);

        let test_mft_attribute_data: Vec<u8> = get_test_mft_attribute_data();
        let mut data_attribute: NtfsMftAttribute = NtfsMftAttribute::new();
        data_attribute.read_data(&test_mft_attribute_data)?;

        let mut block_stream: NtfsWofCompressedStream = NtfsWofCompressedStream::new(4096, 0);

        block_stream.open(&data_stream, &data_attribute, 28672)?;
        block_stream.read_compressed_block_offsets()?;

        let mut data: Vec<u8> = vec![0; 4096];
        block_stream.read_compressed_block(24, 4096, &mut data)?;

        Ok(())
    }

    #[test]
    fn test_read_compressed_block_offsets() -> Result<(), ErrorTrace> {
        let test_data: Vec<u8> = get_test_data();
        let data_stream: DataStreamReference = open_fake_data_stream(&test_data);

        let test_mft_attribute_data: Vec<u8> = get_test_mft_attribute_data();
        let mut data_attribute: NtfsMftAttribute = NtfsMftAttribute::new();
        data_attribute.read_data(&test_mft_attribute_data)?;

        let mut block_stream: NtfsWofCompressedStream = NtfsWofCompressedStream::new(4096, 0);

        block_stream.open(&data_stream, &data_attribute, 28672)?;

        block_stream.read_compressed_block_offsets()?;
        assert_eq!(
            block_stream.block_offsets,
            vec![24, 2155, 4529, 6251, 6517, 6982, 8091]
        );

        Ok(())
    }

    #[test]
    fn test_seek_from_start() -> Result<(), ErrorTrace> {
        let test_data: Vec<u8> = get_test_data();
        let data_stream: DataStreamReference = open_fake_data_stream(&test_data);

        let test_mft_attribute_data: Vec<u8> = get_test_mft_attribute_data();
        let mut data_attribute: NtfsMftAttribute = NtfsMftAttribute::new();
        data_attribute.read_data(&test_mft_attribute_data)?;

        let mut block_stream: NtfsWofCompressedStream = NtfsWofCompressedStream::new(4096, 0);
        block_stream.open(&data_stream, &data_attribute, 28672)?;

        let offset: u64 = block_stream.seek(SeekFrom::Start(1024))?;
        assert_eq!(offset, 1024);

        Ok(())
    }

    #[test]
    fn test_seek_from_end() -> Result<(), ErrorTrace> {
        let test_data: Vec<u8> = get_test_data();
        let data_stream: DataStreamReference = open_fake_data_stream(&test_data);

        let test_mft_attribute_data: Vec<u8> = get_test_mft_attribute_data();
        let mut data_attribute: NtfsMftAttribute = NtfsMftAttribute::new();
        data_attribute.read_data(&test_mft_attribute_data)?;

        let mut block_stream: NtfsWofCompressedStream = NtfsWofCompressedStream::new(4096, 0);
        block_stream.open(&data_stream, &data_attribute, 28672)?;

        let offset: u64 = block_stream.seek(SeekFrom::End(-512))?;
        assert_eq!(offset, 28672 - 512);

        Ok(())
    }

    #[test]
    fn test_seek_from_current() -> Result<(), ErrorTrace> {
        let test_data: Vec<u8> = get_test_data();
        let data_stream: DataStreamReference = open_fake_data_stream(&test_data);

        let test_mft_attribute_data: Vec<u8> = get_test_mft_attribute_data();
        let mut data_attribute: NtfsMftAttribute = NtfsMftAttribute::new();
        data_attribute.read_data(&test_mft_attribute_data)?;

        let mut block_stream: NtfsWofCompressedStream = NtfsWofCompressedStream::new(4096, 0);
        block_stream.open(&data_stream, &data_attribute, 28672)?;

        let offset: u64 = block_stream.seek(SeekFrom::Start(1024))?;
        assert_eq!(offset, 1024);

        let offset: u64 = block_stream.seek(SeekFrom::Current(-512))?;
        assert_eq!(offset, 512);

        Ok(())
    }

    #[test]
    fn test_seek_beyond_file_size() -> Result<(), ErrorTrace> {
        let test_data: Vec<u8> = get_test_data();
        let data_stream: DataStreamReference = open_fake_data_stream(&test_data);

        let test_mft_attribute_data: Vec<u8> = get_test_mft_attribute_data();
        let mut data_attribute: NtfsMftAttribute = NtfsMftAttribute::new();
        data_attribute.read_data(&test_mft_attribute_data)?;

        let mut block_stream: NtfsWofCompressedStream = NtfsWofCompressedStream::new(4096, 0);
        block_stream.open(&data_stream, &data_attribute, 28672)?;

        let offset: u64 = block_stream.seek(SeekFrom::End(512))?;
        assert_eq!(offset, 28672 + 512);

        Ok(())
    }

    #[test]
    fn test_seek_and_read() -> Result<(), ErrorTrace> {
        let test_data: Vec<u8> = get_test_data();
        let data_stream: DataStreamReference = open_fake_data_stream(&test_data);

        let test_mft_attribute_data: Vec<u8> = get_test_mft_attribute_data();
        let mut data_attribute: NtfsMftAttribute = NtfsMftAttribute::new();
        data_attribute.read_data(&test_mft_attribute_data)?;

        let mut block_stream: NtfsWofCompressedStream = NtfsWofCompressedStream::new(4096, 0);
        block_stream.open(&data_stream, &data_attribute, 28672)?;

        block_stream.seek(SeekFrom::Start(1024))?;

        let mut data: Vec<u8> = vec![0; 512];
        let read_size: usize = block_stream.read(&mut data)?;
        assert_eq!(read_size, 512);

        let expected_data: Vec<u8> = vec![
            0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xe9, 0x00, 0x23, 0x00, 0x00, 0xe9, 0xcb, 0x27, 0x00,
            0x00, 0xe9, 0xbd, 0x27, 0x00, 0x00, 0xe9, 0xc4, 0x27, 0x00, 0x00, 0xe9, 0xa0, 0x1f,
            0x00, 0x00, 0xe9, 0x19, 0x17, 0x00, 0x00, 0xe9, 0xc1, 0x20, 0x00, 0x00, 0xe9, 0xa4,
            0x27, 0x00, 0x00, 0xe9, 0x34, 0x1d, 0x00, 0x00, 0xe9, 0xd7, 0x22, 0x00, 0x00, 0xe9,
            0xf5, 0x16, 0x00, 0x00, 0xe9, 0x25, 0x19, 0x00, 0x00, 0xe9, 0x91, 0x27, 0x00, 0x00,
            0xe9, 0xbd, 0x1e, 0x00, 0x00, 0xe9, 0x40, 0x06, 0x00, 0x00, 0xe9, 0x85, 0x27, 0x00,
            0x00, 0xe9, 0xec, 0x1c, 0x00, 0x00, 0xe9, 0x01, 0x09, 0x00, 0x00, 0xe9, 0x0c, 0x04,
            0x00, 0x00, 0xe9, 0x97, 0x03, 0x00, 0x00, 0xe9, 0x5a, 0x1f, 0x00, 0x00, 0xe9, 0x39,
            0x24, 0x00, 0x00, 0xe9, 0x08, 0x0e, 0x00, 0x00, 0xe9, 0xb3, 0x0d, 0x00, 0x00, 0xe9,
            0x52, 0x27, 0x00, 0x00, 0xe9, 0x56, 0x27, 0x00, 0x00, 0xe9, 0x7f, 0x20, 0x00, 0x00,
            0xe9, 0x7a, 0x1e, 0x00, 0x00, 0xe9, 0xd8, 0x17, 0x00, 0x00, 0xe9, 0x6e, 0x1c, 0x00,
            0x00, 0xe9, 0xcd, 0x1e, 0x00, 0x00, 0xe9, 0xf8, 0x23, 0x00, 0x00, 0xe9, 0x2d, 0x27,
            0x00, 0x00, 0xe9, 0xaf, 0x1e, 0x00, 0x00, 0xe9, 0xbc, 0x07, 0x00, 0x00, 0xe9, 0xd5,
            0x1b, 0x00, 0x00, 0xe9, 0x1f, 0x27, 0x00, 0x00, 0xe9, 0xe8, 0x18, 0x00, 0x00, 0xe9,
            0x37, 0x1f, 0x00, 0x00, 0xe9, 0xde, 0x17, 0x00, 0x00, 0xe9, 0x02, 0x27, 0x00, 0x00,
            0xe9, 0x00, 0x27, 0x00, 0x00, 0xe9, 0x56, 0x22, 0x00, 0x00, 0xe9, 0xcf, 0x24, 0x00,
            0x00, 0xe9, 0x0f, 0x20, 0x00, 0x00, 0xe9, 0x59, 0x17, 0x00, 0x00, 0xe9, 0xd9, 0x16,
            0x00, 0x00, 0xe9, 0xdb, 0x0d, 0x00, 0x00, 0xe9, 0xe0, 0x26, 0x00, 0x00, 0xe9, 0x87,
            0x1f, 0x00, 0x00, 0xe9, 0x22, 0x17, 0x00, 0x00, 0xe9, 0x2c, 0x17, 0x00, 0x00, 0xe9,
            0x32, 0x1f, 0x00, 0x00, 0xe9, 0xbe, 0x26, 0x00, 0x00, 0xe9, 0xd2, 0x19, 0x00, 0x00,
            0xe9, 0x0a, 0x19, 0x00, 0x00, 0xe9, 0x28, 0x17, 0x00, 0x00, 0xe9, 0x94, 0x17, 0x00,
            0x00, 0xe9, 0xa4, 0x02, 0x00, 0x00, 0xe9, 0x8f, 0x04, 0x00, 0x00, 0xe9, 0x8a, 0x1b,
            0x00, 0x00, 0xe9, 0x2d, 0x19, 0x00, 0x00, 0xe9, 0xdd, 0x21, 0x00, 0x00, 0xe9, 0x1b,
            0x1c, 0x00, 0x00, 0xe9, 0x59, 0x19, 0x00, 0x00, 0xe9, 0x8d, 0x1f, 0x00, 0x00, 0xe9,
            0x75, 0x1d, 0x00, 0x00, 0xe9, 0x27, 0x02, 0x00, 0x00, 0xe9, 0x76, 0x26, 0x00, 0x00,
            0xe9, 0x8e, 0x18, 0x00, 0x00, 0xe9, 0xaf, 0x18, 0x00, 0x00, 0xe9, 0x73, 0x26, 0x00,
            0x00, 0xe9, 0xf2, 0x21, 0x00, 0x00, 0xe9, 0x66, 0x1f, 0x00, 0x00, 0xe9, 0x0b, 0x17,
            0x00, 0x00, 0xe9, 0x9f, 0x17, 0x00, 0x00, 0xe9, 0xea, 0x0c, 0x00, 0x00, 0xe9, 0x15,
            0x07, 0x00, 0x00, 0xe9, 0xd0, 0x03, 0x00, 0x00, 0xe9, 0x4b, 0x26, 0x00, 0x00, 0xe9,
            0xd0, 0x1a, 0x00, 0x00, 0xe9, 0xce, 0x17, 0x00, 0x00, 0xe9, 0xfc, 0x0b, 0x00, 0x00,
            0xe9, 0x37, 0x18, 0x00, 0x00, 0xe9, 0x52, 0x06, 0x00, 0x00, 0xe9, 0xfd, 0x01, 0x00,
            0x00, 0xe9, 0x08, 0x02, 0x00, 0x00, 0xe9, 0xd6, 0x18, 0x00, 0x00, 0xe9, 0xfc, 0x19,
            0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc,
            0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc,
            0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc,
            0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc,
            0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc,
        ];
        assert_eq!(&data, &expected_data);

        Ok(())
    }

    #[test]
    fn test_seek_and_read_beyond_size() -> Result<(), ErrorTrace> {
        let test_data: Vec<u8> = get_test_data();
        let data_stream: DataStreamReference = open_fake_data_stream(&test_data);

        let test_mft_attribute_data: Vec<u8> = get_test_mft_attribute_data();
        let mut data_attribute: NtfsMftAttribute = NtfsMftAttribute::new();
        data_attribute.read_data(&test_mft_attribute_data)?;

        let mut block_stream: NtfsWofCompressedStream = NtfsWofCompressedStream::new(4096, 0);
        block_stream.open(&data_stream, &data_attribute, 28672)?;

        block_stream.seek(SeekFrom::End(512))?;

        let mut data: Vec<u8> = vec![0; 512];
        let read_size: usize = block_stream.read(&mut data)?;
        assert_eq!(read_size, 0);

        Ok(())
    }

    #[test]
    fn test_get_size() -> Result<(), ErrorTrace> {
        let test_data: Vec<u8> = get_test_data();
        let data_stream: DataStreamReference = open_fake_data_stream(&test_data);

        let test_mft_attribute_data: Vec<u8> = get_test_mft_attribute_data();
        let mut data_attribute: NtfsMftAttribute = NtfsMftAttribute::new();
        data_attribute.read_data(&test_mft_attribute_data)?;

        let mut block_stream: NtfsWofCompressedStream = NtfsWofCompressedStream::new(4096, 0);
        block_stream.open(&data_stream, &data_attribute, 28672)?;

        let size: u64 = block_stream.get_size()?;
        assert_eq!(size, 28672);

        Ok(())
    }
}
