/* Copyright 2024-2025 Joachim Metz <joachim.metz@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

use std::collections::VecDeque;

use keramics_core::ErrorTrace;
use keramics_layout_map::LayoutMap;
use keramics_types::bytes_to_u32_le;

use super::constants::*;
use super::partition_entry::MbrPartitionEntry;

#[derive(LayoutMap)]
#[layout_map(
    structure(
        byte_order = "little",
        member(field(name = "boot_loader", data_type = "[u8; 440]", format = "hex")),
        member(field(name = "disk_identity", data_type = "u32", format = "hex")),
        member(field(name = "unknown1", data_type = "[u8; 2]", format = "hex")),
        member(field(
            name = "partition_entries",
            data_type = "[Struct<MbrPartitionEntry; 16>; 4]"
        )),
        member(field(name = "boot_signature", data_type = "[u8; 2]", format = "hex")),
    ),
    method(name = "debug_read_data"),
    method(name = "read_at_position")
)]
/// Master Boot Record (MBR).
pub struct MbrMasterBootRecord {
    /// Disk identity.
    pub disk_identity: u32,

    /// Partition entries.
    pub partition_entries: VecDeque<MbrPartitionEntry>,
}

impl MbrMasterBootRecord {
    /// Creates a new master boot record.
    pub fn new() -> Self {
        Self {
            disk_identity: 0,
            partition_entries: VecDeque::new(),
        }
    }

    /// Reads the master boot record from a buffer.
    pub fn read_data(&mut self, data: &[u8]) -> Result<(), ErrorTrace> {
        if data.len() != 512 {
            return Err(keramics_core::error_trace_new!(
                "Unsupported MBR master boot record data size"
            ));
        }
        if data[510..512] != MBR_BOOT_SIGNATURE {
            return Err(keramics_core::error_trace_new!(
                "Unsupported MBR master boot record signature"
            ));
        }
        self.disk_identity = bytes_to_u32_le!(data, 440);

        for data_offset in (446..510).step_by(16) {
            let mut partition_entry: MbrPartitionEntry = MbrPartitionEntry::new();

            let data_end_offset: usize = data_offset + 16;
            partition_entry.read_data(&data[data_offset..data_end_offset])?;

            self.partition_entries.push_back(partition_entry);
        }
        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    use std::io::SeekFrom;

    use keramics_core::{DataStreamReference, open_fake_data_stream};

    fn get_test_data() -> Vec<u8> {
        return vec![
            0x33, 0xc0, 0x8e, 0xd0, 0xbc, 0x00, 0x7c, 0x8e, 0xc0, 0x8e, 0xd8, 0xbe, 0x00, 0x7c,
            0xbf, 0x00, 0x06, 0xb9, 0x00, 0x02, 0xfc, 0xf3, 0xa4, 0x50, 0x68, 0x1c, 0x06, 0xcb,
            0xfb, 0xb9, 0x04, 0x00, 0xbd, 0xbe, 0x07, 0x80, 0x7e, 0x00, 0x00, 0x7c, 0x0b, 0x0f,
            0x85, 0x0e, 0x01, 0x83, 0xc5, 0x10, 0xe2, 0xf1, 0xcd, 0x18, 0x88, 0x56, 0x00, 0x55,
            0xc6, 0x46, 0x11, 0x05, 0xc6, 0x46, 0x10, 0x00, 0xb4, 0x41, 0xbb, 0xaa, 0x55, 0xcd,
            0x13, 0x5d, 0x72, 0x0f, 0x81, 0xfb, 0x55, 0xaa, 0x75, 0x09, 0xf7, 0xc1, 0x01, 0x00,
            0x74, 0x03, 0xfe, 0x46, 0x10, 0x66, 0x60, 0x80, 0x7e, 0x10, 0x00, 0x74, 0x26, 0x66,
            0x68, 0x00, 0x00, 0x00, 0x00, 0x66, 0xff, 0x76, 0x08, 0x68, 0x00, 0x00, 0x68, 0x00,
            0x7c, 0x68, 0x01, 0x00, 0x68, 0x10, 0x00, 0xb4, 0x42, 0x8a, 0x56, 0x00, 0x8b, 0xf4,
            0xcd, 0x13, 0x9f, 0x83, 0xc4, 0x10, 0x9e, 0xeb, 0x14, 0xb8, 0x01, 0x02, 0xbb, 0x00,
            0x7c, 0x8a, 0x56, 0x00, 0x8a, 0x76, 0x01, 0x8a, 0x4e, 0x02, 0x8a, 0x6e, 0x03, 0xcd,
            0x13, 0x66, 0x61, 0x73, 0x1c, 0xfe, 0x4e, 0x11, 0x75, 0x0c, 0x80, 0x7e, 0x00, 0x80,
            0x0f, 0x84, 0x8a, 0x00, 0xb2, 0x80, 0xeb, 0x84, 0x55, 0x32, 0xe4, 0x8a, 0x56, 0x00,
            0xcd, 0x13, 0x5d, 0xeb, 0x9e, 0x81, 0x3e, 0xfe, 0x7d, 0x55, 0xaa, 0x75, 0x6e, 0xff,
            0x76, 0x00, 0xe8, 0x8d, 0x00, 0x75, 0x17, 0xfa, 0xb0, 0xd1, 0xe6, 0x64, 0xe8, 0x83,
            0x00, 0xb0, 0xdf, 0xe6, 0x60, 0xe8, 0x7c, 0x00, 0xb0, 0xff, 0xe6, 0x64, 0xe8, 0x75,
            0x00, 0xfb, 0xb8, 0x00, 0xbb, 0xcd, 0x1a, 0x66, 0x23, 0xc0, 0x75, 0x3b, 0x66, 0x81,
            0xfb, 0x54, 0x43, 0x50, 0x41, 0x75, 0x32, 0x81, 0xf9, 0x02, 0x01, 0x72, 0x2c, 0x66,
            0x68, 0x07, 0xbb, 0x00, 0x00, 0x66, 0x68, 0x00, 0x02, 0x00, 0x00, 0x66, 0x68, 0x08,
            0x00, 0x00, 0x00, 0x66, 0x53, 0x66, 0x53, 0x66, 0x55, 0x66, 0x68, 0x00, 0x00, 0x00,
            0x00, 0x66, 0x68, 0x00, 0x7c, 0x00, 0x00, 0x66, 0x61, 0x68, 0x00, 0x00, 0x07, 0xcd,
            0x1a, 0x5a, 0x32, 0xf6, 0xea, 0x00, 0x7c, 0x00, 0x00, 0xcd, 0x18, 0xa0, 0xb7, 0x07,
            0xeb, 0x08, 0xa0, 0xb6, 0x07, 0xeb, 0x03, 0xa0, 0xb5, 0x07, 0x32, 0xe4, 0x05, 0x00,
            0x07, 0x8b, 0xf0, 0xac, 0x3c, 0x00, 0x74, 0x09, 0xbb, 0x07, 0x00, 0xb4, 0x0e, 0xcd,
            0x10, 0xeb, 0xf2, 0xf4, 0xeb, 0xfd, 0x2b, 0xc9, 0xe4, 0x64, 0xeb, 0x00, 0x24, 0x02,
            0xe0, 0xf8, 0x24, 0x02, 0xc3, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x70,
            0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65,
            0x00, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67,
            0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x79, 0x73,
            0x74, 0x65, 0x6d, 0x00, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x70,
            0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
            0x00, 0x00, 0x00, 0x63, 0x7b, 0x9a, 0x1a, 0x43, 0x5b, 0x69, 0x00, 0x00, 0x80, 0x20,
            0x21, 0x00, 0x07, 0xdf, 0x13, 0x0c, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00,
            0x00, 0xdf, 0x14, 0x0c, 0x07, 0xfe, 0xff, 0xff, 0x00, 0x28, 0x03, 0x00, 0x00, 0xd0,
            0x1c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa,
        ];
    }

    #[test]
    fn test_read_data() -> Result<(), ErrorTrace> {
        let mut test_struct = MbrMasterBootRecord::new();

        let test_data: Vec<u8> = get_test_data();
        test_struct.read_data(&test_data)?;

        assert_eq!(test_struct.disk_identity, 0x695b431a);
        assert_eq!(test_struct.partition_entries.len(), 4);

        Ok(())
    }

    #[test]
    fn test_read_data_with_unsupported_data_size() {
        let test_data: Vec<u8> = get_test_data();

        let mut test_struct = MbrMasterBootRecord::new();
        let result = test_struct.read_data(&test_data[0..511]);
        assert!(result.is_err());
    }

    #[test]
    fn test_read_data_with_unsupported_signature() {
        let mut test_data: Vec<u8> = get_test_data();
        test_data[510] = 0xff;

        let mut test_struct = MbrMasterBootRecord::new();
        let result = test_struct.read_data(&test_data);
        assert!(result.is_err());
    }

    #[test]
    fn test_read_at_position() -> Result<(), ErrorTrace> {
        let test_data: Vec<u8> = get_test_data();
        let data_stream: DataStreamReference = open_fake_data_stream(test_data);

        let mut test_struct = MbrMasterBootRecord::new();
        test_struct.read_at_position(&data_stream, SeekFrom::Start(0))?;

        assert_eq!(test_struct.disk_identity, 0x695b431a);
        assert_eq!(test_struct.partition_entries.len(), 4);

        Ok(())
    }
}
