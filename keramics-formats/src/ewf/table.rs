/* Copyright 2024-2025 Joachim Metz <joachim.metz@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

use std::io;
use std::io::SeekFrom;

use keramics_checksums::Adler32Context;
use keramics_core::DataStreamReference;
use keramics_core::mediator::{Mediator, MediatorReference};

use super::table_entry::EwfTableEntry;
use super::table_footer::EwfTableFooter;
use super::table_header::EwfTableHeader;

/// Expert Witness Compression Format (EWF) table.
pub struct EwfTable {
    /// Mediator.
    mediator: MediatorReference,

    /// Base offset.
    pub base_offset: u64,

    /// Entries.
    pub entries: Vec<EwfTableEntry>,
}

impl EwfTable {
    /// Creates a new table.
    pub fn new() -> Self {
        Self {
            mediator: Mediator::current(),
            base_offset: 0,
            entries: Vec::new(),
        }
    }

    /// Reads the table from a buffer.
    fn read_data(&mut self, data: &[u8]) -> io::Result<()> {
        let mut table_header: EwfTableHeader = EwfTableHeader::new();

        if self.mediator.debug_output {
            self.mediator
                .debug_print(EwfTableHeader::debug_read_data(data));
        }
        table_header.read_data(data)?;

        // TODO: check for empty table
        // TODO: check for number of entries exceeding maximum

        self.base_offset = table_header.base_offset;

        let mut data_offset: usize = 24;
        let footer_offset: usize = 24 + (table_header.number_of_entries as usize * 4);
        let footer_end_offset: usize = footer_offset + 4;

        let mut table_footer: EwfTableFooter = EwfTableFooter::new();

        if self.mediator.debug_output {
            self.mediator.debug_print(EwfTableFooter::debug_read_data(
                &data[footer_offset..footer_end_offset],
            ));
        }
        table_footer.read_data(&data[footer_offset..footer_end_offset])?;

        let mut adler32_context: Adler32Context = Adler32Context::new(1);
        adler32_context.update(&data[data_offset..footer_offset]);
        let calculated_checksum: u32 = adler32_context.finalize();

        if table_footer.checksum != calculated_checksum {
            return Err(io::Error::new(
                io::ErrorKind::InvalidInput,
                format!(
                    "Mismatch between stored: 0x{:08x} and calculated: 0x{:08x} EWF table entries checksums",
                    table_footer.checksum, calculated_checksum
                ),
            ));
        }
        for _ in 0..table_header.number_of_entries {
            let data_end_offset: usize = data_offset + 4;

            let mut table_entry: EwfTableEntry = EwfTableEntry::new();

            if self.mediator.debug_output {
                self.mediator.debug_print(EwfTableEntry::debug_read_data(
                    &data[data_offset..data_end_offset],
                ));
            }
            table_entry.read_data(&data[data_offset..data_end_offset])?;
            data_offset = data_end_offset;

            self.entries.push(table_entry);
        }
        Ok(())
    }

    /// Reads the table from a specific position in a data stream.
    pub fn read_at_position(
        &mut self,
        data_stream: &DataStreamReference,
        data_size: u64,
        position: SeekFrom,
    ) -> io::Result<()> {
        // Note that 16777216 is an arbitrary chosen limit.
        if data_size < 28 || data_size > 16777216 {
            return Err(io::Error::new(
                io::ErrorKind::InvalidInput,
                format!(
                    "Unsupported table data size: {} value out of bounds",
                    data_size
                ),
            ));
        }
        let mut data: Vec<u8> = vec![0; data_size as usize];

        let offset: u64 = match data_stream.write() {
            Ok(mut data_stream) => data_stream.read_exact_at_position(&mut data, position)?,
            Err(error) => return Err(keramics_core::error_to_io_error!(error)),
        };
        if self.mediator.debug_output {
            self.mediator.debug_print(format!(
                "EwfTable data of size: {} at offset: {} (0x{:08x})\n",
                data_size, offset, offset
            ));
            self.mediator.debug_print_data(&data, true);
        }
        self.read_data(&data)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    use keramics_core::{DataStreamReference, open_fake_data_stream};

    fn get_test_data() -> Vec<u8> {
        return vec![
            0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x07, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd5, 0x00, 0xfd, 0x0d, 0x4c, 0x00, 0x00, 0x80,
            0x1d, 0x03, 0x00, 0x80, 0x51, 0x03, 0x00, 0x80, 0x85, 0x03, 0x00, 0x80, 0xb9, 0x03,
            0x00, 0x80, 0xd4, 0x04, 0x00, 0x80, 0x96, 0x06, 0x00, 0x80, 0xca, 0x06, 0x00, 0x80,
            0xfe, 0x06, 0x00, 0x80, 0x32, 0x07, 0x00, 0x80, 0x66, 0x07, 0x00, 0x80, 0x9a, 0x07,
            0x00, 0x80, 0xce, 0x07, 0x00, 0x80, 0x02, 0x08, 0x00, 0x80, 0x36, 0x08, 0x00, 0x80,
            0x6a, 0x08, 0x00, 0x80, 0x9e, 0x08, 0x00, 0x80, 0xe5, 0x08, 0x00, 0x80, 0x19, 0x09,
            0x00, 0x80, 0x4d, 0x09, 0x00, 0x80, 0x81, 0x09, 0x00, 0x80, 0xb5, 0x09, 0x00, 0x80,
            0xe9, 0x09, 0x00, 0x80, 0x1d, 0x0a, 0x00, 0x80, 0x51, 0x0a, 0x00, 0x80, 0x85, 0x0a,
            0x00, 0x80, 0xb9, 0x0a, 0x00, 0x80, 0xed, 0x0a, 0x00, 0x80, 0x21, 0x0b, 0x00, 0x80,
            0x55, 0x0b, 0x00, 0x80, 0x89, 0x0b, 0x00, 0x80, 0xbd, 0x0b, 0x00, 0x80, 0xf1, 0x0b,
            0x00, 0x80, 0x25, 0x0c, 0x00, 0x80, 0x59, 0x0c, 0x00, 0x80, 0x8d, 0x0c, 0x00, 0x80,
            0xc1, 0x0c, 0x00, 0x80, 0xf5, 0x0c, 0x00, 0x80, 0x29, 0x0d, 0x00, 0x80, 0x5d, 0x0d,
            0x00, 0x80, 0x91, 0x0d, 0x00, 0x80, 0xc5, 0x0d, 0x00, 0x80, 0xf9, 0x0d, 0x00, 0x80,
            0x2d, 0x0e, 0x00, 0x80, 0x61, 0x0e, 0x00, 0x80, 0x95, 0x0e, 0x00, 0x80, 0xc9, 0x0e,
            0x00, 0x80, 0xfd, 0x0e, 0x00, 0x80, 0x31, 0x0f, 0x00, 0x80, 0x8c, 0x0f, 0x00, 0x80,
            0xc0, 0x0f, 0x00, 0x80, 0xf4, 0x0f, 0x00, 0x80, 0x28, 0x10, 0x00, 0x80, 0x5c, 0x10,
            0x00, 0x80, 0x90, 0x10, 0x00, 0x80, 0xc4, 0x10, 0x00, 0x80, 0xf8, 0x10, 0x00, 0x80,
            0x2c, 0x11, 0x00, 0x80, 0x60, 0x11, 0x00, 0x80, 0x94, 0x11, 0x00, 0x80, 0xc8, 0x11,
            0x00, 0x80, 0xfc, 0x11, 0x00, 0x80, 0x30, 0x12, 0x00, 0x80, 0x64, 0x12, 0x00, 0x80,
            0x98, 0x12, 0x00, 0x80, 0xf4, 0x12, 0x00, 0x80, 0x28, 0x13, 0x00, 0x80, 0x5c, 0x13,
            0x00, 0x80, 0x90, 0x13, 0x00, 0x80, 0xc4, 0x13, 0x00, 0x80, 0xf8, 0x13, 0x00, 0x80,
            0x2c, 0x14, 0x00, 0x80, 0x60, 0x14, 0x00, 0x80, 0x94, 0x14, 0x00, 0x80, 0xc8, 0x14,
            0x00, 0x80, 0xfc, 0x14, 0x00, 0x80, 0x30, 0x15, 0x00, 0x80, 0x64, 0x15, 0x00, 0x80,
            0x98, 0x15, 0x00, 0x80, 0xcc, 0x15, 0x00, 0x80, 0x00, 0x16, 0x00, 0x80, 0x5c, 0x16,
            0x00, 0x80, 0x90, 0x16, 0x00, 0x80, 0xc4, 0x16, 0x00, 0x80, 0xf8, 0x16, 0x00, 0x80,
            0x2c, 0x17, 0x00, 0x80, 0x60, 0x17, 0x00, 0x80, 0x94, 0x17, 0x00, 0x80, 0xc8, 0x17,
            0x00, 0x80, 0xfc, 0x17, 0x00, 0x80, 0x30, 0x18, 0x00, 0x80, 0x64, 0x18, 0x00, 0x80,
            0x98, 0x18, 0x00, 0x80, 0xcc, 0x18, 0x00, 0x80, 0x00, 0x19, 0x00, 0x80, 0x34, 0x19,
            0x00, 0x80, 0x68, 0x19, 0x00, 0x80, 0x68, 0x29, 0x00, 0x80, 0x9c, 0x29, 0x00, 0x80,
            0xd0, 0x29, 0x00, 0x80, 0x04, 0x2a, 0x00, 0x80, 0x38, 0x2a, 0x00, 0x80, 0x6c, 0x2a,
            0x00, 0x80, 0xa0, 0x2a, 0x00, 0x80, 0xd4, 0x2a, 0x00, 0x80, 0x08, 0x2b, 0x00, 0x80,
            0x3c, 0x2b, 0x00, 0x80, 0x70, 0x2b, 0x00, 0x80, 0xa4, 0x2b, 0x00, 0x80, 0xd8, 0x2b,
            0x00, 0x80, 0x0c, 0x2c, 0x00, 0x80, 0x40, 0x2c, 0x00, 0x80, 0x74, 0x2c, 0x00, 0x80,
            0xa8, 0x2c, 0x00, 0x80, 0xdc, 0x2c, 0x00, 0x80, 0x10, 0x2d, 0x00, 0x80, 0x44, 0x2d,
            0x00, 0x80, 0x78, 0x2d, 0x00, 0x80, 0xac, 0x2d, 0x00, 0x80, 0xe0, 0x2d, 0x00, 0x80,
            0x14, 0x2e, 0x00, 0x80, 0x48, 0x2e, 0x00, 0x80, 0x7c, 0x2e, 0x00, 0x80, 0xb0, 0x2e,
            0x00, 0x80, 0xe4, 0x2e, 0x00, 0x80, 0x18, 0x2f, 0x00, 0x80, 0x4c, 0x2f, 0x00, 0x80,
            0x80, 0x2f, 0x00, 0x80, 0x96, 0x8c, 0xbb, 0xe1,
        ];
    }

    #[test]
    fn test_read_data() -> io::Result<()> {
        let test_data: Vec<u8> = get_test_data();

        let mut test_struct = EwfTable::new();
        test_struct.read_data(&test_data)?;

        assert_eq!(test_struct.entries.len(), 128);
        assert_eq!(test_struct.base_offset, 1869);

        Ok(())
    }

    #[test]
    fn test_read_data_with_checksum_mismatch() {
        let mut test_data: Vec<u8> = get_test_data();
        test_data[4] = 0xff;

        let mut test_struct = EwfTable::new();
        let result = test_struct.read_data(&test_data);
        assert!(result.is_err());
    }

    #[test]
    fn test_read_at_position() -> io::Result<()> {
        let test_data: Vec<u8> = get_test_data();
        let data_stream: DataStreamReference = open_fake_data_stream(test_data);

        let mut test_struct = EwfTable::new();
        test_struct.read_at_position(&data_stream, 540, SeekFrom::Start(0))?;

        assert_eq!(test_struct.entries.len(), 128);
        assert_eq!(test_struct.base_offset, 1869);

        Ok(())
    }
}
