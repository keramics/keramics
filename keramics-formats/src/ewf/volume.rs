/* Copyright 2024-2025 Joachim Metz <joachim.metz@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

use std::io;

use keramics_checksums::Adler32Context;
use keramics_layout_map::LayoutMap;
use keramics_types::{Uuid, bytes_to_u32_le};

#[derive(LayoutMap)]
#[layout_map(
    structure(
        byte_order = "little",
        field(name = "media_type", data_type = "u8"),
        field(name = "unknown1", data_type = "[u8; 3]", format = "hex"),
        field(name = "number_of_chunks", data_type = "u32"),
        field(name = "sectors_per_chunk", data_type = "u32"),
        field(name = "bytes_per_sector", data_type = "u32"),
        field(name = "number_of_sectors", data_type = "u64"),
        field(name = "chs_cylinders", data_type = "u32"),
        field(name = "chs_heads", data_type = "u32"),
        field(name = "chs_sectors", data_type = "u32"),
        field(name = "media_flags", data_type = "u8"),
        field(name = "unknown2", data_type = "[u8; 3]", format = "hex"),
        field(name = "palm_volume_start_sector", data_type = "u32"),
        field(name = "unknown3", data_type = "[u8; 4]", format = "hex"),
        field(name = "smart_logs_start_sector", data_type = "u32"),
        field(name = "compression_level", data_type = "u8"),
        field(name = "unknown4", data_type = "[u8; 3]", format = "hex"),
        field(name = "error_granularity", data_type = "u32"),
        field(name = "unknown5", data_type = "[u8; 4]", format = "hex"),
        field(name = "set_identifier", data_type = "Uuid"),
        field(name = "unknown6", data_type = "[u8; 963]", format = "hex"),
        field(name = "signature", data_type = "[u8; 5]"),
        field(name = "checksum", data_type = "u32", format = "hex"),
    ),
    method(name = "debug_read_data"),
    method(name = "read_at_position")
)]
/// Expert Witness Compression Format (EWF-E01) volume.
pub struct EwfE01Volume {
    /// Media type.
    pub media_type: u8,

    /// Number of chunks.
    pub number_of_chunks: u32,

    /// Sectors per chunk.
    pub sectors_per_chunk: u32,

    /// Bytes per sector.
    pub bytes_per_sector: u32,

    /// Number of sectors.
    pub number_of_sectors: u32,

    /// Media flags.
    pub media_flags: u8,

    /// Compression level.
    pub compression_level: u8,

    /// Error granularity.
    pub error_granularity: u32,

    /// Set identifier.
    pub set_identifier: Uuid,
}

impl EwfE01Volume {
    /// Creates a new volume.
    pub fn new() -> Self {
        Self {
            media_type: 0,
            number_of_chunks: 0,
            sectors_per_chunk: 0,
            bytes_per_sector: 0,
            number_of_sectors: 0,
            media_flags: 0,
            compression_level: 0,
            error_granularity: 0,
            set_identifier: Uuid::new(),
        }
    }

    /// Reads the volume from a buffer.
    pub fn read_data(&mut self, data: &[u8]) -> io::Result<()> {
        if data.len() < 1052 {
            return Err(io::Error::new(
                io::ErrorKind::InvalidInput,
                format!("Unsupported EWF-E01 volume data size"),
            ));
        }
        let stored_checksum: u32 = bytes_to_u32_le!(data, 1048);

        let mut adler32_context: Adler32Context = Adler32Context::new(1);
        adler32_context.update(&data[0..1048]);
        let calculated_checksum: u32 = adler32_context.finalize();

        if stored_checksum != calculated_checksum {
            return Err(io::Error::new(
                io::ErrorKind::InvalidInput,
                format!(
                    "Mismatch between stored: 0x{:08x} and calculated: 0x{:08x} EWF-E01 volume checksums",
                    stored_checksum, calculated_checksum
                ),
            ));
        }
        self.media_type = data[0];
        self.number_of_chunks = bytes_to_u32_le!(data, 4);
        self.sectors_per_chunk = bytes_to_u32_le!(data, 8);
        self.bytes_per_sector = bytes_to_u32_le!(data, 12);
        self.number_of_sectors = bytes_to_u32_le!(data, 16);
        self.media_flags = data[36];
        self.compression_level = data[52];
        self.error_granularity = bytes_to_u32_le!(data, 56);
        self.set_identifier = Uuid::from_le_bytes(&data[64..80]);

        Ok(())
    }
}

#[derive(LayoutMap)]
#[layout_map(
    structure(
        byte_order = "little",
        field(name = "unknown1", data_type = "[u8; 4]", format = "hex"),
        field(name = "number_of_chunks", data_type = "u32"),
        field(name = "sectors_per_chunk", data_type = "u32"),
        field(name = "bytes_per_sector", data_type = "u32"),
        field(name = "number_of_sectors", data_type = "u32"),
        field(name = "unknown2", data_type = "[u8; 20]", format = "hex"),
        field(name = "unknown3", data_type = "[u8; 45]", format = "hex"),
        field(name = "signature", data_type = "[u8; 5]"),
        field(name = "checksum", data_type = "u32", format = "hex"),
    ),
    method(name = "debug_read_data"),
    method(name = "read_at_position")
)]
/// Expert Witness Compression Format (EWF-S01) volume.
pub struct EwfS01Volume {
    /// Number of chunks.
    pub number_of_chunks: u32,

    /// Sectors per chunk.
    pub sectors_per_chunk: u32,

    /// Bytes per sector.
    pub bytes_per_sector: u32,

    /// Number of sectors.
    pub number_of_sectors: u32,
}

impl EwfS01Volume {
    /// Creates a new volume.
    pub fn new() -> Self {
        Self {
            number_of_chunks: 0,
            sectors_per_chunk: 0,
            bytes_per_sector: 0,
            number_of_sectors: 0,
        }
    }

    /// Reads the volume from a buffer.
    pub fn read_data(&mut self, data: &[u8]) -> io::Result<()> {
        if data.len() < 94 {
            return Err(io::Error::new(
                io::ErrorKind::InvalidInput,
                format!("Unsupported EWF-S01 volume data size"),
            ));
        }
        let stored_checksum: u32 = bytes_to_u32_le!(data, 90);

        let mut adler32_context: Adler32Context = Adler32Context::new(1);
        adler32_context.update(&data[0..90]);
        let calculated_checksum: u32 = adler32_context.finalize();

        if stored_checksum != calculated_checksum {
            return Err(io::Error::new(
                io::ErrorKind::InvalidInput,
                format!(
                    "Mismatch between stored: 0x{:08x} and calculated: 0x{:08x} EWF-S01 volume checksums",
                    stored_checksum, calculated_checksum
                ),
            ));
        }
        self.number_of_chunks = bytes_to_u32_le!(data, 4);
        self.sectors_per_chunk = bytes_to_u32_le!(data, 8);
        self.bytes_per_sector = bytes_to_u32_le!(data, 12);
        self.number_of_sectors = bytes_to_u32_le!(data, 16);

        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    use keramics_core::{DataStreamReference, open_fake_data_stream};

    fn get_test_data_e01() -> Vec<u8> {
        return vec![
            0x00, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x02,
            0x00, 0x00, 0x40, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xe0, 0x31, 0x6a, 0x31, 0x10,
            0x7e, 0xc2, 0xb7, 0x4f, 0xd1, 0x2b, 0x76, 0x80, 0xad, 0x29, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x08,
            0x48, 0xdb,
        ];
    }

    fn get_test_data_s01() -> Vec<u8> {
        return vec![
            0x01, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x02,
            0x00, 0x00, 0x40, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x43, 0x02, 0x1d, 0x3f,
        ];
    }

    #[test]
    fn test_read_data_e01() -> io::Result<()> {
        let test_data: Vec<u8> = get_test_data_e01();

        let mut test_struct = EwfE01Volume::new();
        test_struct.read_data(&test_data)?;

        assert_eq!(test_struct.media_type, 0);
        assert_eq!(test_struct.number_of_chunks, 45);
        assert_eq!(test_struct.sectors_per_chunk, 64);
        assert_eq!(test_struct.bytes_per_sector, 512);
        assert_eq!(test_struct.number_of_sectors, 2880);
        assert_eq!(test_struct.media_flags, 1);
        assert_eq!(test_struct.compression_level, 0);
        assert_eq!(test_struct.error_granularity, 64);
        assert_eq!(
            test_struct.set_identifier.to_string(),
            "6a31e044-1031-c27e-b74f-d12b7680ad29"
        );
        Ok(())
    }

    #[test]
    fn test_read_data_with_unsupported_data_size_e01() {
        let test_data: Vec<u8> = get_test_data_e01();

        let mut test_struct = EwfE01Volume::new();
        let result = test_struct.read_data(&test_data[0..75]);
        assert!(result.is_err());
    }

    #[test]
    fn test_read_data_with_checksum_mismatch_e01() {
        let mut test_data: Vec<u8> = get_test_data_e01();
        test_data[1048] = 0xff;

        let mut test_struct = EwfE01Volume::new();
        let result = test_struct.read_data(&test_data);
        assert!(result.is_err());
    }

    #[test]
    fn test_read_at_position_e01() -> io::Result<()> {
        let test_data: Vec<u8> = get_test_data_e01();
        let data_stream: DataStreamReference = open_fake_data_stream(test_data);

        let mut test_struct = EwfE01Volume::new();
        test_struct.read_at_position(&data_stream, io::SeekFrom::Start(0))?;

        assert_eq!(test_struct.media_type, 0);
        assert_eq!(test_struct.number_of_chunks, 45);
        assert_eq!(test_struct.sectors_per_chunk, 64);
        assert_eq!(test_struct.bytes_per_sector, 512);
        assert_eq!(test_struct.number_of_sectors, 2880);
        assert_eq!(test_struct.media_flags, 1);
        assert_eq!(test_struct.compression_level, 0);
        assert_eq!(test_struct.error_granularity, 64);
        assert_eq!(
            test_struct.set_identifier.to_string(),
            "6a31e044-1031-c27e-b74f-d12b7680ad29"
        );
        Ok(())
    }

    #[test]
    fn test_read_data_s01() -> io::Result<()> {
        let test_data: Vec<u8> = get_test_data_s01();

        let mut test_struct = EwfS01Volume::new();
        test_struct.read_data(&test_data)?;

        assert_eq!(test_struct.number_of_chunks, 45);
        assert_eq!(test_struct.sectors_per_chunk, 64);
        assert_eq!(test_struct.bytes_per_sector, 512);
        assert_eq!(test_struct.number_of_sectors, 2880);

        Ok(())
    }

    #[test]
    fn test_read_data_with_unsupported_data_size_s01() {
        let test_data: Vec<u8> = get_test_data_s01();

        let mut test_struct = EwfS01Volume::new();
        let result = test_struct.read_data(&test_data[0..93]);
        assert!(result.is_err());
    }

    #[test]
    fn test_read_data_with_checksum_mismatch_s01() {
        let mut test_data: Vec<u8> = get_test_data_s01();
        test_data[90] = 0xff;

        let mut test_struct = EwfS01Volume::new();
        let result = test_struct.read_data(&test_data);
        assert!(result.is_err());
    }

    #[test]
    fn test_read_at_position_s01() -> io::Result<()> {
        let test_data: Vec<u8> = get_test_data_s01();
        let data_stream: DataStreamReference = open_fake_data_stream(test_data);

        let mut test_struct = EwfS01Volume::new();
        test_struct.read_at_position(&data_stream, io::SeekFrom::Start(0))?;

        assert_eq!(test_struct.number_of_chunks, 45);
        assert_eq!(test_struct.sectors_per_chunk, 64);
        assert_eq!(test_struct.bytes_per_sector, 512);
        assert_eq!(test_struct.number_of_sectors, 2880);

        Ok(())
    }
}
