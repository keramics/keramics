/* Copyright 2024-2025 Joachim Metz <joachim.metz@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

use keramics_core::ByteOrder;
use keramics_types::{bytes_to_u16_be, bytes_to_u16_le};

/// Expert Witness Compression Format (EWF) byte string object storage
/// as used in the header section.
pub struct EwfByteObjectStorage<'a> {
    /// Data.
    data: &'a [u8],

    /// Data size.
    data_size: usize,

    /// Data offset.
    data_offset: usize,
}

impl<'a> EwfByteObjectStorage<'a> {
    /// Creates a new byte string object storage.
    pub fn new(data: &'a [u8]) -> Self {
        Self {
            data: data,
            data_size: data.len(),
            data_offset: 0,
        }
    }

    /// Retrieves the next line.
    pub fn next_line(&mut self) -> Option<&'a [u8]> {
        let start_offset: usize = self.data_offset;
        let mut end_offset: usize = start_offset;

        let mut last_byte: u8 = 0;
        while self.data_offset < self.data_size {
            let byte: u8 = self.data[self.data_offset];
            self.data_offset += 1;

            if byte == 0x00 {
                return None;
            }
            // Break at newline (\n)
            if byte == b'\n' {
                // Ignore cariage return (\r)
                if last_byte == b'\r' {
                    end_offset -= 1;
                }
                break;
            }
            end_offset += 1;
            last_byte = byte;
        }
        Some(&self.data[start_offset..end_offset])
    }
}

/// Expert Witness Compression Format (EWF) UTF-16 string object storage
/// as used in the header2 section.
pub struct EwfUtf16ObjectStorage<'a> {
    /// Data.
    data: &'a [u8],

    /// Data size.
    data_size: usize,

    /// Data offset.
    data_offset: usize,

    /// Byte order.
    byte_order: ByteOrder,
}

impl<'a> EwfUtf16ObjectStorage<'a> {
    /// Creates a new iterator.
    pub fn new(data: &'a [u8], byte_order: ByteOrder) -> Self {
        Self {
            data: data,
            data_size: data.len(),
            data_offset: 0,
            byte_order: byte_order,
        }
    }

    /// Retrieves the next line.
    pub fn next_line(&mut self) -> Option<Vec<u16>> {
        let mut line: Vec<u16> = Vec::new();

        let start_offset: usize = self.data_offset;

        let mut last_value_16bit: u16 = 0;
        while self.data_offset < self.data_size {
            let value_16bit: u16 = match self.byte_order {
                ByteOrder::BigEndian => bytes_to_u16_be!(self.data, self.data_offset),
                ByteOrder::LittleEndian => bytes_to_u16_le!(self.data, self.data_offset),
            };
            self.data_offset += 2;

            if value_16bit == 0x0000 {
                return None;
            }
            // Break at newline (\n)
            if value_16bit == 0x000a {
                // Ignore cariage return (\r)
                if last_value_16bit == 0x000d {
                    line.pop();
                }
                break;
            }
            last_value_16bit = value_16bit;
            line.push(value_16bit);
        }
        Some(line)
    }

    /// Parses an object storage date value.
    pub fn parse_date_value(value: &[u16]) -> Option<i32> {
        // Note that the EnCase documentation indicates that the Date type is unsigned.
        let mut timestamp: i32 = 0;

        for value_16bit in value.iter() {
            timestamp *= 10;

            if *value_16bit < 0x0030 || *value_16bit > 0x0039 {
                return None;
            }
            timestamp += *value_16bit as i32 - 0x0030;
        }
        Some(timestamp)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    fn get_test_data_byte() -> Vec<u8> {
        return vec![
            0x31, 0x0d, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x0d, 0x0a, 0x63, 0x09, 0x6e, 0x09, 0x61,
            0x09, 0x65, 0x09, 0x74, 0x09, 0x61, 0x76, 0x09, 0x6f, 0x76, 0x09, 0x6d, 0x09, 0x75,
            0x09, 0x70, 0x0d, 0x0a, 0x63, 0x61, 0x73, 0x65, 0x09, 0x65, 0x76, 0x69, 0x64, 0x65,
            0x6e, 0x63, 0x65, 0x09, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
            0x6e, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x09, 0x6e, 0x6f, 0x74,
            0x65, 0x73, 0x09, 0x32, 0x30, 0x31, 0x34, 0x30, 0x38, 0x31, 0x37, 0x09, 0x4c, 0x69,
            0x6e, 0x75, 0x78, 0x09, 0x32, 0x30, 0x32, 0x35, 0x20, 0x39, 0x20, 0x31, 0x37, 0x20,
            0x31, 0x39, 0x20, 0x34, 0x36, 0x20, 0x31, 0x09, 0x32, 0x30, 0x32, 0x35, 0x20, 0x39,
            0x20, 0x31, 0x37, 0x20, 0x31, 0x39, 0x20, 0x34, 0x36, 0x20, 0x31, 0x09, 0x30, 0x0d,
            0x0a, 0x0d, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
        ];
    }

    fn get_test_data_utf16() -> Vec<u8> {
        return vec![
            0xff, 0xfe, 0x33, 0x00, 0x0a, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6e, 0x00,
            0x0a, 0x00, 0x61, 0x00, 0x09, 0x00, 0x63, 0x00, 0x09, 0x00, 0x6e, 0x00, 0x09, 0x00,
            0x65, 0x00, 0x09, 0x00, 0x74, 0x00, 0x09, 0x00, 0x6d, 0x00, 0x64, 0x00, 0x09, 0x00,
            0x73, 0x00, 0x6e, 0x00, 0x09, 0x00, 0x61, 0x00, 0x76, 0x00, 0x09, 0x00, 0x6f, 0x00,
            0x76, 0x00, 0x09, 0x00, 0x6d, 0x00, 0x09, 0x00, 0x75, 0x00, 0x09, 0x00, 0x70, 0x00,
            0x09, 0x00, 0x64, 0x00, 0x63, 0x00, 0x0a, 0x00, 0x64, 0x00, 0x65, 0x00, 0x73, 0x00,
            0x63, 0x00, 0x72, 0x00, 0x69, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00,
            0x6e, 0x00, 0x09, 0x00, 0x63, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x09, 0x00,
            0x65, 0x00, 0x76, 0x00, 0x69, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x63, 0x00,
            0x65, 0x00, 0x09, 0x00, 0x65, 0x00, 0x78, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x69, 0x00,
            0x6e, 0x00, 0x65, 0x00, 0x72, 0x00, 0x09, 0x00, 0x6e, 0x00, 0x6f, 0x00, 0x74, 0x00,
            0x65, 0x00, 0x73, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x32, 0x00, 0x30, 0x00,
            0x31, 0x00, 0x34, 0x00, 0x30, 0x00, 0x38, 0x00, 0x31, 0x00, 0x37, 0x00, 0x09, 0x00,
            0x4c, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x75, 0x00, 0x78, 0x00, 0x09, 0x00, 0x31, 0x00,
            0x37, 0x00, 0x35, 0x00, 0x38, 0x00, 0x31, 0x00, 0x33, 0x00, 0x31, 0x00, 0x31, 0x00,
            0x36, 0x00, 0x31, 0x00, 0x09, 0x00, 0x31, 0x00, 0x37, 0x00, 0x35, 0x00, 0x38, 0x00,
            0x31, 0x00, 0x33, 0x00, 0x31, 0x00, 0x31, 0x00, 0x36, 0x00, 0x31, 0x00, 0x09, 0x00,
            0x30, 0x00, 0x09, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x73, 0x00, 0x72, 0x00, 0x63, 0x00,
            0x65, 0x00, 0x0a, 0x00, 0x30, 0x00, 0x09, 0x00, 0x31, 0x00, 0x0a, 0x00, 0x70, 0x00,
            0x09, 0x00, 0x6e, 0x00, 0x09, 0x00, 0x69, 0x00, 0x64, 0x00, 0x09, 0x00, 0x65, 0x00,
            0x76, 0x00, 0x09, 0x00, 0x74, 0x00, 0x62, 0x00, 0x09, 0x00, 0x6c, 0x00, 0x6f, 0x00,
            0x09, 0x00, 0x70, 0x00, 0x6f, 0x00, 0x09, 0x00, 0x61, 0x00, 0x68, 0x00, 0x09, 0x00,
            0x67, 0x00, 0x75, 0x00, 0x09, 0x00, 0x61, 0x00, 0x71, 0x00, 0x0a, 0x00, 0x30, 0x00,
            0x09, 0x00, 0x30, 0x00, 0x0a, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00,
            0x09, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x09, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x09, 0x00,
            0x09, 0x00, 0x09, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x73, 0x00, 0x75, 0x00, 0x62, 0x00,
            0x0a, 0x00, 0x30, 0x00, 0x09, 0x00, 0x31, 0x00, 0x0a, 0x00, 0x70, 0x00, 0x09, 0x00,
            0x6e, 0x00, 0x09, 0x00, 0x69, 0x00, 0x64, 0x00, 0x09, 0x00, 0x6e, 0x00, 0x75, 0x00,
            0x09, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x09, 0x00, 0x67, 0x00, 0x75, 0x00, 0x0a, 0x00,
            0x30, 0x00, 0x09, 0x00, 0x30, 0x00, 0x0a, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00,
            0x09, 0x00, 0x31, 0x00, 0x09, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
    }

    #[test]
    fn test_next_line_byte() {
        let test_data: Vec<u8> = get_test_data_byte();

        let mut test_struct = EwfByteObjectStorage::new(&test_data);

        let expected_line: Vec<u8> = vec![0x31];
        assert_eq!(test_struct.next_line(), Some(expected_line.as_slice()));

        let expected_line: Vec<u8> = vec![0x6d, 0x61, 0x69, 0x6e];
        assert_eq!(test_struct.next_line(), Some(expected_line.as_slice()));
    }

    #[test]
    fn test_next_line_utf16() {
        let test_data: Vec<u8> = get_test_data_utf16();

        let mut test_struct = EwfUtf16ObjectStorage::new(&test_data[2..], ByteOrder::LittleEndian);

        let expected_line: Vec<u16> = vec![0x0033];
        assert_eq!(test_struct.next_line(), Some(expected_line));

        let expected_line: Vec<u16> = vec![0x006d, 0x0061, 0x0069, 0x006e];
        assert_eq!(test_struct.next_line(), Some(expected_line));
    }
}
