/* Copyright 2024 Joachim Metz <joachim.metz@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

use std::io;

use crate::mediator::{Mediator, MediatorReference};

use super::block_table_entry::UdifBlockTableEntry;
use super::block_table_header::UdifBlockTableHeader;

/// Universal Disk Image Format (UDIF) block table.
pub struct UdifBlockTable {
    /// Mediator.
    mediator: MediatorReference,

    /// Start sector.
    pub start_sector: u64,

    /// Entries.
    pub entries: Vec<UdifBlockTableEntry>,
}

impl UdifBlockTable {
    /// Creates a new block table.
    pub fn new() -> Self {
        Self {
            mediator: Mediator::current(),
            start_sector: 0,
            entries: Vec::new(),
        }
    }

    /// Reads the block table from a buffer.
    pub fn read_data(&mut self, data: &[u8]) -> io::Result<()> {
        let mut block_table_header: UdifBlockTableHeader = UdifBlockTableHeader::new();

        if self.mediator.debug_output {
            self.mediator
                .debug_print(UdifBlockTableHeader::debug_read_data(&data[0..204]));
        }
        block_table_header.read_data(&data[0..204])?;

        self.start_sector = block_table_header.start_sector;

        let mut data_offset: usize = 204;

        for _ in 0..block_table_header.number_of_entries {
            let data_end_offset: usize = data_offset + 40;

            let mut block_table_entry: UdifBlockTableEntry = UdifBlockTableEntry::new();

            if self.mediator.debug_output {
                self.mediator
                    .debug_print(UdifBlockTableEntry::debug_read_data(
                        &data[data_offset..data_end_offset],
                    ));
            }
            block_table_entry.read_data(&data[data_offset..data_end_offset])?;
            data_offset = data_end_offset;

            self.entries.push(block_table_entry);
        }
        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    fn get_test_data() -> Vec<u8> {
        return vec![
            0x6d, 0x69, 0x73, 0x68, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
            0x00, 0x20, 0x41, 0xf2, 0xfa, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x05, 0x00, 0x00,
            0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x0d, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00,
        ];
    }

    #[test]
    fn test_read_data() -> io::Result<()> {
        let test_data: Vec<u8> = get_test_data();

        let mut test_struct = UdifBlockTable::new();
        test_struct.read_data(&test_data)?;

        assert_eq!(test_struct.start_sector, 0);
        assert_eq!(test_struct.entries.len(), 2);

        Ok(())
    }

    #[test]
    fn test_read_data_with_unsupported_signature() {
        let mut test_data = get_test_data();
        test_data[0] = 0xff;

        let mut test_struct = UdifBlockTable::new();
        let result = test_struct.read_data(&test_data);
        assert!(result.is_err());
    }
}
