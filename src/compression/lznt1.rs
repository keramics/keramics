/* Copyright 2024-2025 Joachim Metz <joachim.metz@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

//! LZNT1 decompression.
//!
//! Provides decompression support for LZNT1 compressed data.

use std::io;

use layout_map::LayoutMap;

use crate::bytes_to_u16_le;
use crate::mediator::{Mediator, MediatorReference};

#[derive(LayoutMap)]
#[layout_map(
    structure(
        byte_order = "little",
        field(name = "block_size", data_type = "BitField16<12>", modifier = "+ 1"),
        field(name = "signature", data_type = "BitField16<3>"),
        field(name = "is_compressed_flag", data_type = "BitField16<1>"),
    ),
    method(name = "debug_read_data")
)]
/// LZNT1 block header.
struct Lznt1BlockHeader {
    /// Block size.
    block_size: u16,

    /// Value to indicate the block is compressed.
    is_compressed: bool,
}

impl Lznt1BlockHeader {
    /// Creates a new block header.
    pub fn new() -> Self {
        Self {
            block_size: 0,
            is_compressed: false,
        }
    }

    /// Reads the block header from a buffer.
    pub fn read_data(&mut self, data: &[u8]) -> io::Result<()> {
        if data.len() < 2 {
            return Err(io::Error::new(
                io::ErrorKind::InvalidInput,
                format!("Unsupported data size"),
            ));
        }
        let bit_fields1: u16 = bytes_to_u16_le!(data, 0);

        self.block_size = (bit_fields1 & 0x0fff) + 1;
        self.is_compressed = bit_fields1 & 0x8000 != 0;

        Ok(())
    }
}

/// Context for decompressing LZNT1 compressed data.
pub struct Lznt1Context {
    /// Mediator.
    mediator: MediatorReference,

    /// Uncompressed data size.
    pub uncompressed_data_size: usize,
}

impl Lznt1Context {
    /// Creates a new context.
    pub fn new() -> Self {
        Self {
            mediator: Mediator::current(),
            uncompressed_data_size: 0,
        }
    }

    /// Decompress data.
    pub fn decompress(
        &mut self,
        compressed_data: &[u8],
        uncompressed_data: &mut [u8],
    ) -> io::Result<()> {
        let mut compressed_data_offset: usize = 0;
        let compressed_data_size: usize = compressed_data.len();

        let mut uncompressed_data_offset: usize = 0;
        let uncompressed_data_size: usize = uncompressed_data.len();

        while compressed_data_offset < compressed_data_size {
            if uncompressed_data_offset >= uncompressed_data_size {
                break;
            }
            if 2 > compressed_data_size - compressed_data_offset {
                return Err(io::Error::new(
                    io::ErrorKind::InvalidData,
                    "Invalid compressed data value too small",
                ));
            }
            let compressed_data_end_offset: usize = compressed_data_offset + 2;

            if compressed_data[compressed_data_offset..compressed_data_end_offset] == [0; 2] {
                break;
            }
            let mut block_header: Lznt1BlockHeader = Lznt1BlockHeader::new();

            if self.mediator.debug_output {
                self.mediator.debug_print(format!(
                    "Lznt1BlockHeader data of size: 2 at offset: {} (0x{:08x})\n",
                    compressed_data_offset, compressed_data_offset
                ));
                self.mediator.debug_print_data(
                    &compressed_data[compressed_data_offset..compressed_data_end_offset],
                    true,
                );
                self.mediator.debug_print(Lznt1BlockHeader::debug_read_data(
                    &compressed_data[compressed_data_offset..compressed_data_end_offset],
                ));
            }
            block_header
                .read_data(&compressed_data[compressed_data_offset..compressed_data_end_offset])?;
            compressed_data_offset = compressed_data_end_offset;

            if block_header.is_compressed {
                let write_count: usize = self.decompress_block(
                    block_header.block_size as usize,
                    compressed_data,
                    &mut compressed_data_offset,
                    compressed_data_size,
                    &mut uncompressed_data[uncompressed_data_offset..],
                    uncompressed_data_size - uncompressed_data_offset,
                )?;
                uncompressed_data_offset += write_count;
            } else {
                let compressed_data_end_offset: usize =
                    compressed_data_offset + block_header.block_size as usize;
                let uncompressed_data_end_offset: usize =
                    uncompressed_data_offset + block_header.block_size as usize;

                if self.mediator.debug_output {
                    self.mediator
                        .debug_print(format!("Lznt1Context::decompress {{\n",));
                    self.mediator.debug_print(format!("    literal data:\n"));
                    self.mediator.debug_print_data(
                        &compressed_data[compressed_data_offset..compressed_data_end_offset],
                        true,
                    );
                    self.mediator.debug_print(format!("}}\n\n"));
                }
                if compressed_data_end_offset > compressed_data_size {
                    return Err(io::Error::new(
                        io::ErrorKind::InvalidData,
                        "Invalid compressed data value too small",
                    ));
                }
                if uncompressed_data_end_offset > uncompressed_data_size {
                    return Err(io::Error::new(
                        io::ErrorKind::InvalidData,
                        "Invalid uncompressed data value too small",
                    ));
                }
                uncompressed_data[uncompressed_data_offset..uncompressed_data_end_offset]
                    .copy_from_slice(
                        &compressed_data[compressed_data_offset..compressed_data_end_offset],
                    );

                compressed_data_offset = compressed_data_end_offset;
                uncompressed_data_offset = uncompressed_data_end_offset;
            }
        }
        self.uncompressed_data_size = uncompressed_data_offset;

        Ok(())
    }

    /// Decompress a block.
    fn decompress_block(
        &self,
        block_size: usize,
        compressed_data: &[u8],
        compressed_data_offset: &mut usize,
        compressed_data_size: usize,
        uncompressed_data: &mut [u8],
        uncompressed_data_size: usize,
    ) -> io::Result<usize> {
        let mut safe_compressed_data_offset: usize = *compressed_data_offset;
        let mut uncompressed_data_offset: usize = 0;

        if self.mediator.debug_output {
            self.mediator
                .debug_print(format!("Lznt1Context::decompress_block {{\n",));
        }
        let compressed_data_end_offset: usize = safe_compressed_data_offset + block_size;
        let mut compression_tuple_threshold: usize = 16;
        let mut compression_tuple_distance_shift: u16 = 12;
        let mut compression_tuple_match_size_mask: u16 = 0x0fff;

        while safe_compressed_data_offset < compressed_data_end_offset {
            if safe_compressed_data_offset >= compressed_data_size {
                break;
            }
            let mut compression_flags: u8 = compressed_data[safe_compressed_data_offset];

            if self.mediator.debug_output {
                self.mediator.debug_print(format!(
                    "    compressed_data_offset: {} (0x{:08x}),\n",
                    safe_compressed_data_offset, safe_compressed_data_offset
                ));
                self.mediator.debug_print(format!(
                    "    compression_flags: 0x{:02x},\n",
                    compression_flags
                ));
            }
            safe_compressed_data_offset += 1;

            for _ in 0..8 {
                if compression_flags & 0x01 != 0 {
                    if 2 > compressed_data_size - safe_compressed_data_offset {
                        return Err(io::Error::new(
                            io::ErrorKind::InvalidData,
                            "Invalid compressed data value too small",
                        ));
                    }
                    let compression_tuple: u16 =
                        bytes_to_u16_le!(compressed_data, safe_compressed_data_offset);
                    safe_compressed_data_offset += 2;

                    let distance: u16 = (compression_tuple >> compression_tuple_distance_shift) + 1;
                    let match_size: u16 =
                        (compression_tuple & compression_tuple_match_size_mask) + 3;

                    if self.mediator.debug_output {
                        self.mediator.debug_print(format!(
                            "    compressed_data_offset: {} (0x{:08x}),\n",
                            safe_compressed_data_offset, safe_compressed_data_offset
                        ));
                        self.mediator.debug_print(format!(
                            "    compression_tuple: 0x{:04x} (shift: {}, mask: 0x{:04x}),\n",
                            compression_tuple,
                            compression_tuple_distance_shift,
                            compression_tuple_match_size_mask
                        ));
                        self.mediator
                            .debug_print(format!("    distance: {},\n", distance));
                        self.mediator
                            .debug_print(format!("    match_size: {},\n", match_size));
                        self.mediator.debug_print(format!(
                            "    uncompressed_data_offset: {},\n",
                            uncompressed_data_offset
                        ));
                    }
                    if distance as usize > uncompressed_data_offset {
                        return Err(io::Error::new(
                            io::ErrorKind::InvalidData,
                            "Invalid distance value exceeds uncompressed data offset",
                        ));
                    }
                    if match_size as usize > uncompressed_data_size - uncompressed_data_offset {
                        return Err(io::Error::new(
                            io::ErrorKind::InvalidData,
                            "Invalid match size value exceeds uncompressed data size",
                        ));
                    }
                    let match_offset: usize = uncompressed_data_offset - distance as usize;
                    let mut match_end_offset: usize = match_offset;

                    for _ in 0..match_size {
                        uncompressed_data[uncompressed_data_offset] =
                            uncompressed_data[match_end_offset];

                        match_end_offset += 1;
                        uncompressed_data_offset += 1;
                    }
                    if self.mediator.debug_output {
                        self.mediator
                            .debug_print(format!("    match offset: {}\n", match_offset));
                        self.mediator.debug_print(format!("    match data:\n"));
                        self.mediator.debug_print_data(
                            &uncompressed_data[match_offset..match_end_offset],
                            true,
                        );
                    }
                } else {
                    if safe_compressed_data_offset >= compressed_data_size {
                        return Err(io::Error::new(
                            io::ErrorKind::InvalidData,
                            "Invalid compressed data value too small",
                        ));
                    }
                    if uncompressed_data_offset >= uncompressed_data_size {
                        return Err(io::Error::new(
                            io::ErrorKind::InvalidData,
                            "Invalid uncompressed data value too small",
                        ));
                    }
                    uncompressed_data[uncompressed_data_offset] =
                        compressed_data[safe_compressed_data_offset];

                    safe_compressed_data_offset += 1;
                    uncompressed_data_offset += 1;
                }
                compression_flags >>= 1;

                if safe_compressed_data_offset >= compressed_data_end_offset {
                    break;
                }
                // The compression tuple match size mask and distance shift are dependent on the uncompressed data offset.
                while uncompressed_data_offset > compression_tuple_threshold {
                    if compression_tuple_distance_shift == 0 {
                        return Err(io::Error::new(
                            io::ErrorKind::InvalidData,
                            "Invalid compression tuple offset shift value out of bounds",
                        ));
                    }
                    compression_tuple_distance_shift -= 1;
                    compression_tuple_match_size_mask >>= 1;
                    compression_tuple_threshold <<= 1;
                }
            }
        }
        if self.mediator.debug_output {
            self.mediator.debug_print(format!("}}\n\n"));
        }
        *compressed_data_offset = compressed_data_end_offset;

        Ok(uncompressed_data_offset)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    use std::fs;

    fn get_test_data() -> Vec<u8> {
        return vec![
            0x47, 0xb8, 0x04, 0x0a, 0x20, 0x1d, 0x00, 0x41, 0x70, 0x61, 0x63, 0x68, 0x00, 0x65,
            0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x02, 0x65, 0x19, 0xbc, 0x56, 0x65, 0x72,
            0x73, 0x69, 0x6f, 0x00, 0x6e, 0x20, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x4a, 0x00, 0x61,
            0x6e, 0x75, 0x61, 0x72, 0x79, 0x20, 0x32, 0x08, 0x30, 0x30, 0x34, 0x16, 0x68, 0x68,
            0x74, 0x74, 0x70, 0x00, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x61, 0x81, 0x02,
            0x66, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x03, 0x6a, 0x08, 0x73, 0x2f, 0x0a, 0x01,
            0x38, 0x54, 0x45, 0x52, 0x4d, 0x00, 0x53, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x43, 0x4f,
            0x00, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x00, 0x20, 0x46, 0x4f, 0x52,
            0x20, 0x55, 0x53, 0x45, 0x00, 0x2c, 0x20, 0x52, 0x45, 0x50, 0x52, 0x4f, 0x44, 0x14,
            0x55, 0x43, 0x01, 0x16, 0x2c, 0x02, 0x25, 0x44, 0x49, 0x53, 0x60, 0x54, 0x52, 0x49,
            0x42, 0x55, 0x01, 0x11, 0x02, 0x40, 0x31, 0x00, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x69,
            0x6e, 0x69, 0xb2, 0x74, 0x00, 0x9c, 0x73, 0x2e, 0x02, 0x13, 0x00, 0xf4, 0x22, 0x04,
            0xd1, 0x00, 0x22, 0x20, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x20, 0x40, 0x6d, 0x65, 0x61,
            0x6e, 0x20, 0x74, 0x80, 0x74, 0x74, 0x00, 0x65, 0x72, 0x6d, 0x73, 0x20, 0x61, 0x6e,
            0x64, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x64, 0x83, 0x1a, 0x20, 0x66, 0x00, 0x6f, 0x72,
            0x20, 0x75, 0x73, 0x65, 0x2c, 0x20, 0x00, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75,
            0x63, 0x0d, 0x01, 0x26, 0x2c, 0x04, 0x6c, 0x81, 0x15, 0x64, 0x69, 0x73, 0x74, 0x10,
            0x72, 0x69, 0x62, 0x75, 0x81, 0x0b, 0x20, 0x61, 0x73, 0x04, 0x20, 0x64, 0x01, 0x39,
            0x65, 0x64, 0x20, 0x62, 0x79, 0x88, 0x20, 0x53, 0x65, 0x82, 0x16, 0x73, 0x20, 0x31,
            0x80, 0x2f, 0x00, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x39, 0x20, 0x14, 0x6f, 0x66,
            0x00, 0x06, 0x69, 0x80, 0x13, 0x6f, 0x63, 0x75, 0x90, 0x6d, 0x65, 0x6e, 0x74, 0x8d,
            0x4b, 0x6f, 0x72, 0x0e, 0x4c, 0x00, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
            0x00, 0x74, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x20, 0x03, 0x00, 0x49, 0x00, 0x1c,
            0x69, 0x74, 0x79, 0x20, 0x61, 0x75, 0xc0, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x82,
            0x37, 0x04, 0x4a, 0x83, 0x01, 0x65, 0x8d, 0x18, 0x74, 0x68, 0x61, 0x74, 0x20, 0x00,
            0x3a, 0x00, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x07, 0x00, 0x41, 0x46,
            0x76, 0x08, 0x20, 0x65, 0x67, 0x61, 0x6c, 0x20, 0x92, 0x45, 0x40, 0x08, 0x74, 0x79,
            0x0e, 0x21, 0x75, 0x6e, 0x81, 0x78, 0xf1, 0x42, 0x2f, 0x65, 0x20, 0x61, 0x00, 0x36,
            0x40, 0x11, 0x45, 0x21, 0x80, 0x4c, 0x4b, 0x40, 0x52, 0xc4, 0x1f, 0x6f, 0x00, 0x20,
            0x72, 0x20, 0x82, 0x06, 0x69, 0x1c, 0x65, 0x73, 0x40, 0x1a, 0x80, 0x1e, 0x00, 0x54,
            0x74, 0x72, 0x6f, 0xc0, 0x6c, 0x2c, 0x20, 0x61, 0x72, 0x65, 0x41, 0x57, 0x01, 0x03,
            0x1a, 0x6c, 0x02, 0x2d, 0x2c, 0x41, 0x33, 0x41, 0x05, 0x75, 0x6e, 0x64, 0x81, 0x80,
            0x36, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x12, 0xc1, 0x44, 0x0d, 0x20, 0x77,
            0x69, 0x74, 0x68, 0xc3, 0x11, 0x03, 0x1c, 0x18, 0x2e, 0x20, 0x46, 0x80, 0x40, 0xc1,
            0x39, 0x70, 0x75, 0x72, 0x78, 0x70, 0x6f, 0x73, 0x40, 0x19, 0x46, 0x55, 0x06, 0x7c,
            0xc5, 0x68, 0x22, 0x05, 0x44, 0x11, 0x22, 0x02, 0x7a, 0x73, 0x20, 0x28, 0x69, 0x29,
            0x01, 0xc0, 0x12, 0x65, 0x20, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x60, 0x2c, 0x20, 0x64,
            0x69, 0x72, 0x40, 0x69, 0x01, 0x21, 0x69, 0x03, 0xc0, 0x7c, 0xc1, 0x02, 0x2c, 0x20,
            0x74, 0x6f, 0x20, 0x63, 0x3e, 0x61, 0x00, 0x7d, 0xc1, 0x09, 0x84, 0x22, 0x83, 0x09,
            0x42, 0x40, 0x72, 0x20, 0xc0, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x01, 0x6f, 0x41,
            0x73, 0x10, 0x73, 0x75, 0x63, 0x68, 0x83, 0x3b, 0x79, 0x2c, 0x20, 0xf8, 0x77, 0x68,
            0x65, 0x82, 0x3f, 0x40, 0x7f, 0xc2, 0x1d, 0x00, 0x4a, 0xc0, 0x16, 0x33, 0x04, 0x11,
            0x42, 0x46, 0x77, 0x69, 0x41, 0x93, 0xc0, 0x2f, 0x28, 0x69, 0x43, 0x40, 0x22, 0x02,
            0x74, 0x73, 0x68, 0x69, 0x70, 0x41, 0x12, 0x66, 0x44, 0x69, 0x66, 0xc0, 0x74, 0x70,
            0x65, 0x72, 0x40, 0xdc, 0x74, 0x40, 0x20, 0x28, 0x35, 0x30, 0x25, 0x29, 0x01, 0x26,
            0x6d, 0x0e, 0x6f, 0x00, 0x4d, 0x03, 0x5e, 0x05, 0x12, 0x75, 0x74, 0x73, 0x74, 0xc7,
            0x00, 0x9f, 0x41, 0x72, 0x00, 0xb1, 0x72, 0x65, 0x73, 0x82, 0x51, 0x40, 0x14, 0x91,
            0x80, 0x14, 0x62, 0x65, 0x6e, 0x00, 0x41, 0x63, 0x69, 0x80, 0x72, 0x07, 0x4a, 0x17,
            0xc8, 0x29, 0x87, 0x7c, 0x59, 0x6f, 0x75, 0x22, 0x20, 0x8a, 0x28, 0xa0, 0x11, 0x22,
            0x20, 0x01, 0x72, 0x22, 0x29, 0x69, 0x62, 0x43, 0xc0, 0x62, 0x61, 0x22, 0x76, 0x69,
            0x64, 0x75, 0x61, 0x09, 0x72, 0x4c, 0x20, 0x4c, 0xe8, 0x43, 0x24, 0x11, 0x65, 0x78,
            0xa0, 0x15, 0x69, 0x46, 0x73, 0x01, 0x11, 0xe0, 0x16, 0x6d, 0x69, 0x73, 0x01, 0x81,
            0x73, 0x7e, 0x20, 0xe2, 0x4c, 0xe2, 0x3b, 0x60, 0x28, 0xe0, 0x4e, 0x44, 0x6e, 0xe7,
            0x0e, 0x53, 0x54, 0x6f, 0x75, 0xa0, 0x1c, 0x22, 0xc1, 0x6b, 0x6d, 0xed, 0x70, 0x70,
            0xc0, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0xc0, 0x07, 0x80, 0x6f, 0x22, 0x6d, 0x22,
            0x70, 0x6d, 0x61, 0x6b, 0x41, 0x0c, 0x6d, 0x6f, 0x40, 0x64, 0x69, 0x66, 0x69, 0x63,
            0x61, 0x61, 0x6d, 0x73, 0x81, 0x05, 0x3c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0xc1,
            0x03, 0x01, 0x80, 0x70, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6c, 0x69, 0x18, 0x6d, 0x69,
            0x74, 0xc0, 0x07, 0xe0, 0x38, 0x73, 0x6f, 0x66, 0x34, 0x74, 0x77, 0xc1, 0x4b, 0x73,
            0x02, 0x0e, 0x60, 0x4f, 0x64, 0x65, 0xff, 0x80, 0x3e, 0x64, 0x6f, 0x02, 0x09, 0x24,
            0x19, 0x03, 0x04, 0x20, 0x54, 0x80, 0x59, 0x40, 0x37, 0x20, 0x66, 0x69, 0x67, 0x75,
            0x72, 0xe2, 0x03, 0x20, 0x66, 0x88, 0x69, 0x6c, 0x65, 0xc8, 0x87, 0x4f, 0x62, 0x6a,
            0x20, 0x46, 0x31, 0x4f, 0x17, 0x61, 0x6e, 0x79, 0xc3, 0x19, 0xc0, 0x31, 0x75, 0x6c,
            0x21, 0xa2, 0x6c, 0x66, 0x72, 0x6f, 0x6d, 0xc0, 0x4e, 0x63, 0x68, 0x54, 0x61, 0x6e,
            0xa0, 0x16, 0x6c, 0x24, 0x0d, 0x74, 0x80, 0x70, 0x73, 0x2f, 0x41, 0x1b, 0xc3, 0x0b,
            0x80, 0x2f, 0x22, 0x02, 0x6c, 0xc4, 0x01, 0x66, 0x20, 0xcc, 0x61, 0x20, 0xc3, 0x23,
            0xc2, 0x09, 0x2c, 0x20, 0x0a, 0x1c, 0x64, 0x08, 0x8b, 0xcc, 0x1c, 0xc0, 0x66, 0x70,
            0xa0, 0x14, 0x64, 0x20, 0x6f, 0x82, 0x13, 0xdd, 0xc4, 0x1c, 0x67, 0x20, 0x41, 0x60,
            0x18, 0x20, 0x21, 0x64, 0x09, 0x1e, 0x05, 0x27, 0x9b, 0xa1, 0x97, 0x20, 0x1d, 0x76,
            0xa3, 0xb7, 0x20, 0x75, 0x6f, 0x20, 0x63, 0x77, 0x00, 0x6d, 0x65, 0x64, 0x69, 0x61,
            0x20, 0x74, 0x79, 0x42, 0x70, 0xc9, 0x1e, 0x57, 0x6f, 0x72, 0x6b, 0x8e, 0x82, 0x77,
            0x9f, 0x80, 0x02, 0x21, 0x57, 0xe3, 0x90, 0xe1, 0x58, 0x47, 0x60, 0x69, 0x6e, 0xc5,
            0x18, 0x1c, 0x6f, 0x72, 0xa4, 0x16, 0x43, 0x27, 0xc4, 0x1a, 0x6d, 0x61, 0x64, 0x01,
            0x00, 0x89, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0xbc, 0x65, 0x20, 0xe3, 0x7f,
            0x81, 0x7a, 0x84, 0x45, 0x40, 0x31, 0x73, 0x60, 0x1f, 0xee, 0x64, 0xe1, 0x3d, 0x40,
            0x18, 0x20, 0x6a, 0x61, 0xc4, 0x08, 0xa7, 0x9b, 0xc0, 0x20, 0x7f, 0x60, 0xc6, 0x60,
            0x4c, 0xc3, 0x9b, 0x23, 0x25, 0x80, 0x05, 0x60, 0x0f, 0xc0, 0x2a, 0x61, 0xf4, 0x74,
            0x74, 0x41, 0xd8, 0x64, 0x01, 0x7a, 0x01, 0x0b, 0xa1, 0x15, 0x44, 0x08, 0x82, 0x28,
            0x80, 0x5b, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x20, 0x0f, 0x1f, 0xe0, 0x53, 0x40, 0xbb,
            0xc0, 0x5c, 0x03, 0x07, 0x21, 0x05, 0x41, 0x70, 0x70, 0x02, 0x65, 0xc0, 0x81, 0x78,
            0x20, 0x62, 0x65, 0x6c, 0x6f, 0x04, 0x77, 0x29, 0xe7, 0x56, 0x44, 0x65, 0x72, 0x69,
            0x76, 0xd1, 0x00, 0x35, 0x76, 0x65, 0x20, 0x01, 0x22, 0x73, 0x2a, 0x22, 0x21, 0x40,
            0xfb, 0x61, 0x0c, 0x73, 0x20, 0x20, 0xa3, 0x1f, 0x04, 0x10, 0xe1, 0x3f, 0x20, 0x8d,
            0xe4, 0xb2, 0x78, 0x62, 0x61, 0x73, 0x80, 0x0f, 0x40, 0xe8, 0x41, 0x71, 0xe0, 0xa0,
            0x69, 0xfe, 0x76, 0xc0, 0x01, 0xa1, 0x47, 0x63, 0x95, 0x41, 0x0d, 0x02, 0xd3, 0xa0,
            0x06, 0x40, 0x8c, 0xde, 0x69, 0x00, 0x8e, 0xa0, 0x14, 0x24, 0x09, 0x80, 0x35, 0x74,
            0x60, 0xc0, 0x40, 0x74, 0x48, 0x72, 0x65, 0x76, 0x40, 0x71, 0x6f, 0x6e, 0xa0, 0x81,
            0x61, 0xae, 0x6e, 0x40, 0x23, 0x02, 0x4a, 0x80, 0x01, 0x65, 0x20, 0x2c, 0x6f, 0x83,
            0x59, 0x3f, 0xa0, 0x01, 0x00, 0x23, 0xc4, 0x3c, 0xd9, 0x34, 0xc4, 0x04, 0x51, 0x6e,
            0x65, 0x73, 0xcb, 0x60, 0x56, 0xd2, 0x17, 0x61, 0xc0, 0x06, 0x6f, 0x6c, 0x00, 0x33,
            0xd0, 0x12, 0xf1, 0x20, 0x06, 0x67, 0x69, 0x6e, 0x50, 0x06, 0x11, 0x0e, 0x3b, 0x1f,
            0xff, 0x58, 0x7f, 0xd4, 0x04, 0x55, 0x59, 0x16, 0x1d, 0xed, 0x13, 0xa4, 0x3f, 0xb0,
            0x0a, 0x54, 0x2e, 0x65, 0x06, 0x20, 0xe1, 0x05, 0x54, 0x63, 0x72, 0x65, 0x6d, 0x61,
            0x69, 0xc1, 0xc5, 0x60, 0x73, 0x65, 0x70, 0x61, 0x72, 0x92, 0x22, 0x71, 0x11, 0x81,
            0xf2, 0x4e, 0x6d, 0x65, 0x72, 0x65, 0x6c, 0x79, 0xe0, 0x3e, 0x34, 0x6e, 0x6b, 0x32,
            0x4c, 0x62, 0xe0, 0x4a, 0x71, 0x77, 0x6e, 0x61, 0xd4, 0x6d, 0x65, 0x80, 0x13, 0x6f,
            0x70, 0x21, 0x65, 0x70, 0x05, 0x70, 0x7d, 0xf8, 0x66, 0x61, 0x63, 0x42, 0x62, 0xa5,
            0x2f, 0x31, 0x1e, 0x46, 0x15, 0x4e, 0x09, 0x21, 0xd0, 0x01, 0x72, 0x65, 0x6f, 0x66,
            0x57, 0x1f, 0x43, 0x6f, 0xfc, 0x6e, 0x74, 0x35, 0x7e, 0x1f, 0x1f, 0x3f, 0x30, 0xc4,
            0x0c, 0x30, 0x49, 0x84, 0x10, 0xff, 0xf1, 0x06, 0x06, 0x14, 0x04, 0x37, 0x31, 0x14,
            0x71, 0x01, 0x76, 0x08, 0xe1, 0x23, 0x1a, 0x4e, 0xf9, 0xc1, 0x5f, 0x61, 0x64, 0x94,
            0x88, 0x95, 0x04, 0x51, 0x0d, 0xd0, 0x2e, 0x52, 0x03, 0x4b, 0xa0, 0x1c, 0xcf, 0x0b,
            0x68, 0x50, 0x11, 0x6f, 0x66, 0xb7, 0x25, 0x69, 0x94, 0x6e, 0x74, 0x61, 0x73, 0x6f,
            0xb0, 0x1b, 0x6c, 0x79, 0x54, 0x04, 0xf8, 0x73, 0x75, 0x62, 0x20, 0x52, 0x34, 0x52,
            0xd3, 0x19, 0xb0, 0x04, 0xd1, 0x25, 0xff, 0x22, 0x34, 0xd2, 0x9c, 0x30, 0x34, 0xe6,
            0x09, 0xc0, 0x37, 0xb1, 0x00, 0x6c, 0x85, 0xc4, 0x04, 0x4b, 0x90, 0x03, 0xc1, 0x39,
            0x6e, 0x50, 0x0f, 0x64, 0x69, 0xdf, 0x62, 0x74, 0x97, 0x8c, 0x8a, 0x51, 0x59, 0xe2,
            0x07, 0x20, 0xf0, 0x2e, 0x62, 0x65, 0x30, 0x98, 0xee, 0x66, 0xa0, 0x10, 0xb4, 0x04,
            0x5f, 0x06, 0x72, 0xdf, 0x25, 0x93, 0x13, 0x60, 0x3b, 0xa3, 0xb2, 0x96, 0x82, 0x9a,
            0x2c, 0x20, 0x22, 0x36, 0x0d, 0x22, 0xb4, 0x04, 0x4f, 0x81, 0x9d, 0xf1, 0x9c, 0x64,
            0x59, 0xc0, 0x28, 0x65, 0x6c, 0x90, 0x5b, 0x72, 0x92, 0x6f, 0xc0, 0x58, 0x2c, 0x20,
            0x50, 0x18, 0x62, 0x61, 0x10, 0x89, 0x61, 0xd0, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x30,
            0x12, 0x50, 0x53, 0x6d, 0xf6, 0x6d, 0x60, 0x8e, 0xf3, 0x65, 0x20, 0x51, 0x30, 0x55,
            0x09, 0xa3, 0x24, 0x86, 0x12, 0xf1, 0x30, 0x03, 0x69, 0x74, 0x73, 0x22, 0xa1, 0xc2,
            0x32, 0x02, 0x41, 0xa0, 0x35, 0xff, 0xf3, 0x47, 0xaf, 0x68, 0x11, 0x48, 0xa4, 0x04,
            0x01, 0x8e, 0x37, 0x06, 0x10, 0x10, 0x37, 0x09, 0xe9, 0x70, 0x85, 0x69, 0x6c, 0xc1,
            0x03, 0x6c, 0x20, 0xa5, 0xd0, 0x04, 0x28, 0x6b, 0x03, 0xa0, 0x09, 0x10, 0x28, 0x6f,
            0x6c, 0x20, 0x73, 0x79, 0x73, 0x38, 0x74, 0x65, 0x6d, 0xb6, 0x6f, 0x21, 0x5c, 0x30,
            0x77, 0x75, 0x65, 0xfa, 0x20, 0x20, 0x64, 0x63, 0x32, 0x72, 0x14, 0x02, 0x33, 0x51,
            0x91, 0x6f, 0xd3, 0x8a, 0xef, 0x01, 0xa9, 0x42, 0x33, 0x49, 0x17, 0x41, 0x22, 0x65,
            0x84, 0x09, 0x5a, 0x20, 0x61, 0x18, 0xe7, 0xb4, 0x95, 0xc1, 0x16, 0x30, 0xae, 0x63,
            0x75, 0xa0, 0x7d, 0x20, 0x9f, 0x12, 0x07, 0x9e, 0x6d, 0xf2, 0x52, 0xd0, 0x00, 0x71,
            0x02, 0x91, 0x28, 0x2c, 0x20, 0xb0, 0x77, 0x79, 0x84, 0x04, 0x65, 0x78, 0xf5, 0x78,
            0xbb, 0x0e, 0x35, 0xa8, 0x20, 0x67, 0x73, 0x80, 0x70, 0x69, 0x63, 0x75, 0x6f, 0x75,
            0x73, 0xc0, 0x3b, 0x70, 0x6d, 0x61, 0x72, 0x6b, 0xa1, 0x4f, 0x50, 0xad, 0xc0, 0x04,
            0x72, 0x03, 0xd1, 0x91, 0x74, 0x04, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0xde, 0x61,
            0x41, 0x2a, 0xa0, 0x28, 0x31, 0x1a, 0x82, 0x15, 0x79, 0x52, 0x3d, 0x9c, 0x28, 0x49,
            0x81, 0xb7, 0x22, 0x4e, 0xa0, 0x7f, 0x61, 0x20, 0xb9, 0x3a, 0x2e, 0xf4, 0x22, 0x0a,
            0xc4, 0x04, 0x22, 0x66, 0x01, 0xfc, 0xb5, 0x66, 0x0f, 0x81, 0x0d, 0xbf, 0x11, 0x38,
            0x2f, 0x8f, 0x25, 0xb1, 0xa4, 0x04, 0x09, 0x14, 0xf1, 0x51, 0x6d, 0xf0, 0x7a, 0x09,
            0x49, 0x07, 0x20, 0x68, 0x50, 0xc0, 0x62, 0x65, 0x65, 0x6e, 0xf9, 0xf0, 0x21, 0x63,
            0x65, 0x92, 0x5c, 0xe0, 0x31, 0x79, 0x06, 0x84, 0x04, 0x00, 0x2b, 0x70, 0x73, 0x65,
            0x71, 0x75, 0xc0, 0x39, 0x70, 0x10, 0xa0, 0x23, 0x6f, 0x1f, 0xb0, 0xac, 0xe3, 0x7a,
            0x01, 0xaf, 0xe8, 0x37, 0x83, 0x48, 0x32, 0x2e, 0x20, 0x36, 0x47, 0xe1, 0xbb, 0x01,
            0x19, 0x43, 0x16, 0xc1, 0x73, 0x05, 0x65, 0x2e, 0x78, 0x20, 0x53, 0x75, 0xa3, 0x7f,
            0xe0, 0x35, 0x51, 0x19, 0xcf, 0xcc, 0x6e, 0x66, 0x73, 0x90, 0x03, 0xa4, 0x07, 0x74,
            0x68, 0xd0, 0x33, 0xa4, 0x03, 0x2c, 0xfc, 0x20, 0x65, 0x50, 0x72, 0x77, 0x13, 0xc0,
            0x2d, 0x21, 0x44, 0x30, 0x0b, 0x52, 0x9c, 0x8f, 0x72, 0x81, 0xc0, 0xa1, 0x50, 0x0e,
            0x10, 0x9e, 0x70, 0x65, 0x74, 0xc0, 0xa0, 0x43, 0x65, 0x54, 0xb0, 0x5a, 0x6c, 0x64,
            0x77, 0x69, 0x21, 0x95, 0x6e, 0xa8, 0x6f, 0x6e, 0x2d, 0x92, 0x1f, 0x73, 0x10, 0x0f,
            0x2c, 0x60, 0x98, 0x12, 0x2d, 0x50, 0x8f, 0x72, 0x67, 0xb0, 0x63, 0x72, 0x6f, 0x79,
            0x00, 0x61, 0x6c, 0x74, 0x79, 0x2d, 0x66, 0x72, 0x65, 0xc5, 0xd0, 0x00, 0x69, 0x80,
            0x9d, 0x76, 0x6f, 0x63, 0x81, 0x5c, 0xb4, 0x08, 0x7f, 0xa7, 0x1c, 0xf4, 0xdf, 0xe1,
            0x7a, 0xd5, 0xd6, 0x10, 0x03, 0xe0, 0xa0, 0x90, 0x5f, 0x65, 0x8f, 0xb0, 0xdc, 0xab,
            0x77, 0xd0, 0x0c, 0x75, 0x08, 0x70, 0x75, 0x62, 0xb0, 0x03, 0x81, 0x50, 0x14, 0x64,
            0x69, 0x73, 0x70, 0x6c, 0x61, 0x70, 0xb8, 0xc7, 0x16, 0x01, 0x30, 0x0b, 0x60, 0x4d,
            0x6d, 0x2c, 0x20, 0xd0, 0x16, 0xf4, 0x05, 0x9f, 0xa0, 0x6d, 0x30, 0x9e, 0xa0, 0x02,
            0x33, 0x5d, 0xb0, 0x33, 0x68, 0x65, 0xb4, 0x08, 0xff, 0x52, 0x55, 0x91, 0x20, 0xc2,
            0xb2, 0xbe, 0x55, 0x30, 0x19, 0x94, 0x99, 0x40, 0x12, 0xc8, 0x8c, 0x95, 0x03, 0x1a,
            0x33, 0x08, 0x1a, 0x50, 0x70, 0x2b, 0x6e, 0x74, 0xc5, 0xf3, 0x5f, 0xdf, 0x19, 0xaf,
            0xe6, 0xdf, 0x19, 0x72, 0xf7, 0xdf, 0x19, 0x20, 0xdf, 0x19, 0x6f, 0x3a, 0x75, 0xdf,
            0x19, 0x20, 0x91, 0x74, 0xdf, 0x19, 0xd5, 0x19, 0x0e, 0xb8, 0x00, 0x63, 0x68, 0x61,
            0x72, 0x67, 0x65, 0x2c, 0x20, 0x00, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x2d,
            0x08, 0x66, 0x72, 0x65, 0x00, 0x68, 0x69, 0x72, 0x72, 0x65, 0x00, 0x76, 0x6f, 0x63,
            0x61, 0x62, 0x6c, 0x65, 0x0a, 0x02, 0x20, 0x02, 0x00, 0x28, 0x65, 0x78, 0x63, 0x65,
            0x70, 0x00, 0x74, 0x20, 0x61, 0x73, 0x20, 0x73, 0x74, 0x61, 0x00, 0x74, 0x65, 0x64,
            0x20, 0x69, 0x6e, 0x20, 0x74, 0x04, 0x68, 0x69, 0x00, 0x38, 0x65, 0x63, 0x74, 0x69,
            0x6f, 0x10, 0x6e, 0x29, 0x20, 0x70, 0x00, 0x2c, 0x6e, 0x74, 0x20, 0x00, 0x6c, 0x69,
            0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x40, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6b, 0x00,
            0x98, 0x68, 0x88, 0x61, 0x76, 0x65, 0x00, 0x14, 0x64, 0x65, 0x2c, 0x04, 0x96, 0x04,
            0x75, 0x73, 0x00, 0x2a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x81, 0x01, 0x48, 0x73, 0x65,
            0x6c, 0x6c, 0x2c, 0x20, 0x03, 0x05, 0x00, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2c,
            0x20, 0x00, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x08, 0x72, 0x77, 0x69,
            0x01, 0x49, 0x72, 0x61, 0x6e, 0x73, 0x01, 0x02, 0x2d, 0x68, 0x65, 0x20, 0x57, 0x6f,
            0x72, 0x6b, 0x05, 0x05, 0x48, 0x77, 0x00, 0x21, 0x65, 0x20, 0x73, 0x75, 0x63, 0x02,
            0x68, 0x06, 0x75, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x40, 0x73, 0x20, 0x6f, 0x6e,
            0x6c, 0x79, 0x01, 0x5d, 0x74, 0x0c, 0x68, 0x6f, 0x00, 0x41, 0x04, 0x9a, 0x63, 0x6c,
            0x61, 0x69, 0x4c, 0x6d, 0x73, 0x04, 0x2b, 0x08, 0xdc, 0x62, 0x79, 0x03, 0x22, 0x43,
            0x00, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x12, 0x6f, 0x80, 0x4c, 0x68,
            0x61, 0x80, 0x76, 0x72, 0x65, 0x20, 0x00, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61,
            0x72, 0x02, 0x69, 0x00, 0x28, 0x69, 0x6e, 0x66, 0x72, 0x69, 0x6e, 0xce, 0x67, 0x80,
            0x7e, 0x00, 0x19, 0x80, 0x4f, 0x69, 0x72, 0x04, 0x69, 0x86, 0x1c, 0x01, 0x80, 0x84,
            0x28, 0x73, 0x29, 0x20, 0x61, 0x6c, 0x6f, 0x18, 0x6e, 0x65, 0x20, 0x00, 0x23, 0x80,
            0x13, 0x63, 0x6f, 0x6d, 0x10, 0x62, 0x69, 0x6e, 0x61, 0x01, 0x92, 0x20, 0x6f, 0x66,
            0x61, 0x00, 0x9a, 0x65, 0x69, 0x72, 0x20, 0x0c, 0x18, 0x04, 0x23, 0x77, 0x38, 0x69,
            0x74, 0x68, 0x01, 0x10, 0x82, 0x72, 0x01, 0x5f, 0x77, 0x68, 0x2e, 0x69, 0x00, 0x6e,
            0x82, 0x70, 0x0d, 0x31, 0x77, 0x01, 0xc5, 0x75, 0x62, 0x08, 0x6d, 0x69, 0x74, 0x80,
            0xc6, 0x2e, 0x20, 0x49, 0x66, 0x10, 0x20, 0x59, 0x6f, 0x75, 0x84, 0x23, 0x69, 0x6e,
            0x73, 0x40, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x07, 0xca, 0x74, 0xc4, 0x69, 0x67,
            0x03, 0x41, 0x61, 0x67, 0x61, 0x01, 0x0f, 0x80, 0xb1, 0x10, 0x79, 0x20, 0x65, 0x6e,
            0x00, 0x13, 0x79, 0x20, 0x28, 0x40, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x40, 0x36,
            0x20, 0x02, 0x61, 0x44, 0x10, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x2d, 0x03, 0x02, 0x4c,
            0x81, 0x31, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x06, 0x72, 0xc3, 0x03, 0x40, 0x7e,
            0x61, 0x20, 0x6c, 0x61, 0x77, 0x10, 0x73, 0x75, 0x69, 0x74, 0x81, 0x3a, 0x6c, 0x65,
            0x67, 0x7d, 0x81, 0x0e, 0x74, 0x41, 0x4c, 0x00, 0x45, 0x02, 0x2f, 0x84, 0x11, 0x40,
            0x40, 0x61, 0xe3, 0xca, 0x3a, 0x80, 0x8d, 0x63, 0x6f, 0x72, 0x40, 0x79, 0xc2, 0x90,
            0xc1, 0x3b, 0x23, 0xc2, 0x91, 0xc3, 0x75, 0x20, 0x63, 0x6f, 0x05, 0x2e, 0x73, 0x20,
            0x78, 0x64, 0x69, 0x72, 0x40, 0x96, 0xc7, 0x11, 0xc0, 0x06, 0x05, 0x67, 0x79, 0xab,
            0x85, 0x35, 0xc5, 0x63, 0x6d, 0x00, 0x32, 0x2c, 0x01, 0x4e, 0x6e, 0x82, 0x35, 0xf5,
            0x4b, 0xa2, 0x73, 0xc4, 0x10, 0x67, 0x80, 0x91, 0x01, 0xae, 0x00, 0xa6, 0x40, 0x4a,
            0xb0, 0x20, 0x75, 0x6e, 0x64, 0x01, 0xa0, 0x81, 0xb0, 0x4c, 0x84, 0xac, 0x0e, 0x66,
            0x80, 0x2b, 0x42, 0x31, 0x01, 0x99, 0x20, 0x73, 0x68, 0x61, 0xe8, 0x6c, 0x6c, 0x20,
            0x40, 0x3d, 0x6d, 0x41, 0x6f, 0x05, 0xc2, 0x40, 0x5d, 0x79, 0x03, 0x71, 0x20, 0x64,
            0x80, 0x30, 0x05, 0x9f, 0x46, 0x57, 0x00, 0xc4, 0x66, 0x40, 0x69, 0x6c, 0x65, 0x64,
            0x2e, 0x0a, 0x41, 0x1d, 0x34, 0x80, 0x2e, 0x20, 0x52, 0x65, 0x64, 0x69, 0x73, 0x03,
            0x2e, 0x0d, 0xc0, 0x86, 0x2e, 0x01, 0x69, 0x00, 0xc3, 0x79, 0x20, 0x72, 0x65, 0x80,
            0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x40, 0x2c, 0xd6, 0x64, 0x00, 0x3b, 0xc4,
            0x08, 0x65, 0xc0, 0x40, 0x70, 0x02, 0xb0, 0x42, 0x8a, 0x07, 0x84, 0x2e, 0xc2, 0x23,
            0x00, 0x27, 0x44, 0x65, 0x72, 0x69, 0x76, 0x97, 0x80, 0x71, 0x00, 0xd4, 0x81, 0x04,
            0x73, 0x81, 0x3c, 0x72, 0x65, 0xc0, 0x23, 0x21, 0x81, 0x64, 0x6e, 0x79, 0x20, 0x6d,
            0x00, 0x1b, 0x75, 0x6d, 0x1c, 0x2c, 0x20, 0xc2, 0x91, 0xc0, 0x0b, 0xc1, 0x01, 0x6f,
            0x75, 0x74, 0x01, 0x44, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x0d, 0x82,
            0x81, 0x73, 0x03, 0xd9, 0xc0, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0xa3, 0xa0, 0x10, 0xa0,
            0x05, 0x4f, 0x62, 0x6a, 0x20, 0x2e, 0x20, 0xa0, 0x20, 0xe3, 0x40, 0x08, 0xa0, 0x13,
            0x76, 0x69, 0x64, 0x20, 0x5d, 0x02, 0x22, 0x47, 0x4b, 0x30, 0x6d, 0x65, 0x65, 0x74,
            0xc1, 0x0e, 0xc0, 0x04, 0x6c, 0x6c, 0x4c, 0x6f, 0x77, 0x01, 0x3f, 0x20, 0x33, 0x64,
            0x69, 0xc1, 0x5b, 0x73, 0x46, 0x3a, 0xa2, 0x1e, 0x00, 0x86, 0x28, 0x61, 0x29, 0x23,
            0x1d, 0x75, 0xa0, 0x73, 0x74, 0x20, 0x67, 0x69, 0xe0, 0x15, 0x61, 0xc0, 0x13, 0x93,
            0x42, 0x7a, 0x20, 0x1f, 0x63, 0x69, 0x40, 0x1c, 0x6e, 0x74, 0xa0, 0x74, 0xbb, 0x82,
            0x1c, 0xa3, 0x5d, 0x6f, 0x65, 0x69, 0xe1, 0x8d, 0x0e, 0x1d, 0x61, 0xe1, 0x22, 0x6e,
            0x79, 0xe3, 0x67, 0x60, 0x2c, 0x24, 0x36, 0x3b, 0x81, 0x27, 0x66, 0x0e, 0x62, 0xf9,
            0x68, 0x0e, 0x63, 0x61, 0xa0, 0x8c, 0xa0, 0x03, 0x60, 0x22, 0xa2, 0x1e, 0x00, 0x19,
            0x03, 0xe1, 0x32, 0x20, 0x26, 0x6f, 0x20, 0x63, 0x61, 0x72, 0x72, 0x19, 0x40, 0x48,
            0x72, 0x6f, 0x00, 0x3b, 0x00, 0x47, 0x20, 0x6e, 0x6f, 0xfe, 0x74, 0x00, 0x40, 0xc5,
            0x44, 0xc1, 0x0f, 0x41, 0x9c, 0x46, 0x5a, 0x81, 0x45, 0xc0, 0xa4, 0x2f, 0xc2, 0x7e,
            0xc1, 0x5b, 0xe2, 0x08, 0x2b, 0x0f, 0x63, 0x28, 0x0f, 0x72, 0x65, 0xca, 0x74, 0x00,
            0x6c, 0x2c, 0xe3, 0xa3, 0x65, 0x20, 0xc4, 0x2b, 0x81, 0x2a, 0xff, 0xa1, 0x17, 0xc1,
            0x20, 0x8d, 0x1b, 0xc4, 0x33, 0x01, 0x0f, 0x85, 0x2d, 0x08, 0x42, 0x00, 0x35, 0x01,
            0xc0, 0x50, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x0e, 0x68, 0x80, 0xa3, 0xa3,
            0x5b, 0xc0, 0x5d, 0x72, 0x61, 0x64, 0x65, 0x3c, 0x6d, 0x61, 0xc0, 0xa1, 0xa2, 0x20,
            0xc1, 0x07, 0x63, 0x00, 0x61, 0x74, 0xf3, 0xe6, 0x4d, 0x65, 0x1b, 0x20, 0x66, 0xa0,
            0x1d, 0xc2, 0x36, 0xec, 0x11, 0xe5, 0x75, 0xff, 0x45, 0xaa, 0x21, 0x08, 0x40, 0xbd,
            0xa4, 0x81, 0xa3, 0xa7, 0xe4, 0x23, 0xc0, 0x07, 0x40, 0xa2, 0x84, 0x64, 0x6f, 0x61,
            0x0a, 0x20, 0x70, 0x65, 0x72, 0xc1, 0x1c, 0xc3, 0x61, 0x94, 0x41, 0x1a, 0x70, 0x61,
            0x72, 0x74, 0xc0, 0x1b, 0x2a, 0x19, 0xcc, 0x65, 0x20, 0x0d, 0x1d, 0x8b, 0x26, 0x64,
            0x29, 0x81, 0x96, 0x05, 0x10, 0x07, 0x01, 0x83, 0xa0, 0x0e, 0x40, 0xb7, 0x61, 0x20,
            0x22, 0x4e, 0x4f, 0x20, 0x54, 0x49, 0x43, 0x45, 0x22, 0x80, 0x6f, 0x78, 0x74, 0x8e,
            0x20, 0xe1, 0x2d, 0xe1, 0xce, 0x64, 0x0c, 0x20, 0x69, 0x74, 0x49, 0x35, 0xff, 0xa9,
            0x6b, 0x48, 0x80, 0x4d, 0x0f, 0x83, 0x17, 0x41, 0x39, 0x06, 0x06, 0x80, 0xd2, 0xa0,
            0x53, 0xcf, 0x48, 0x16, 0xa3, 0xa0, 0x00, 0x72, 0x40, 0x54, 0x61, 0x64, 0xe1, 0xc3,
            0x88, 0x4e, 0xcf, 0xc0, 0x02, 0xd0, 0x2a, 0x81, 0x92, 0xa0, 0x3d, 0x65, 0x64, 0xc8,
            0x08, 0x81, 0x6e, 0x0f, 0xe0, 0x6a, 0x82, 0xb6, 0x03, 0x19, 0x42, 0x18, 0x2c, 0x20,
            0x65, 0x78, 0xff, 0xa5, 0xac, 0xf6, 0x2a, 0xc8, 0x08, 0x33, 0x2c, 0xe0, 0x18, 0xef,
            0x2a, 0x82, 0x4d, 0x60, 0x33, 0x78, 0x6c, 0x65, 0x61, 0xc0, 0x6d, 0x20, 0xcf, 0xc8,
            0x08, 0x84, 0x95, 0x66, 0xa2, 0x6f, 0xa5, 0x75, 0x70, 0x6c, 0x61, 0x00, 0xda, 0x3a,
            0x62, 0x84, 0xc9, 0xc0, 0x14, 0x61, 0x20, 0x34, 0x0a, 0x74, 0x65, 0xb5, 0x16, 0x17,
            0x12, 0xff, 0x69, 0x0d, 0x80, 0x4f, 0x15, 0x18, 0x31, 0x1b, 0xbf, 0x1d, 0x74, 0x0f,
            0xc1, 0x01, 0x4a, 0x26, 0xe1, 0x79, 0x3d, 0x64, 0x6f, 0x63, 0x75, 0xc1, 0x5a, 0x32,
            0x48, 0x60, 0x0b, 0x6c, 0x66, 0x20, 0x76, 0x46, 0x21, 0x73, 0x67, 0x93, 0x4b, 0xff,
            0x05, 0x6b, 0xdc, 0x73, 0x3b, 0x60, 0x68, 0x49, 0x2a, 0xd4, 0x06, 0x61, 0x91, 0x32,
            0x20, 0x0d, 0x80, 0x79, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0xbf, 0xb3,
            0x79, 0xde, 0x27, 0xe2, 0x06, 0x90, 0x85, 0xc8, 0x11, 0x02, 0x84, 0x76, 0x60, 0x60,
            0xa3, 0xc2, 0x1a, 0xe0, 0x8c, 0x72, 0x64, 0x2d, 0x41, 0x0e, 0x79, 0x76, 0x33, 0x90,
            0x6e, 0x6f, 0x72, 0x6d, 0x60, 0x60, 0x79, 0x20, 0x80, 0x85, 0xc0, 0x65, 0x61, 0x72,
            0x2e, 0x20, 0x54, 0x30, 0x88, 0x51, 0x1f, 0xcf, 0x80, 0x43, 0x69, 0x28, 0x64, 0x16,
            0xf8, 0x1e, 0x20, 0x61, 0xc0, 0x83, 0x60, 0x3f, 0x07, 0x80, 0x2d, 0xc1, 0x3f, 0x12,
            0x0f, 0x61, 0x6c, 0x20, 0x70, 0x75, 0xfd, 0xd0, 0x6f, 0x73, 0x15, 0x8a, 0xeb, 0x08,
            0xb4, 0x35, 0x72, 0x5a, 0xd0, 0x8b, 0x90, 0x06, 0x23, 0x74, 0x4e, 0x67, 0x63, 0x61,
            0x64, 0x64, 0x81, 0x55, 0x72, 0x20, 0xfc, 0x6f, 0x77, 0xb0, 0x6e, 0x17, 0x29, 0x48,
            0x0d, 0xe5, 0x3a, 0x14, 0x12, 0x9f, 0x30, 0x87, 0x71, 0x7a, 0x9b, 0x30, 0x31, 0x46,
            0x6f, 0x6e, 0x67, 0x73, 0x00, 0x5f, 0x17, 0x88, 0x04, 0x20, 0x61, 0x40, 0x1f, 0x61,
            0x70, 0x06, 0x64, 0x64, 0x65, 0xf0, 0x6e, 0x64, 0x75, 0x6d, 0xd1, 0x3e, 0xb1, 0x19,
            0x1a, 0x23, 0x85, 0x45, 0xfd, 0x01, 0x69, 0x2c, 0xe6, 0x1c, 0x68, 0x04, 0x32, 0x4d,
            0x02, 0x16, 0xc0, 0x0b, 0x72, 0x62, 0x2b, 0x60, 0x10, 0x3f, 0x4a, 0x73, 0x70, 0x59,
            0x6e, 0xb0, 0x0b, 0x20, 0x62, 0xf3, 0x31, 0x70, 0x70, 0x80, 0x72, 0x75, 0x6a, 0x35,
            0xa0, 0x08, 0x83, 0x11, 0x83, 0x59, 0x9c, 0x65, 0x20, 0xb5, 0x11, 0xf5, 0x5f, 0x21,
            0x0d, 0x6d, 0x61, 0x90, 0x1a, 0x3f, 0x29, 0x12, 0x76, 0x53, 0x63, 0xab, 0xb1, 0x27,
            0x51, 0x0c, 0xb0, 0x02, 0x72, 0x20, 0xdf, 0xe2, 0x04, 0xf5, 0x70, 0x38, 0x54, 0x41,
            0x04, 0x64, 0x29, 0x20, 0x28, 0x0b, 0xe0, 0x10, 0xcf, 0xf0, 0x73, 0x70, 0xa8, 0x31,
            0x63, 0x56, 0xae, 0x65, 0x72, 0x10, 0xa5, 0x60, 0x1c, 0xfd, 0xa0, 0x42, 0x6e, 0x54,
            0x70, 0xb4, 0x0f, 0xb1, 0x1f, 0xa2, 0xae, 0xa5, 0x7e, 0x21, 0x72, 0xfe, 0x2c, 0xd1,
            0x94, 0x06, 0x36, 0x10, 0x81, 0x41, 0x61, 0xdf, 0x08, 0x61, 0x02, 0x68, 0x04, 0x0f,
            0x21, 0x56, 0x12, 0x14, 0xce, 0x1c, 0x01, 0x1a, 0x20, 0x77, 0x68, 0x6f, 0xfc, 0x6c,
            0x65, 0xb7, 0x17, 0x03, 0x22, 0xa1, 0x07, 0x24, 0x04, 0x0b, 0x08, 0xc1, 0x0a, 0xff,
            0x1d, 0x08, 0x51, 0x1d, 0x01, 0x1c, 0x58, 0xb7, 0x60, 0xab, 0xa3, 0xb4, 0x71, 0x24,
            0x84, 0x04, 0x1f, 0x61, 0x02, 0xc0, 0x2f, 0x74, 0x0e, 0x9d, 0xc0, 0x0a, 0x19, 0x35,
            0x2e, 0x20, 0x32, 0x53, 0xd1, 0xa9, 0x73, 0x73, 0x44, 0x0e, 0xf9, 0xab, 0x73, 0x2e,
            0xf0, 0x20, 0x55, 0x6e, 0x6c, 0x60, 0xb5, 0xa1, 0x0a, 0x70, 0x51, 0x80, 0x06, 0xf8,
            0x63, 0x69, 0x74, 0x00, 0xb6, 0xb2, 0xc5, 0x47, 0x08, 0x05, 0x3f, 0xf1, 0x0f, 0xbb,
            0xf9, 0x03, 0x30, 0x35, 0x74, 0x50, 0x18, 0x90, 0x05, 0xb2, 0x39, 0x73, 0x65, 0xb0,
            0xff, 0xb1, 0x8b, 0xb0, 0x01, 0x60, 0x56, 0x52, 0x07, 0xe0, 0x4d, 0x85, 0x0d, 0x04,
            0x0c, 0xa0, 0x41, 0xff, 0xc0, 0x16, 0x75, 0x2c, 0x03, 0x0b, 0x70, 0x1d, 0xa3, 0x9e,
            0x80, 0x27, 0x45, 0xa1, 0xe0, 0xcb, 0xff, 0x8f, 0x1d, 0xf1, 0x8a, 0x86, 0x10, 0x47,
            0x88, 0xe3, 0x96, 0x60, 0x96, 0x20, 0x24, 0xd2, 0x27, 0x57, 0x35, 0x2e, 0xa1, 0xa3,
            0x30, 0x03, 0x72, 0xa8, 0x21, 0x2e, 0xf4, 0x03, 0x4e, 0x9c, 0x6f, 0x74, 0x61, 0x15,
            0xe0, 0x0e, 0x40, 0x23, 0x6e, 0x67, 0x52, 0x5d, 0xb0, 0x61, 0x62, 0x6f, 0x76, 0x50,
            0x1c, 0x20, 0x30, 0x68, 0x21, 0x2e, 0x27, 0xb1, 0xcd, 0x00, 0x0c, 0xa3, 0x09, 0x73,
            0x75, 0xe0, 0x60, 0x73, 0x65, 0x7e, 0x64, 0x32, 0xc5, 0x63, 0x30, 0x96, 0x08, 0xb5,
            0x0a, 0x20, 0x48, 0x72, 0x22, 0x65, 0x67, 0x10, 0x4c, 0xa1, 0xa9, 0x25, 0x2a, 0x61,
            0x67, 0x30, 0xdd, 0x82, 0x2f, 0x79, 0x0c, 0x6f, 0x75, 0xb2, 0xa7, 0x12, 0xd9, 0x65,
            0x78, 0x65, 0x63, 0x1f, 0x10, 0xc2, 0x25, 0x5e, 0xe1, 0x08, 0x24, 0x35, 0x00, 0x11,
            0x72, 0x65, 0x67, 0xbc, 0x61, 0x72, 0x02, 0xc1, 0x62, 0x27, 0xbb, 0x1b, 0x02, 0x37,
            0x36, 0xa0, 0x50, 0xcb, 0x05, 0x88, 0xe0, 0x1c, 0x54, 0x79, 0xb4, 0x64, 0x6f, 0xf0,
            0x4d, 0xa1, 0x3c, 0xe6, 0x67, 0x21, 0xb7, 0xb1, 0x82, 0x6d, 0x69, 0x73, 0x20, 0xb0,
            0xb7, 0x70, 0x29, 0x0d, 0xe2, 0x0e, 0x74, 0xd1, 0x03, 0x44, 0x0c, 0x6e, 0x61, 0x6d,
            0x65, 0x0f, 0x10, 0xa9, 0x22, 0x01, 0x11, 0x8d, 0xb0, 0x00, 0x73, 0x65, 0x72, 0x76,
            0xf3, 0x50, 0x99, 0xf0, 0x0a, 0x72, 0x6b, 0xe0, 0x00, 0x30, 0x09, 0x20, 0x39, 0xf0,
            0xb2, 0x7c, 0x74, 0x20, 0xc2, 0x02, 0x61, 0x33, 0xb1, 0x1d, 0x25, 0x1c, 0x95, 0x22,
            0x65, 0xa1, 0x66, 0xea, 0x72, 0x65, 0x71, 0x75, 0x20, 0xc4, 0x64, 0x32, 0x21, 0x72,
            0x72, 0x90, 0x71, 0x6f, 0x6e, 0x22, 0x7d, 0xb2, 0x3a, 0x80, 0x7f, 0x6f, 0x19, 0x80,
            0x06, 0x79, 0x20, 0xd1, 0x08, 0x50, 0x16, 0x64, 0x65, 0x73, 0xee, 0x63, 0x90, 0xdf,
            0xa4, 0x45, 0x54, 0x09, 0x6f, 0x00, 0x97, 0xb0, 0x01, 0xa4, 0x5d, 0xff, 0xe2, 0x31,
            0xc1, 0x03, 0xd5, 0x34, 0xc4, 0x02, 0xd1, 0x1d, 0xc1, 0x28, 0x15, 0x09, 0x28, 0x60,
            0x01, 0x43, 0xc0, 0x37, 0x2e, 0x20, 0x44, 0x69, 0x73, 0x63, 0x17, 0xb1, 0xe7, 0x90,
            0x66, 0xd0, 0x04, 0x57, 0xf0, 0xa7, 0x61, 0x6e, 0x74, 0xfe, 0x79, 0x46, 0x30, 0xa6,
            0x0a, 0xe0, 0x29, 0x02, 0xec, 0x92, 0xf7, 0x21, 0xd6, 0xd0, 0x42, 0x9b, 0xc4, 0x08,
            0x52, 0x1c, 0x64, 0x91, 0x2b, 0x20, 0x09, 0x77, 0x72, 0x30, 0x26, 0x78, 0x6e, 0x67,
            0x2c, 0x07, 0x1b, 0xf4, 0x4a, 0x12, 0xc1, 0xf3, 0xb4, 0x28, 0xe1, 0xb1, 0x0a, 0x65,
            0x61, 0x63, 0x68, 0x04, 0x04, 0x36, 0x1c, 0xa3, 0x14, 0x01, 0xc1, 0xbd, 0x73, 0x20,
            0x69, 0x1f, 0xb8, 0x00, 0x74, 0x73, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x00, 0x69,
            0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x00, 0x29, 0x20, 0x6f, 0x6e, 0x20, 0x61,
            0x6e, 0x20, 0x00, 0x22, 0x41, 0x53, 0x20, 0x49, 0x53, 0x22, 0x20, 0x00, 0x42, 0x41,
            0x53, 0x49, 0x53, 0x2c, 0x0a, 0x20, 0x01, 0x02, 0x00, 0x57, 0x49, 0x54, 0x48, 0x4f,
            0x55, 0x54, 0x00, 0x20, 0x57, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x54, 0x00, 0x49, 0x45,
            0x53, 0x20, 0x4f, 0x52, 0x20, 0x43, 0x00, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
            0x4e, 0x01, 0x00, 0x1a, 0x46, 0x20, 0x41, 0x4e, 0x59, 0x20, 0x4b, 0x00, 0x49, 0x4e,
            0x44, 0x2c, 0x20, 0x65, 0x69, 0x74, 0x00, 0x68, 0x65, 0x72, 0x20, 0x65, 0x78, 0x70,
            0x72, 0x40, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x04, 0x8a, 0x69, 0x00, 0x6d, 0x70,
            0x6c, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x00, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69,
            0x6e, 0x10, 0x67, 0x2c, 0x20, 0x77, 0x00, 0x2b, 0x6f, 0x75, 0x74, 0x80, 0x20, 0x6c,
            0x69, 0x6d, 0x69, 0x74, 0x61, 0x01, 0x89, 0x02, 0x2c, 0x00, 0x85, 0x79, 0x20, 0x77,
            0x61, 0x72, 0x72, 0x20, 0x61, 0x6e, 0x74, 0x69, 0x65, 0x01, 0x3f, 0x20, 0x63, 0x30,
            0x6f, 0x6e, 0x64, 0x69, 0x02, 0xa6, 0x04, 0x4a, 0x6f, 0x66, 0x00, 0x20, 0x54, 0x49,
            0x54, 0x4c, 0x45, 0x2c, 0x20, 0x00, 0x4e, 0x4f, 0x4e, 0x2d, 0x49, 0x4e, 0x46, 0x52,
            0x00, 0x49, 0x4e, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x80, 0x2c, 0x20, 0x4d, 0x45,
            0x52, 0x43, 0x48, 0x00, 0xa5, 0x00, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x2c,
            0x01, 0x00, 0x80, 0x20, 0x46, 0x49, 0x54, 0x4e, 0x45, 0x53, 0x28, 0x53, 0x20, 0x46,
            0x00, 0xb6, 0x41, 0x04, 0x43, 0x50, 0x41, 0x00, 0x52, 0x54, 0x49, 0x43, 0x55, 0x4c,
            0x41, 0x52, 0x00, 0x20, 0x50, 0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x00, 0x2e, 0x20,
            0x59, 0x6f, 0x75, 0x20, 0x61, 0x72, 0x00, 0x65, 0x20, 0x73, 0x6f, 0x6c, 0x65, 0x6c,
            0x79, 0x0a, 0x20, 0x80, 0x5f, 0x70, 0x80, 0x8d, 0x69, 0x62, 0x6c, 0x65, 0x00, 0x20,
            0x66, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x74, 0xa0, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x00,
            0x5d, 0x20, 0x80, 0x71, 0x01, 0x04, 0x24, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72,
            0x20, 0x69, 0x61, 0x74, 0x65, 0x6e, 0x02, 0x78, 0x66, 0x20, 0x0c, 0x75, 0x73, 0x01,
            0x11, 0x80, 0x18, 0x72, 0x65, 0x64, 0x69, 0x12, 0x73, 0x84, 0xb2, 0x6e, 0x67, 0x01,
            0x1a, 0x20, 0x57, 0x6f, 0x04, 0x72, 0x6b, 0x80, 0x71, 0x64, 0x20, 0x61, 0x73, 0x73,
            0x18, 0x75, 0x6d, 0x65, 0x01, 0x77, 0x04, 0x24, 0x72, 0x69, 0x73, 0xa4, 0x6b, 0x73,
            0x01, 0x0b, 0x6f, 0x63, 0x01, 0x26, 0x64, 0x82, 0x8e, 0x03, 0x81, 0x49, 0x01, 0xa6,
            0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x4a, 0x20, 0x80, 0x7c, 0x70, 0x81, 0x41, 0x73,
            0x73, 0x81, 0xda, 0x20, 0x08, 0x75, 0x6e, 0x64, 0x00, 0xb5, 0x74, 0x68, 0x69, 0x73,
            0x00, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0xe4, 0x2e, 0x0a, 0x81, 0x26,
            0x38, 0x2e, 0x80, 0x07, 0x05, 0xa9, 0x01, 0x1a, 0x00, 0x4c, 0x69, 0x61, 0x62, 0x69,
            0x6c, 0x69, 0x74, 0x00, 0x79, 0x2e, 0x20, 0x49, 0x6e, 0x20, 0x6e, 0x6f, 0xc0, 0x20,
            0x65, 0x76, 0x65, 0x6e, 0x74, 0xc2, 0x21, 0xc3, 0x10, 0x41, 0x80, 0x04, 0x6c, 0x65,
            0x67, 0x61, 0x6c, 0xc1, 0x28, 0x6f, 0x44, 0x72, 0x79, 0x85, 0x7e, 0x77, 0x68, 0x65,
            0x40, 0x3a, 0x72, 0x01, 0xc0, 0x6c, 0x20, 0x74, 0x6f, 0x72, 0x74, 0x20, 0x28, 0x01,
            0x06, 0x6f, 0x20, 0x6e, 0x65, 0x67, 0x6c, 0x69, 0x67, 0x40, 0x65, 0x6e, 0x63, 0x65,
            0x29, 0x2c, 0x81, 0x68, 0x74, 0x50, 0x72, 0x61, 0x63, 0x74, 0x82, 0x5b, 0x6f, 0x81,
            0x0c, 0x77, 0x23, 0x80, 0x2b, 0x45, 0x11, 0x75, 0x6e, 0x6c, 0x41, 0x46, 0x72, 0x65,
            0x08, 0x71, 0x75, 0x69, 0x80, 0x44, 0x20, 0x62, 0x79, 0x20, 0x21, 0x40, 0x4d, 0x6c,
            0x69, 0x63, 0x61, 0x81, 0x56, 0x6c, 0x61, 0x80, 0x77, 0x20, 0x28, 0x73, 0x75, 0x63,
            0x68, 0xc0, 0x3e, 0xc1, 0xc0, 0x58, 0x6c, 0x69, 0x62, 0x65, 0x72, 0x00, 0x53, 0x02,
            0x27, 0x80, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x6c, 0x79, 0x44, 0x48, 0x13, 0x85, 0x1c,
            0x00, 0x2e, 0x63, 0x74, 0xc1, 0xac, 0x72, 0x20, 0x61, 0x60, 0x67, 0x72, 0x65, 0x65,
            0x64, 0x00, 0x27, 0x81, 0x28, 0x77, 0x08, 0x72, 0x69, 0x74, 0x40, 0x5e, 0x2c, 0x20,
            0x73, 0x68, 0x68, 0x61, 0x6c, 0x6c, 0x00, 0x10, 0x79, 0x47, 0xb9, 0x40, 0x63, 0x62,
            0x9a, 0x65, 0xc4, 0x11, 0x6c, 0x40, 0x43, 0xc0, 0x74, 0x74, 0x6f, 0x42, 0x7c, 0x81,
            0x82, 0x76, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x08, 0xa7, 0x2d, 0x42, 0x0f, 0x64,
            0x80, 0x2b, 0x01, 0x35, 0x69, 0x00, 0xa0, 0x72, 0x65, 0xd1, 0x41, 0x02, 0x73, 0x70,
            0x65, 0x40, 0x67, 0x6c, 0x45, 0x36, 0x80, 0x43, 0x64, 0x69, 0x64, 0x40, 0x52, 0x61,
            0x6c, 0x42, 0x3e, 0x40, 0xaa, 0x73, 0x6b, 0x00, 0x39, 0x00, 0x04, 0x69, 0x80, 0x52,
            0x64, 0x03, 0x15, 0xc1, 0x5f, 0x61, 0xc0, 0x6e, 0x79, 0x20, 0x63, 0x68, 0x61, 0x81,
            0x48, 0x00, 0x6c, 0x76, 0x61, 0x80, 0x7a, 0x41, 0x88, 0x61, 0x80, 0x7b, 0x84, 0x24,
            0xc0, 0x9a, 0x75, 0xfc, 0x6c, 0x74, 0x81, 0x0a, 0x49, 0x73, 0x01, 0xaf, 0xc1, 0xc7,
            0x80, 0x7d, 0xc0, 0x54, 0xdf, 0xc0, 0x95, 0x40, 0x80, 0x01, 0x63, 0x04, 0x73, 0x81,
            0x3d, 0x75, 0x40, 0x85, 0xc0, 0x06, 0xff, 0x84, 0x11, 0x42, 0x97, 0x08, 0x69, 0x80,
            0xf7, 0x40, 0x7b, 0x04, 0xd8, 0xc3, 0x49, 0x45, 0x25, 0x0d, 0xc1, 0x1e, 0x6c, 0xa0,
            0x2b, 0x61, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x28, 0x77, 0x69, 0x6c, 0xc6, 0x1a, 0x77,
            0x81, 0x54, 0x73, 0x74, 0x18, 0x6f, 0x70, 0x70, 0xa0, 0x22, 0xa1, 0x3b, 0x6d, 0x70,
            0x75, 0x81, 0x60, 0x5f, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x00, 0x64, 0x01, 0x80,
            0x29, 0x6d, 0x61, 0x6c, 0x66, 0x75, 0x6e, 0x63, 0x27, 0x63, 0x76, 0xe0, 0x01, 0x21,
            0x1c, 0x61, 0x6e, 0xc0, 0x5a, 0x6c, 0x6c, 0x67, 0x64, 0x11, 0xc2, 0x40, 0x20, 0x43,
            0x6d, 0x6d, 0x81, 0x57, 0xe9, 0x21, 0x72, 0x32, 0x20, 0x01, 0x0f, 0x65, 0x73, 0x00,
            0x47, 0xe1, 0x50, 0x20, 0x69, 0x5c, 0x66, 0x20, 0xe2, 0x3f, 0x46, 0x92, 0x86, 0x86,
            0x68, 0x40, 0x24, 0x62, 0xa4, 0x65, 0x65, 0x60, 0x93, 0x64, 0x76, 0x00, 0x4a, 0x64,
            0x81, 0x15, 0xf5, 0x21, 0x21, 0x70, 0x00, 0x17, 0x69, 0x23, 0x5a, 0x41, 0x02, 0xa2,
            0x07, 0x04, 0x1b, 0x01, 0x23, 0x60, 0x39, 0x2e, 0x20, 0x41, 0x63, 0x63, 0x65, 0x52,
            0x70, 0xe1, 0x41, 0x20, 0x57, 0xc3, 0x89, 0x79, 0xc1, 0x29, 0x41, 0x8e, 0x64, 0x63,
            0x89, 0xe0, 0x11, 0x88, 0x62, 0x57, 0x68, 0x69, 0x00, 0x42, 0x1f, 0xcb, 0x75, 0xc4,
            0x18, 0xc1, 0x0d, 0xc2, 0x2a, 0x80, 0x1c, 0x44, 0x65, 0x72, 0xa4, 0x69, 0x76, 0xe0,
            0x94, 0x76, 0x65, 0xe2, 0x78, 0x73, 0xa1, 0x65, 0x20, 0x72, 0x65, 0x6f, 0x66, 0x2c,
            0x02, 0x49, 0x6d, 0x61, 0x29, 0x81, 0x3c, 0x6f, 0x6f, 0x21, 0x32, 0x6f, 0xc0, 0x12,
            0x66, 0x65, 0x2e, 0x72, 0xe5, 0x44, 0x21, 0x23, 0xe1, 0x3f, 0x67, 0x00, 0x7e, 0x20,
            0x66, 0x6e, 0x65, 0xe2, 0x89, 0x40, 0x9d, 0x22, 0x14, 0x61, 0x40, 0x68, 0x83, 0x18,
            0x70, 0x1e, 0x70, 0x60, 0x6c, 0xa0, 0xa2, 0xc4, 0x15, 0xa1, 0x51, 0x64, 0x65, 0x6d,
            0x7e, 0x6e, 0xc0, 0x76, 0xe5, 0x08, 0x60, 0x10, 0xc3, 0x2a, 0x41, 0x58, 0x02, 0x7a,
            0x20, 0x1c, 0x6f, 0x62, 0xc0, 0x70, 0x62, 0xa7, 0xa0, 0x49, 0x6e, 0x64, 0x2f, 0xe1,
            0x40, 0x04, 0x72, 0x69, 0x67, 0x68, 0x20, 0xbc, 0xa1, 0x51, 0xc0, 0x8f, 0x1f, 0xa0,
            0x51, 0x43, 0x89, 0x21, 0x4b, 0x84, 0x1a, 0xa5, 0x85, 0x20, 0x48, 0x6f, 0xca, 0x77,
            0x40, 0x30, 0x72, 0x41, 0x0d, 0x20, 0x61, 0x06, 0x26, 0xe2, 0x29, 0x7f, 0x08, 0x0b,
            0xe7, 0x1b, 0x60, 0x7c, 0x40, 0xc5, 0x26, 0x72, 0xa0, 0xc6, 0x80, 0xa6, 0x72, 0x80,
            0x20, 0x6f, 0x77, 0x6e, 0x20, 0x62, 0x65, 0xa0, 0x6e, 0xd6, 0x66, 0xe0, 0x66, 0xa0,
            0x34, 0x6e, 0x01, 0x22, 0x72, 0x02, 0xa9, 0xc7, 0xa8, 0xfd, 0xe2, 0x15, 0x2c, 0xe2,
            0x51, 0xe0, 0x06, 0xc3, 0x05, 0xe4, 0x11, 0x00, 0x5c, 0x01, 0x48, 0xff, 0x63, 0x1b,
            0xc8, 0x40, 0xc1, 0xc1, 0xc1, 0x09, 0xa0, 0xb1, 0x80, 0x44, 0xe2, 0xb3, 0x01, 0x7e,
            0x0b, 0xe3, 0x7d, 0x62, 0x23, 0x66, 0x66, 0x95, 0x64, 0x65, 0x66, 0x65, 0x06, 0x6e,
            0xe0, 0xcb, 0x61, 0x2d, 0x68, 0x6f, 0x6c, 0x64, 0x20, 0xac, 0x65, 0x61, 0x60, 0x8a,
            0x88, 0x09, 0x20, 0x00, 0x70, 0x6d, 0x22, 0x91, 0x9f, 0x61, 0x5f, 0xe1, 0x0d, 0xa6,
            0x28, 0xc4, 0x10, 0xc0, 0x79, 0x75, 0x72, 0x23, 0x94, 0x21, 0xe3, 0x79, 0x6c, 0x61,
            0x69, 0x6d, 0xc0, 0x2a, 0x73, 0x73, 0x08, 0x65, 0x72, 0x74, 0xc0, 0x67, 0x61, 0x67,
            0x61, 0x69, 0x3c, 0x6e, 0x73, 0xa0, 0x9c, 0x02, 0x24, 0x49, 0x0b, 0x40, 0x9a, 0x72,
            0x65, 0x10, 0x61, 0x73, 0x6f, 0x6e, 0x07, 0x1a, 0x79, 0x6f, 0x75, 0xbf, 0xe0, 0x93,
            0x66, 0x2a, 0xe1, 0x0d, 0xc2, 0x06, 0x84, 0xdb, 0xa2, 0x51, 0x61, 0xa7, 0x51, 0x03,
            0x66, 0x11, 0x03, 0x58, 0x45, 0x4e, 0x44, 0x20, 0x4f, 0x46, 0x40, 0x20, 0x54, 0x45,
            0x52, 0x4d, 0x53, 0xa0, 0xeb, 0x44, 0x23, 0xe8, 0xed, 0x42, 0xbc, 0x41, 0x50, 0x50,
            0x40, 0x04, 0x49, 0x58, 0x2e, 0x3a, 0x41, 0x38, 0xe1, 0x21, 0x21, 0xaa, 0x79, 0x01,
            0x52, 0x20, 0x41, 0xfa, 0x70, 0x00, 0x1f, 0x65, 0x25, 0xc2, 0x61, 0x03, 0x42, 0x11,
            0x81, 0x7a, 0x63, 0x0b, 0xf9, 0xa0, 0xfa, 0x54, 0x6f, 0x22, 0x58, 0x0f, 0x03, 0xc3,
            0x2b, 0x06, 0x03, 0x00, 0x18, 0x0c, 0x74, 0x74, 0x71, 0x14, 0x61, 0x30, 0x66, 0x6f,
            0x6c, 0x6c, 0x4c, 0x6f, 0x77, 0x90, 0x4b, 0x44, 0x0e, 0x62, 0x6f, 0x50, 0x33, 0x72,
            0xe0, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x51, 0x1d, 0x10, 0x68, 0x23, 0x7d, 0x01, 0x52,
            0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20, 0x2f, 0x00, 0x62, 0xc0, 0x3e, 0xb0,
            0x13, 0x10, 0x12, 0x62, 0xf0, 0x4f, 0x6b, 0x65, 0x21, 0x90, 0x29, 0x22, 0x5b, 0x5d,
            0x22, 0x34, 0x04, 0x72, 0x65, 0xed, 0xf0, 0x03, 0x63, 0xf0, 0x01, 0xb1, 0x80, 0x20,
            0x72, 0x07, 0xc1, 0x24, 0x52, 0x55, 0x48, 0x69, 0x66, 0x79, 0x61, 0x52, 0x69, 0x6e,
            0xf0, 0x1a, 0x6d, 0x01, 0x22, 0x2e, 0x2e, 0x20, 0x28, 0x44, 0x6f, 0x6e, 0x27, 0x3e,
            0x74, 0xd0, 0x5e, 0x41, 0x84, 0x05, 0x5d, 0xc1, 0x09, 0xc5, 0x05, 0x21, 0x29, 0x00,
            0x20, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x65, 0x24, 0x78, 0x74, 0x80, 0x60, 0x6f,
            0x75, 0x90, 0x20, 0x62, 0x65, 0x79, 0x77, 0x08, 0x69, 0x6e, 0xe2, 0x09, 0xe0, 0x12,
            0x65, 0x7b, 0x94, 0x08, 0x63, 0x06, 0x6f, 0x90, 0x4a, 0x40, 0x71, 0x73, 0x79, 0x6e,
            0x74, 0x61, 0x1e, 0x78, 0x12, 0x7f, 0x42, 0x0f, 0x91, 0x41, 0x03, 0x08, 0x2e, 0x20,
            0x57, 0x71, 0xf0, 0x3b, 0x6c, 0x73, 0x6f, 0x30, 0x2d, 0xd3, 0x02, 0x90, 0x67, 0x68,
            0x36, 0x61, 0xe0, 0x68, 0x24, 0x04, 0x66, 0xb1, 0x02, 0x00, 0x38, 0x63, 0x6c, 0x51,
            0xd0, 0x7d, 0x20, 0x6e, 0x61, 0xf2, 0x7d, 0x64, 0x40, 0x6d, 0x73, 0x38, 0x63, 0x72,
            0x69, 0xb0, 0x48, 0x60, 0x2f, 0x90, 0x2e, 0x70, 0x75, 0xfa, 0x72, 0xf0, 0x4b, 0x65,
            0x00, 0x33, 0x65, 0x0c, 0x12, 0x33, 0xc0, 0x06, 0x64, 0x04, 0x6a, 0x73, 0x81, 0x03,
            0x22, 0x30, 0x85, 0x6e, 0x41, 0x27, 0x31, 0x58, 0x22, 0xc3, 0xb1, 0x71, 0xd1, 0x08,
            0x63, 0x6f, 0x70, 0x79, 0xe2, 0x3d, 0x04, 0x17, 0x33, 0x62, 0x0a, 0x80, 0x27, 0x69,
            0x65, 0x76, 0x96, 0xf1, 0x68, 0x69, 0x66, 0x0f, 0xc0, 0x75, 0xb1, 0x59, 0x92, 0x3f,
            0x22, 0x0f, 0x69, 0x72, 0x64, 0x2d, 0x10, 0x70, 0x61, 0x72, 0x74, 0xb0, 0x77, 0x72,
            0x63, 0x68, 0x50, 0x69, 0x76, 0x65, 0x73, 0xc3, 0x20, 0x43, 0x16, 0x05, 0x5b, 0xe2,
            0x79, 0x00, 0x00, 0x5d, 0x20, 0x5b, 0x72, 0x0b, 0x70, 0x0a, 0xb7, 0x06, 0xb1, 0x10,
            0x19, 0x65, 0x72, 0x5d, 0x72, 0x27, 0x94, 0x43, 0x64, 0xb6, 0x87, 0x82, 0x65, 0xfc,
            0x26, 0x2c, 0x20, 0x56, 0x65, 0x72, 0xe1, 0x89, 0x40, 0x20, 0x32, 0x2e, 0x30, 0x20,
            0x28, 0x41, 0x0b, 0x22, 0xb1, 0x44, 0x03, 0x22, 0x29, 0x3b, 0x11, 0x0e, 0x40, 0x1e,
            0x20, 0xb1, 0x52, 0x38, 0x6e, 0x6f, 0x74, 0x22, 0x6d, 0x12, 0x6f, 0xa2, 0x13, 0x65,
            0x78, 0xff, 0x21, 0x5b, 0x50, 0x11, 0x61, 0x63, 0xe0, 0xa2, 0xa2, 0x51, 0x82, 0x21,
            0x61, 0x04, 0x54, 0x04, 0x8e, 0x2e, 0x31, 0x04, 0xa1, 0x40, 0x31, 0x04, 0x6f, 0x62,
            0x74, 0x20, 0x39, 0xd4, 0x20, 0x61, 0x00, 0x03, 0x70, 0x10, 0x35, 0x66, 0xb2, 0x1d,
            0x84, 0x02, 0x18, 0x20, 0x61, 0x74, 0x22, 0x0b, 0x41, 0xac, 0x68, 0x74, 0x74, 0x00,
            0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x82, 0x61, 0xe2, 0x31, 0x2e, 0x6f,
            0x72, 0x67, 0x2f, 0x20, 0x88, 0x01, 0x41, 0x93, 0x73, 0x2f, 0x4c, 0x49, 0x43, 0x45,
            0x4e, 0xd8, 0x53, 0x45, 0x2d, 0x20, 0x0b, 0x22, 0x03, 0x55, 0x1f, 0x8b, 0xf1, 0x35,
            0x0f, 0x18, 0x8b, 0x50, 0x1e, 0xbf, 0x87, 0x31, 0xad, 0x73, 0x6f, 0x66, 0x74, 0xfd,
            0x20, 0x3e, 0x65, 0x51, 0x0a, 0xd6, 0x9f, 0xf0, 0x2d, 0xb5, 0x9a, 0x87, 0x39, 0x50,
            0x9b, 0xff, 0x09, 0x02, 0xc0, 0x21, 0x1f, 0xb8, 0xb0, 0x0b, 0xef, 0xb7, 0xef, 0xb7,
            0xef, 0xb7, 0xe6, 0xb7, 0xf6, 0x20, 0x84, 0xb7, 0x62, 0x13, 0x53, 0xa0, 0x67, 0xa8,
            0x14, 0x46, 0x2e, 0x62, 0x8d, 0x81, 0x30, 0x23, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75,
            0x40, 0x7f, 0xc0, 0x20, 0x67, 0x6f, 0x76, 0x65, 0x72, 0xa2, 0xae, 0x09, 0xa7, 0xb7,
            0xb0, 0x55, 0x71, 0x0d, 0xf7, 0xba, 0x73, 0x78, 0x20, 0xf6, 0x19, 0x00, 0x0f, 0x00,
            0xff, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f,
            0x01, 0x1f, 0x01, 0xff, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01,
            0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0xff, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f,
            0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0xff, 0x1f, 0x01, 0x1f, 0x01,
            0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0xff, 0x1f,
            0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f,
            0x01, 0xff, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01, 0x1f, 0x01,
            0x1f, 0x01, 0x1f, 0x01, 0x07, 0x1f, 0x01, 0x1f, 0x01, 0x18, 0x01, 0x03, 0xb0, 0x02,
            0x00, 0xfc, 0x0f, 0x03, 0xb0, 0x02, 0x00, 0xfc, 0x0f, 0x03, 0xb0, 0x02, 0x00, 0xfc,
            0x0f, 0x03, 0xb0, 0x02, 0x00, 0xfc, 0x0f, 0x03, 0xb0, 0x02, 0x00, 0xfc, 0x0f, 0x03,
            0xb0, 0x02, 0x00, 0xfc, 0x0f, 0x03, 0xb0, 0x02, 0x00, 0xfc, 0x0f, 0x03, 0xb0, 0x02,
            0x00, 0xfc, 0x0f, 0x03, 0xb0, 0x02, 0x00, 0xfc, 0x0f, 0x03, 0xb0, 0x02, 0x00, 0xfc,
            0x0f, 0x03, 0xb0, 0x02, 0x00, 0xfc, 0x0f, 0x03, 0xb0, 0x02, 0x00, 0xfc, 0x0f, 0x03,
            0xb0, 0x02, 0x00, 0xfc, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00,
        ];
    }

    #[test]
    fn test_decompress() -> io::Result<()> {
        let mut test_context: Lznt1Context = Lznt1Context::new();

        let test_data: Vec<u8> = get_test_data();
        let mut uncompressed_data: Vec<u8> = vec![0; 65536];
        test_context.decompress(&test_data, &mut uncompressed_data)?;
        assert_eq!(test_context.uncompressed_data_size, 65536);

        let expected_data: String = fs::read_to_string("./LICENSE")?;
        assert_eq!(&uncompressed_data[0..11358], expected_data.as_bytes());

        Ok(())
    }
}
