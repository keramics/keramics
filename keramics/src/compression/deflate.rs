/* Copyright 2024-2025 Joachim Metz <joachim.metz@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

//! DEFLATE decompression.
//!
//! Provides decompression support for DEFLATE compressed data (RFC 1951).

use std::io;

use crate::mediator::Mediator;

use super::huffman::HuffmanTree;
use super::traits::Bitstream;

/// Uncompressed DEFLATE block type.
const DEFLATE_BLOCK_TYPE_UNCOMPRESED: u32 = 0;

/// Fixed Huffmann trees encoded DEFLATE block type.
const DEFLATE_BLOCK_TYPE_HUFFMAN_FIXED: u32 = 1;

/// Dynamic Huffmann trees encoded DEFLATE block type.
const DEFLATE_BLOCK_TYPE_HUFFMAN_DYNAMIC: u32 = 2;

/// Sequence of code size indexes for building dynamic Huffman trees.
const DEFLATE_CODE_SIZES_SEQUENCE: [u8; 19] = [
    16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15,
];

/// Base values of literal codes for decoding Huffman encoded blocks.
const DEFLATE_LITERAL_CODES_BASE: [u16; 29] = [
    3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131,
    163, 195, 227, 258,
];

/// Number of extra bits of literal codes for decoding Huffman encoded blocks.
const DEFLATE_LITERAL_CODES_NUMBER_OF_EXTRA_BITS: [u16; 29] = [
    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0,
];

/// Base values of distances codes for decoding Huffman encoded blocks.
const DEFLATE_DISTANCE_CODES_BASE: [u16; 30] = [
    1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537,
    2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577,
];

/// Number of extra bits of distance codes for decoding Huffman encoded blocks.
const DEFLATE_DISTANCE_CODES_NUMBER_OF_EXTRA_BITS: [u16; 30] = [
    0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13,
    13,
];

/// Bitstream for DEFLATE compressed data.
pub(super) struct DeflateBitstream<'a> {
    /// Byte steam.
    data: &'a [u8],

    /// Current offset in the byte stream.
    pub data_offset: usize,

    /// Size of the byte stream in bytes.
    pub data_size: usize,

    /// Bits buffer.
    bits: u32,

    /// Number of bits in the bits buffer.
    pub number_of_bits: usize,
}

impl<'a> DeflateBitstream<'a> {
    /// Creates a new bitstream.
    pub fn new(data: &'a [u8], data_offset: usize) -> Self {
        let data_size: usize = data.len();
        Self {
            data: data,
            data_offset: data_offset,
            data_size: data_size,
            bits: 0,
            number_of_bits: 0,
        }
    }

    /// Copies bytes from the bitstream.
    /// Note that this flushes the internal bits buffer.
    pub fn copy_bytes(
        &mut self,
        read_size: usize,
        output_data: &mut [u8],
        output_data_offset: usize,
        output_data_size: usize,
    ) -> io::Result<()> {
        let data_end_offset: usize = self.data_offset + read_size;
        let output_data_end_offset: usize = output_data_offset + read_size;

        if data_end_offset > self.data_size {
            return Err(io::Error::new(
                io::ErrorKind::InvalidData,
                "Invalid compressed data value too small",
            ));
        }
        if output_data_end_offset > output_data_size {
            return Err(io::Error::new(
                io::ErrorKind::InvalidData,
                "Invalid uncompressed data value too small",
            ));
        }
        output_data[output_data_offset..output_data_end_offset]
            .copy_from_slice(&self.data[self.data_offset..data_end_offset]);

        self.data_offset = data_end_offset;

        // Flush the bits buffer.
        self.bits = 0;
        self.number_of_bits = 0;

        Ok(())
    }

    /// Reads input data forwards into the bits buffer in little-endian byte order.
    #[inline(always)]
    fn read_data(&mut self, number_of_bits: usize) {
        while self.number_of_bits < number_of_bits {
            // If the bit stream overflows fill the bit buffer with 0 byte values.
            if self.data_offset < self.data_size {
                self.bits |= (self.data[self.data_offset] as u32) << self.number_of_bits;
                self.data_offset += 1;
            }
            self.number_of_bits += 8;
        }
    }

    /// Unread input data from the bits buffer.
    #[inline(always)]
    pub(super) fn unread_data(&mut self) {
        while self.number_of_bits > 8 {
            self.bits >>= 8;
            self.number_of_bits -= 8;

            self.data_offset -= 1;
        }
    }
}

impl<'a> Bitstream for DeflateBitstream<'a> {
    /// Retrieves a bit value.
    fn get_value(&mut self, number_of_bits: usize) -> u32 {
        // Note that this does not check if number_of_bits <= 32
        let mut bit_value: u32 = 0;

        let mut bit_offset: usize = 0;
        while bit_offset < number_of_bits {
            let mut read_size: usize = number_of_bits - bit_offset;
            if read_size > 24 {
                read_size = 24;
            }
            if self.number_of_bits < read_size {
                self.read_data(read_size);
            }
            let mut value_32bit: u32 = self.bits;

            if read_size == 32 {
                self.bits = 0;
            } else {
                value_32bit &= !(0xffffffff << read_size);

                self.bits >>= read_size;
            }
            self.number_of_bits -= read_size;

            if bit_offset > 0 {
                value_32bit <<= bit_offset;
            }
            bit_value |= value_32bit;
            bit_offset += read_size;
        }
        bit_value
    }

    /// Skips a number of bits.
    fn skip_bits(&mut self, number_of_bits: usize) {
        // Note that this does not check if number_of_bits <= 32
        let mut bit_offset: usize = 0;
        while bit_offset < number_of_bits {
            let mut read_size: usize = number_of_bits - bit_offset;
            if read_size > 24 {
                read_size = 24;
            }
            if self.number_of_bits < read_size {
                self.read_data(read_size);
            }
            if read_size == 32 {
                self.bits = 0;
            } else {
                self.bits >>= read_size;
            }
            self.number_of_bits -= read_size;

            bit_offset += read_size;
        }
    }
}

/// Block header used by DEFLATE compressed data.
struct DeflateBlockHeader {
    /// Block type.
    pub block_type: u32,

    /// Last block flag.
    pub last_block_flag: u32,
}

impl DeflateBlockHeader {
    /// Creates a new block header.
    pub fn new() -> Self {
        Self {
            block_type: 0,
            last_block_flag: 0,
        }
    }

    /// Reads the block header from a bitstream.
    pub fn read_from_bitstream(&mut self, bitstream: &mut DeflateBitstream) -> io::Result<()> {
        let value_32bit: u32 = bitstream.get_value(3);

        self.last_block_flag = value_32bit & 0x00000001;
        self.block_type = value_32bit >> 1;

        let mediator = Mediator::current();
        if mediator.debug_output {
            let mut string_parts: Vec<String> = Vec::new();
            string_parts.push(format!("DeflateBlockHeader {{\n"));
            string_parts.push(format!("    last_block_flag: {},\n", self.last_block_flag));
            string_parts.push(format!("    block_type: {},\n", self.block_type));
            string_parts.push(format!("}}\n\n"));

            mediator.debug_print(string_parts.join(""));
        }
        Ok(())
    }
}

// TODO: make fixed huffman trees static?

/// Context for decompressing DEFLATE compressed data.
pub struct DeflateContext {
    /// Fixed Huffman tree for decoding literals.
    fixed_literals_huffman_tree: HuffmanTree,

    /// Fixed Huffman tree for decoding distances.
    fixed_distances_huffman_tree: HuffmanTree,

    /// Value to indicate if the fixed Huffman trees have been build.
    build_fixed_huffman_trees: bool,

    /// Uncompressed data size.
    pub uncompressed_data_size: usize,
}

impl DeflateContext {
    /// Creates a new context.
    pub fn new() -> Self {
        Self {
            fixed_literals_huffman_tree: HuffmanTree::new(288, 15),
            fixed_distances_huffman_tree: HuffmanTree::new(30, 15),
            build_fixed_huffman_trees: false,
            uncompressed_data_size: 0,
        }
    }

    /// Builds dynamic Huffman trees from the compressed data in the bitstream.
    fn build_dynamic_huffman_trees(
        &mut self,
        bitstream: &mut DeflateBitstream,
        literals_huffman_tree: &mut HuffmanTree,
        distances_huffman_tree: &mut HuffmanTree,
    ) -> io::Result<()> {
        let mut code_sizes: Vec<u8> = vec![0; 316];

        let mut value_32bit: u32 = bitstream.get_value(14);

        let number_of_literal_codes: usize = (value_32bit & 0x0000001f) as usize + 257;

        if number_of_literal_codes > 286 {
            return Err(io::Error::new(
                io::ErrorKind::InvalidInput,
                format!(
                    "Invalid number of literal codes: {} value out of bounds",
                    number_of_literal_codes
                ),
            ));
        }
        value_32bit >>= 5;

        let number_of_distance_codes: usize = (value_32bit & 0x0000001f) as usize + 1;

        if number_of_distance_codes > 30 {
            return Err(io::Error::new(
                io::ErrorKind::InvalidInput,
                format!(
                    "Invalid number of distance codes: {} value out of bounds",
                    number_of_distance_codes
                ),
            ));
        }
        value_32bit >>= 5;

        let number_of_code_sizes: usize = (value_32bit as usize) + 4;

        for sequence_index in 0..number_of_code_sizes {
            let code_size: u32 = bitstream.get_value(3);
            let code_size_index: usize = DEFLATE_CODE_SIZES_SEQUENCE[sequence_index] as usize;

            code_sizes[code_size_index] = code_size as u8;
        }
        for sequence_index in number_of_code_sizes..19 {
            let code_size_index: usize = DEFLATE_CODE_SIZES_SEQUENCE[sequence_index] as usize;

            code_sizes[code_size_index] = 0;
        }
        let mut codes_huffman_tree: HuffmanTree = HuffmanTree::new(19, 15);
        codes_huffman_tree.build(&code_sizes[0..19])?;

        let number_of_codes: usize = number_of_literal_codes + number_of_distance_codes;
        let mut code_size_index: usize = 0;

        while code_size_index < number_of_codes {
            let symbol: u16 = codes_huffman_tree.decode_symbol(bitstream)?;

            if symbol < 16 {
                code_sizes[code_size_index] = symbol as u8;

                code_size_index += 1;

                continue;
            }
            if code_size_index == 0 && symbol == 16 {
                return Err(io::Error::new(
                    io::ErrorKind::InvalidInput,
                    format!(
                        "Invalid code size index: {} value out of bounds",
                        code_size_index
                    ),
                ));
            }
            if symbol > 18 {
                return Err(io::Error::new(
                    io::ErrorKind::InvalidInput,
                    format!("Invalid symbol: {} value out of bounds", symbol),
                ));
            }
            let code_size: u8 = if symbol == 16 {
                code_sizes[code_size_index - 1]
            } else {
                0
            };
            let mut times_to_repeat: u32 = if symbol == 16 {
                bitstream.get_value(2) + 3
            } else if symbol == 17 {
                bitstream.get_value(3) + 3
            } else {
                bitstream.get_value(7) + 11
            };
            if code_size_index + times_to_repeat as usize > number_of_codes {
                return Err(io::Error::new(
                    io::ErrorKind::InvalidInput,
                    format!(
                        "Invalid times to repeat: {} value out of bounds",
                        times_to_repeat
                    ),
                ));
            }
            while times_to_repeat > 0 {
                code_sizes[code_size_index] = code_size;

                code_size_index += 1;
                times_to_repeat -= 1;
            }
        }
        if code_sizes[256] == 0 {
            return Err(io::Error::new(
                io::ErrorKind::InvalidInput,
                "End-of-block code value missing in literal codes",
            ));
        }
        literals_huffman_tree.build(&code_sizes[0..number_of_literal_codes])?;
        distances_huffman_tree.build(&code_sizes[number_of_literal_codes..number_of_codes])?;

        Ok(())
    }

    /// Builds fixed (predefined) Huffman trees.
    fn build_fixed_huffman_trees(&mut self) -> io::Result<()> {
        let mut code_sizes: Vec<u8> = vec![0; 318];

        for symbol in 0..318 {
            if symbol < 144 {
                code_sizes[symbol] = 8;
            } else if symbol < 256 {
                code_sizes[symbol] = 9;
            } else if symbol < 280 {
                code_sizes[symbol] = 7;
            } else if symbol < 288 {
                code_sizes[symbol] = 8;
            } else {
                code_sizes[symbol] = 5;
            }
        }
        self.fixed_literals_huffman_tree
            .build(&code_sizes[0..288])?;
        self.fixed_distances_huffman_tree
            .build(&code_sizes[288..318])?;
        self.build_fixed_huffman_trees = true;

        Ok(())
    }

    /// Decompress data.
    pub fn decompress(
        &mut self,
        compressed_data: &[u8],
        uncompressed_data: &mut [u8],
    ) -> io::Result<()> {
        let mut bitstream: DeflateBitstream = DeflateBitstream::new(compressed_data, 0);

        self.decompress_bitstream(&mut bitstream, uncompressed_data)
    }

    /// Decompress a bitstream.
    pub(super) fn decompress_bitstream(
        &mut self,
        bitstream: &mut DeflateBitstream,
        uncompressed_data: &mut [u8],
    ) -> io::Result<()> {
        let mut uncompressed_data_offset: usize = 0;
        let uncompressed_data_size: usize = uncompressed_data.len();

        while bitstream.data_offset < bitstream.data_size {
            let mut block_header: DeflateBlockHeader = DeflateBlockHeader::new();
            block_header.read_from_bitstream(bitstream)?;

            match block_header.block_type {
                DEFLATE_BLOCK_TYPE_UNCOMPRESED => {
                    // Ignore the bits in the buffer upto the next byte.
                    let skip_bits: usize = bitstream.number_of_bits & 0x07;

                    if skip_bits > 0 {
                        bitstream.skip_bits(skip_bits);
                    }
                    let value_32bit: u32 = bitstream.get_value(32);
                    let block_size: usize = (value_32bit & 0x0000ffff) as usize;
                    let block_size_copy: usize = (value_32bit >> 16) as usize;

                    if block_size != block_size_copy {
                        return Err(io::Error::new(
                            io::ErrorKind::InvalidData,
                            format!(
                                "Mismatch in uncompressed block size: {} and copy: {}",
                                block_size, block_size_copy
                            ),
                        ));
                    }
                    if block_size > 0 {
                        bitstream.copy_bytes(
                            block_size,
                            uncompressed_data,
                            uncompressed_data_offset,
                            uncompressed_data_size,
                        )?;
                        uncompressed_data_offset += block_size;
                    }
                }
                DEFLATE_BLOCK_TYPE_HUFFMAN_FIXED => {
                    if !self.build_fixed_huffman_trees {
                        self.build_fixed_huffman_trees()?;
                    }
                    self.decompress_huffmann_encoded_block(
                        bitstream,
                        &self.fixed_literals_huffman_tree,
                        &self.fixed_distances_huffman_tree,
                        uncompressed_data,
                        &mut uncompressed_data_offset,
                        uncompressed_data_size,
                    )?;
                }
                DEFLATE_BLOCK_TYPE_HUFFMAN_DYNAMIC => {
                    let mut dynamic_literals_huffman_tree: HuffmanTree = HuffmanTree::new(288, 15);
                    let mut dynamic_distances_huffman_tree: HuffmanTree = HuffmanTree::new(30, 15);

                    self.build_dynamic_huffman_trees(
                        bitstream,
                        &mut dynamic_literals_huffman_tree,
                        &mut dynamic_distances_huffman_tree,
                    )?;
                    self.decompress_huffmann_encoded_block(
                        bitstream,
                        &dynamic_literals_huffman_tree,
                        &dynamic_distances_huffman_tree,
                        uncompressed_data,
                        &mut uncompressed_data_offset,
                        uncompressed_data_size,
                    )?;
                }
                _ => {
                    return Err(io::Error::new(
                        io::ErrorKind::InvalidData,
                        "Unsupported block type",
                    ))
                }
            }
            if block_header.last_block_flag != 0 {
                break;
            }
        }
        self.uncompressed_data_size = uncompressed_data_offset;

        Ok(())
    }

    /// Decompresses a Huffman encoded block.
    fn decompress_huffmann_encoded_block(
        &self,
        bitstream: &mut DeflateBitstream,
        literals_huffman_tree: &HuffmanTree,
        distances_huffman_tree: &HuffmanTree,
        uncompressed_data: &mut [u8],
        uncompressed_data_offset: &mut usize,
        uncompressed_data_size: usize,
    ) -> io::Result<()> {
        let mut data_offset: usize = *uncompressed_data_offset;

        loop {
            let mut symbol: u16 = literals_huffman_tree.decode_symbol(bitstream)?;

            if symbol == 256 {
                break;
            }
            if symbol < 256 {
                if data_offset >= uncompressed_data_size {
                    return Err(io::Error::new(
                        io::ErrorKind::InvalidData,
                        "Invalid uncompressed data value too small",
                    ));
                }
                uncompressed_data[data_offset] = symbol as u8;

                data_offset += 1;
            } else if symbol > 256 && symbol < 286 {
                symbol -= 257;

                let number_of_extra_bits: u16 =
                    DEFLATE_LITERAL_CODES_NUMBER_OF_EXTRA_BITS[symbol as usize];
                let extra_bits: u32 = bitstream.get_value(number_of_extra_bits as usize);
                let compression_size: usize =
                    ((DEFLATE_LITERAL_CODES_BASE[symbol as usize] as u32) + extra_bits) as usize;

                symbol = distances_huffman_tree.decode_symbol(bitstream)?;

                let number_of_extra_bits: u16 =
                    DEFLATE_DISTANCE_CODES_NUMBER_OF_EXTRA_BITS[symbol as usize];
                let extra_bits: u32 = bitstream.get_value(number_of_extra_bits as usize);
                let compression_offset: usize =
                    ((DEFLATE_DISTANCE_CODES_BASE[symbol as usize] as u32) + extra_bits) as usize;

                if compression_offset > data_offset {
                    return Err(io::Error::new(
                        io::ErrorKind::InvalidData,
                        format!(
                            "Invalid compression offset: {} value out of bounds",
                            compression_offset
                        ),
                    ));
                }
                if compression_size > uncompressed_data_size - data_offset {
                    return Err(io::Error::new(
                        io::ErrorKind::InvalidData,
                        format!(
                            "Invalid compression size: {} value out of bounds",
                            compression_size
                        ),
                    ));
                }
                let mut compression_data_offset: usize = data_offset - compression_offset;

                for _ in 0..compression_size {
                    uncompressed_data[data_offset] = uncompressed_data[compression_data_offset];

                    data_offset += 1;
                    compression_data_offset += 1;
                }
            } else {
                return Err(io::Error::new(
                    io::ErrorKind::InvalidData,
                    format!("Invalid symbol: {}", symbol),
                ));
            }
        }
        *uncompressed_data_offset = data_offset;

        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    use std::fs;

    fn get_test_data() -> Vec<u8> {
        return vec![
            0xdd, 0x5a, 0x6d, 0x73, 0x1b, 0xb7, 0x11, 0xfe, 0xee, 0x5f, 0x81, 0x72, 0xa6, 0x53,
            0x69, 0xe6, 0x4c, 0x3b, 0x69, 0xd2, 0x36, 0xce, 0x27, 0xc5, 0x92, 0x13, 0xb6, 0x8e,
            0xa4, 0x11, 0xe5, 0xba, 0x99, 0x4c, 0x3e, 0x80, 0x47, 0x1c, 0x89, 0xfa, 0x78, 0x60,
            0x81, 0x3b, 0x51, 0xec, 0xaf, 0xef, 0xb3, 0x8b, 0xd7, 0x23, 0x29, 0xd9, 0x9d, 0x7e,
            0xab, 0xc7, 0x93, 0x98, 0xe4, 0x01, 0x58, 0xec, 0xcb, 0xb3, 0xcf, 0xee, 0xde, 0x0b,
            0xf1, 0xb9, 0x3f, 0x17, 0x5b, 0x59, 0xaf, 0x95, 0x78, 0xaf, 0x6b, 0xd5, 0x39, 0xf5,
            0xe2, 0x99, 0x27, 0xff, 0xae, 0xac, 0xd3, 0xa6, 0x13, 0x5f, 0x4f, 0x5f, 0x57, 0xe2,
            0xaf, 0xb2, 0x1b, 0xa4, 0xdd, 0x8b, 0xaf, 0x5f, 0xbf, 0xfe, 0xe6, 0xc9, 0x45, 0xeb,
            0xbe, 0xdf, 0xbe, 0x79, 0xf5, 0x6a, 0xb7, 0xdb, 0x4d, 0x25, 0x1f, 0x33, 0x35, 0x76,
            0xf5, 0xaa, 0xf5, 0x47, 0xb9, 0x57, 0x2f, 0x68, 0xe1, 0xfd, 0xd5, 0xdd, 0xcf, 0x73,
            0x71, 0x71, 0x7d, 0x29, 0xde, 0xde, 0x5c, 0x5f, 0xce, 0xee, 0x67, 0x37, 0xd7, 0x73,
            0xf1, 0xee, 0xe6, 0x4e, 0x7c, 0x98, 0x5f, 0x55, 0xe2, 0xee, 0xea, 0xf6, 0xee, 0xe6,
            0xf2, 0xc3, 0x5b, 0xfa, 0xba, 0xe2, 0xa7, 0x2e, 0x67, 0xf3, 0xfb, 0xbb, 0xd9, 0x0f,
            0x1f, 0xe8, 0x1b, 0xde, 0xe0, 0xab, 0xa9, 0xb8, 0x54, 0x8d, 0xee, 0x74, 0x0f, 0xe1,
            0xdc, 0xf4, 0x45, 0x90, 0x66, 0x12, 0x6e, 0x34, 0x11, 0x6e, 0x2d, 0xdb, 0x56, 0x6c,
            0x94, 0xec, 0x44, 0x8f, 0x9b, 0xf6, 0xca, 0x6e, 0x9c, 0x90, 0xdd, 0x52, 0xd4, 0xa6,
            0x5b, 0xfa, 0x55, 0xa2, 0x31, 0x56, 0x0c, 0x4e, 0x55, 0xc2, 0xaa, 0xad, 0x35, 0xcb,
            0xa1, 0xa6, 0xaf, 0xab, 0xb0, 0x15, 0x3d, 0xbb, 0xd4, 0xae, 0xb7, 0x7a, 0x31, 0xd0,
            0xf7, 0x42, 0x3a, 0xb1, 0xa4, 0x23, 0xd5, 0x52, 0x2c, 0xf6, 0x62, 0xae, 0x6a, 0xbf,
            0xc9, 0x57, 0xd8, 0xdf, 0x9a, 0x61, 0xb5, 0x16, 0xdf, 0x09, 0xd3, 0xe0, 0x83, 0xc6,
            0x73, 0xa6, 0x1e, 0x36, 0xaa, 0xeb, 0x0f, 0xe5, 0x32, 0xf6, 0x48, 0xb0, 0xda, 0x6c,
            0xf7, 0x56, 0xaf, 0xd6, 0xbd, 0x30, 0xbb, 0x4e, 0x59, 0x01, 0x91, 0xb0, 0x50, 0xf7,
            0x7b, 0x21, 0x87, 0x7e, 0x6d, 0xac, 0xfe, 0x37, 0x9f, 0x17, 0xf6, 0x39, 0xb5, 0xa2,
            0x5f, 0xcb, 0x5e, 0xe0, 0xd0, 0x95, 0x95, 0x58, 0xd8, 0xad, 0xf8, 0xa1, 0xa0, 0x87,
            0x42, 0x00, 0xb5, 0x92, 0xad, 0xb8, 0xe2, 0xad, 0x8f, 0x84, 0x18, 0x3a, 0xba, 0x20,
            0x4b, 0xaf, 0x84, 0xac, 0x79, 0x97, 0x28, 0x05, 0xd4, 0x80, 0x67, 0xc3, 0x36, 0x06,
            0x0f, 0x04, 0x01, 0xb5, 0x72, 0xfe, 0x68, 0x28, 0xb4, 0xb7, 0xa6, 0xad, 0x84, 0xb4,
            0x2a, 0x7e, 0x68, 0x59, 0xe8, 0x8a, 0x6e, 0x43, 0xdf, 0x0e, 0xdd, 0x12, 0xcb, 0x6a,
            0xb3, 0xd9, 0x98, 0x2e, 0xec, 0x14, 0x1e, 0x14, 0x3b, 0xdd, 0xaf, 0xfd, 0x3e, 0xfe,
            0xc0, 0xa9, 0x78, 0x67, 0x2c, 0xcb, 0xb1, 0x1d, 0xec, 0xd6, 0xc0, 0x63, 0xb2, 0x56,
            0x93, 0xc1, 0xa3, 0x8d, 0x26, 0x61, 0x97, 0x09, 0x5f, 0xc5, 0x89, 0x33, 0x7d, 0xee,
            0x97, 0x9a, 0x9d, 0xb2, 0x15, 0xcc, 0x67, 0x61, 0x25, 0x12, 0x42, 0x77, 0xfe, 0xdf,
            0x95, 0xe8, 0x8d, 0xa8, 0x25, 0x8c, 0x4e, 0xcf, 0x85, 0x5d, 0xfc, 0x4f, 0xac, 0x01,
            0x2b, 0x36, 0xb2, 0x93, 0x2b, 0x45, 0xc6, 0xa3, 0x73, 0xdd, 0x50, 0xaf, 0x83, 0x60,
            0x95, 0xd8, 0xad, 0x15, 0x5f, 0x1f, 0xd6, 0xe7, 0x73, 0x25, 0xef, 0x5d, 0x6a, 0x66,
            0xa7, 0xc9, 0x9b, 0xb0, 0xcb, 0x99, 0x86, 0x24, 0x6c, 0x1e, 0xb7, 0xd6, 0x5b, 0xda,
            0xa9, 0xd1, 0x0d, 0xb4, 0xb9, 0x55, 0xb6, 0xa6, 0xad, 0xcf, 0xbe, 0x7d, 0xfd, 0xfb,
            0x73, 0x3e, 0xce, 0x40, 0x3d, 0x5e, 0xf1, 0x71, 0xa3, 0xa1, 0x77, 0x3d, 0xb4, 0x4e,
            0x36, 0x80, 0x99, 0xac, 0x72, 0x71, 0x47, 0x6c, 0xb9, 0x50, 0x1d, 0x94, 0x50, 0x6b,
            0x98, 0x72, 0xb4, 0x7b, 0x21, 0x67, 0x36, 0xf9, 0x2f, 0x66, 0x98, 0x88, 0x33, 0xac,
            0xa5, 0x7f, 0xd9, 0xc9, 0x79, 0x69, 0x75, 0xfc, 0x25, 0x9d, 0x3c, 0xe8, 0xe5, 0x40,
            0x7b, 0x59, 0x51, 0xfa, 0x47, 0xd8, 0x40, 0x3d, 0x42, 0x5a, 0xed, 0x48, 0x10, 0xc8,
            0xbd, 0xd1, 0xce, 0xb1, 0xc3, 0xb3, 0x9f, 0xf9, 0x20, 0x60, 0xb3, 0x1c, 0xb9, 0xda,
            0x1c, 0xa7, 0xd5, 0x08, 0x41, 0x84, 0xd7, 0xe6, 0xd0, 0xd3, 0xb6, 0x56, 0x35, 0xca,
            0x5a, 0x2c, 0xe7, 0x5f, 0x1b, 0xd6, 0xf8, 0x27, 0x3a, 0x62, 0x63, 0x96, 0x1a, 0x57,
            0x93, 0x1c, 0x55, 0xd1, 0xc0, 0xba, 0xab, 0xdb, 0x81, 0x55, 0x81, 0x20, 0x14, 0x9d,
            0xe9, 0x45, 0xab, 0x37, 0x9a, 0x4e, 0x87, 0x1d, 0x9d, 0x69, 0xfa, 0x1d, 0xb9, 0x97,
            0xe3, 0x03, 0x61, 0x94, 0x25, 0xb4, 0x1f, 0x63, 0x8f, 0x37, 0x0a, 0xdb, 0xf8, 0x07,
            0xaa, 0x18, 0xff, 0x8d, 0x5e, 0x0d, 0x96, 0x7f, 0x87, 0x59, 0x5a, 0x55, 0xc0, 0xc7,
            0xcd, 0xe2, 0x9f, 0x70, 0x85, 0x63, 0xd1, 0x65, 0xb7, 0xf7, 0xdf, 0xc1, 0x1c, 0x43,
            0xcb, 0xf1, 0xd1, 0x58, 0xb3, 0xc1, 0x8f, 0xf5, 0x5a, 0x76, 0x90, 0x3a, 0x06, 0x08,
            0xbc, 0xa2, 0x73, 0xf4, 0xa4, 0x8c, 0x0e, 0xc5, 0xdf, 0xb4, 0xe1, 0x63, 0x23, 0xa4,
            0xf0, 0xea, 0xe1, 0xed, 0xaa, 0xf1, 0x05, 0xc3, 0x1e, 0x07, 0xd7, 0x44, 0xd8, 0x6c,
            0x35, 0x05, 0x94, 0x61, 0xe1, 0xc2, 0x35, 0x57, 0xf0, 0x04, 0xdc, 0x01, 0x5f, 0x8f,
            0x2e, 0x5c, 0xa2, 0x17, 0x6e, 0xfa, 0xe0, 0xd1, 0xdb, 0xd1, 0x3e, 0x3e, 0x76, 0x37,
            0x6a, 0xa9, 0xa5, 0xe8, 0xf7, 0xdb, 0xf2, 0xda, 0x1f, 0x8d, 0xfd, 0x74, 0x04, 0x0a,
            0x3b, 0x7c, 0xc9, 0x12, 0x33, 0x0e, 0x91, 0xa7, 0xe5, 0x10, 0xd0, 0x5d, 0xbc, 0x46,
            0x0a, 0x00, 0xaf, 0xba, 0x70, 0xad, 0x8d, 0x5c, 0x02, 0x48, 0x1e, 0xa4, 0x6e, 0xe5,
            0xa2, 0x8d, 0xf1, 0x5f, 0xe0, 0x52, 0x45, 0x68, 0x4a, 0x0e, 0x58, 0xcb, 0xe0, 0x4a,
            0x32, 0xe1, 0x42, 0x44, 0x37, 0xa8, 0x01, 0x0f, 0x27, 0x78, 0xf3, 0x9a, 0xc2, 0xc3,
            0x9a, 0xd5, 0x2a, 0xfb, 0x9e, 0x72, 0x0b, 0x6b, 0x28, 0x4a, 0x1b, 0xb6, 0x38, 0xc3,
            0x05, 0xd4, 0xa3, 0xdc, 0x6c, 0x71, 0x32, 0x16, 0x02, 0xda, 0xe1, 0xe6, 0x7e, 0x21,
            0x3d, 0x79, 0xb1, 0xdd, 0x2a, 0x9c, 0xfc, 0x88, 0x60, 0x6a, 0xcd, 0xee, 0x3c, 0x6b,
            0xe1, 0x52, 0x59, 0xfd, 0x00, 0x2d, 0x3e, 0x28, 0x41, 0x0a, 0x71, 0x93, 0x43, 0x0f,
            0xa0, 0x33, 0x4e, 0xeb, 0x20, 0xdc, 0x3e, 0xec, 0xe4, 0x75, 0x10, 0x05, 0x5f, 0x48,
            0x47, 0xc6, 0xeb, 0x38, 0x14, 0x97, 0x74, 0x06, 0x79, 0x3f, 0xbc, 0xc7, 0x63, 0x15,
            0x1d, 0xc5, 0xe6, 0xa2, 0x58, 0xd8, 0xad, 0x75, 0xbd, 0x2e, 0xc0, 0x00, 0xc6, 0xea,
            0x91, 0x03, 0x10, 0x99, 0x56, 0x3d, 0x68, 0x36, 0x25, 0x79, 0x31, 0x54, 0x13, 0xe2,
            0x44, 0x28, 0x68, 0xd8, 0xd8, 0xf8, 0x09, 0x5b, 0x04, 0x33, 0x97, 0xd1, 0x14, 0x36,
            0xa3, 0x2c, 0xa7, 0x1c, 0x3c, 0x85, 0xb5, 0x2f, 0x71, 0x98, 0x69, 0x39, 0x28, 0xb0,
            0x4c, 0xaf, 0x74, 0x87, 0x53, 0x8e, 0x6d, 0x7e, 0x8c, 0xc7, 0x11, 0xa7, 0x9a, 0x51,
            0xf8, 0x57, 0xe2, 0x50, 0x7d, 0x41, 0x7b, 0xe4, 0xcd, 0xc1, 0x76, 0xbc, 0x7d, 0xc8,
            0x1a, 0x56, 0x6d, 0xa4, 0x4e, 0xf1, 0xa9, 0xb6, 0xd2, 0xb2, 0xa7, 0x90, 0x5e, 0xf8,
            0x1a, 0x1b, 0x65, 0x55, 0xbb, 0x47, 0x1c, 0x74, 0x9f, 0x58, 0x71, 0x0b, 0x78, 0x0b,
            0xf9, 0x49, 0x27, 0x37, 0xea, 0x3c, 0x1a, 0x5d, 0x03, 0x88, 0x6c, 0x23, 0x6b, 0x4e,
            0x12, 0x55, 0x91, 0x23, 0x93, 0x52, 0x8f, 0x84, 0x22, 0xed, 0x28, 0xd3, 0x64, 0xab,
            0xbf, 0x25, 0x28, 0x0f, 0x39, 0xfe, 0xa4, 0xc5, 0x0f, 0x63, 0x20, 0x85, 0x6c, 0x71,
            0x5e, 0x52, 0x60, 0x08, 0xb8, 0x98, 0x4b, 0x93, 0x1c, 0xb4, 0xd9, 0xc8, 0x26, 0xec,
            0xc3, 0xcb, 0xc0, 0x44, 0xe2, 0x4e, 0xc6, 0xeb, 0x86, 0x57, 0xe1, 0xf7, 0xa7, 0x84,
            0xaf, 0x8a, 0xa0, 0xe8, 0x09, 0xf5, 0x0d, 0x8e, 0x6e, 0x23, 0x6c, 0xbb, 0x61, 0x01,
            0xec, 0x08, 0xe0, 0x11, 0x79, 0x07, 0x7b, 0x17, 0x4b, 0xce, 0xe2, 0x85, 0x50, 0xe0,
            0x83, 0x18, 0xc7, 0x8f, 0x68, 0x45, 0xb4, 0x32, 0xa7, 0xbb, 0x67, 0xb3, 0x45, 0x49,
            0x54, 0x08, 0x95, 0xf9, 0x78, 0xf2, 0xf7, 0x85, 0x82, 0x32, 0x1b, 0xa8, 0xe2, 0x69,
            0xf2, 0xf2, 0x65, 0xd9, 0x5e, 0x4c, 0xd2, 0x9d, 0x26, 0x61, 0x2f, 0x9f, 0xef, 0x13,
            0x2c, 0x63, 0x91, 0x6a, 0x11, 0x80, 0xd6, 0x00, 0x8c, 0x2b, 0xb2, 0xc2, 0x42, 0xb6,
            0xec, 0x47, 0x3b, 0x4b, 0xeb, 0x3a, 0x26, 0x1f, 0x43, 0x17, 0xb4, 0x2f, 0x28, 0x0a,
            0x4a, 0xa5, 0xab, 0xac, 0x28, 0xd2, 0x53, 0xef, 0x72, 0xb0, 0xb0, 0xfe, 0x5d, 0xf5,
            0x6c, 0x2a, 0x4a, 0xd8, 0x55, 0x9e, 0x81, 0xbf, 0x59, 0x26, 0x20, 0xa2, 0x6e, 0x69,
            0x71, 0x0b, 0x4a, 0x89, 0xdd, 0x8a, 0x94, 0x95, 0xa8, 0x90, 0xdb, 0xbb, 0x5e, 0x6d,
            0x5c, 0x09, 0xe1, 0xc8, 0xb9, 0x83, 0xa2, 0x14, 0x52, 0x73, 0x8e, 0x0c, 0x4f, 0x78,
            0xf3, 0x53, 0xe6, 0xf3, 0x6c, 0x25, 0x71, 0xad, 0x52, 0xe9, 0x55, 0x01, 0x23, 0x23,
            0x2f, 0x28, 0xb4, 0x4d, 0x7a, 0x03, 0xc7, 0xad, 0x07, 0xc7, 0x59, 0x9e, 0x4f, 0xdc,
            0x30, 0x5e, 0x06, 0x1a, 0xf9, 0x91, 0x11, 0x2f, 0xa7, 0x26, 0xf5, 0x18, 0x95, 0x30,
            0xbe, 0x6b, 0xf4, 0x47, 0x5c, 0xc5, 0x6d, 0x75, 0x3d, 0x98, 0xc1, 0x21, 0x78, 0x37,
            0xd2, 0x7e, 0x22, 0xe8, 0xb3, 0x99, 0x1d, 0x45, 0xca, 0xa5, 0x9c, 0x5e, 0x75, 0x8c,
            0xfd, 0x70, 0x45, 0xb2, 0x11, 0x2b, 0xf6, 0xa4, 0x27, 0x12, 0x58, 0x4d, 0xae, 0xa1,
            0x6f, 0x29, 0xca, 0x58, 0x9d, 0x4e, 0x8e, 0x43, 0xf8, 0x80, 0x5f, 0xa7, 0x6b, 0xc7,
            0x08, 0xfc, 0x2c, 0xe5, 0x29, 0x15, 0x48, 0xf8, 0xb8, 0x39, 0x38, 0x54, 0xac, 0x21,
            0xcc, 0x42, 0xc1, 0x9f, 0x40, 0x19, 0x15, 0x23, 0x39, 0x84, 0x2e, 0xcf, 0xc9, 0x41,
            0xe8, 0xd4, 0xbf, 0x06, 0xf8, 0x4f, 0x4b, 0xc7, 0xd6, 0x06, 0xfa, 0xf6, 0xe9, 0x9a,
            0x08, 0x6f, 0x11, 0x7e, 0x1e, 0x88, 0xbe, 0x9e, 0x8a, 0x1f, 0x89, 0x56, 0xd1, 0xb1,
            0x6f, 0xd3, 0xf5, 0x23, 0xb3, 0x12, 0xf3, 0xc1, 0x27, 0xd7, 0xe0, 0xab, 0x27, 0x8b,
            0x99, 0x22, 0xcc, 0x4a, 0x54, 0x56, 0xc8, 0x92, 0xa2, 0x50, 0x90, 0x20, 0x08, 0x81,
            0xcc, 0xcc, 0xe2, 0x98, 0x17, 0x80, 0x1c, 0xe2, 0x96, 0x60, 0x78, 0x5b, 0xd5, 0x43,
            0x33, 0xd1, 0xfd, 0x00, 0x7d, 0xed, 0x72, 0xa7, 0x89, 0x6b, 0x74, 0xa6, 0x7b, 0xc9,
            0x96, 0x77, 0xb8, 0x31, 0x7d, 0x7c, 0x09, 0xd6, 0x63, 0x57, 0x54, 0x38, 0x99, 0xbd,
            0x6c, 0xfb, 0xfd, 0xcb, 0xc6, 0x2a, 0x7c, 0xd2, 0x20, 0x76, 0x0f, 0xa6, 0x26, 0x20,
            0x3f, 0xca, 0xe6, 0xa1, 0xfe, 0xa3, 0x03, 0x63, 0xb5, 0x85, 0x15, 0x88, 0xb1, 0x2d,
            0xf9, 0xf1, 0x11, 0xd2, 0x65, 0x38, 0xdf, 0x0e, 0x0b, 0xac, 0x85, 0x16, 0xe1, 0xa8,
            0xdb, 0x56, 0xc2, 0xd1, 0xd3, 0x37, 0x90, 0xd9, 0xa7, 0x5a, 0xc7, 0xdf, 0x04, 0x62,
            0x51, 0xd6, 0x6d, 0x25, 0xcd, 0x4f, 0x58, 0xcc, 0x64, 0xf9, 0xe8, 0xc4, 0x13, 0xe9,
            0x9c, 0xb1, 0xc5, 0x1b, 0xe8, 0x8f, 0x85, 0x81, 0x6e, 0x25, 0x81, 0xee, 0xff, 0x81,
            0x75, 0xce, 0xb0, 0x4c, 0x6d, 0x7b, 0x0a, 0x30, 0x94, 0x1c, 0x7d, 0xa4, 0x48, 0x10,
            0xd0, 0xf9, 0x82, 0xe8, 0x5c, 0x6c, 0xfd, 0x5d, 0x0b, 0xeb, 0x81, 0xae, 0x63, 0xb3,
            0xb5, 0x7c, 0x50, 0xcc, 0xf2, 0xa2, 0x40, 0x5c, 0x47, 0x9b, 0xa6, 0x21, 0x9e, 0x87,
            0x24, 0xa0, 0x5a, 0xc0, 0xaf, 0xff, 0x2f, 0x10, 0xc5, 0xd8, 0xde, 0x1b, 0x26, 0xe1,
            0x40, 0x20, 0xca, 0x81, 0x15, 0x32, 0xcc, 0xc4, 0x9b, 0x91, 0x0a, 0xbc, 0x8d, 0xe2,
            0xa9, 0x72, 0xbb, 0x6d, 0xa9, 0xdc, 0x34, 0x1d, 0x8c, 0xce, 0x5a, 0x26, 0xec, 0x0a,
            0xa2, 0xd5, 0xad, 0xd4, 0xd0, 0xb7, 0x7f, 0xb6, 0xb8, 0x1c, 0xb4, 0xc8, 0x9b, 0x94,
            0xda, 0x4d, 0xb8, 0xd9, 0x21, 0x7a, 0x9d, 0x93, 0x56, 0x73, 0x74, 0x36, 0x16, 0xe8,
            0x13, 0x2b, 0x1a, 0xa5, 0x63, 0xee, 0x2b, 0x03, 0xff, 0xcc, 0x9d, 0xa3, 0x0c, 0x36,
            0x9d, 0x0a, 0x19, 0x11, 0xf0, 0x07, 0x46, 0x92, 0x58, 0x3d, 0x2f, 0x3b, 0x5c, 0x10,
            0x2f, 0xe4, 0x2b, 0xdc, 0x90, 0x6d, 0x21, 0xbe, 0x27, 0x79, 0x63, 0xe1, 0xc2, 0x11,
            0x3b, 0x32, 0x45, 0xcc, 0x75, 0x53, 0x31, 0x6b, 0xc8, 0xfe, 0xa9, 0x16, 0x72, 0x40,
            0x2a, 0xf2, 0xe9, 0x64, 0x94, 0x5e, 0xaf, 0xbc, 0x08, 0x72, 0x25, 0xe9, 0x67, 0x06,
            0xb9, 0x50, 0xb8, 0x9f, 0xe5, 0x84, 0x95, 0xb8, 0xb5, 0x35, 0xce, 0xbd, 0x64, 0x85,
            0xd1, 0x35, 0x6a, 0x33, 0x10, 0x7f, 0xf2, 0x9f, 0x61, 0x79, 0x29, 0x5a, 0xb9, 0x73,
            0x83, 0xee, 0xe9, 0xaa, 0xad, 0x5a, 0xf9, 0x24, 0x00, 0x8d, 0x45, 0xe1, 0x33, 0x27,
            0x38, 0x40, 0xc5, 0xe7, 0x00, 0x8e, 0x73, 0x82, 0x17, 0xdc, 0x85, 0x52, 0x3b, 0xef,
            0x53, 0x67, 0xe3, 0xec, 0xe3, 0xb5, 0xa2, 0x3d, 0x36, 0xcc, 0x54, 0xb1, 0x8d, 0xa7,
            0x62, 0x63, 0x4f, 0x8c, 0x94, 0x29, 0x16, 0xa3, 0x21, 0x52, 0x62, 0xa1, 0x91, 0x63,
            0x2c, 0xa4, 0xbc, 0xc8, 0xaa, 0x7c, 0x76, 0xa0, 0x10, 0x25, 0xeb, 0x45, 0x5f, 0x91,
            0x2e, 0x12, 0xb6, 0x25, 0xbe, 0x8c, 0xce, 0x97, 0xb4, 0x8b, 0xdd, 0xa8, 0x4e, 0x5c,
            0x7a, 0x28, 0xf8, 0x66, 0x2a, 0xee, 0x54, 0xd9, 0x19, 0x9a, 0xf2, 0xd1, 0x1b, 0xb9,
            0xcf, 0xc8, 0x76, 0x88, 0x42, 0xc0, 0x41, 0x1d, 0xb9, 0xcd, 0x08, 0x8f, 0x9e, 0x61,
            0x79, 0x6c, 0x12, 0xa2, 0x8d, 0x38, 0x6c, 0x00, 0xc8, 0xb1, 0x1f, 0x11, 0xa3, 0xc1,
            0xff, 0x4d, 0xca, 0xc8, 0xe3, 0xb2, 0xd9, 0xa7, 0xf0, 0x27, 0x90, 0xac, 0xca, 0xa5,
            0x10, 0x2b, 0x24, 0xbb, 0xd6, 0x46, 0x29, 0x6f, 0xe5, 0x06, 0xad, 0x1b, 0xb3, 0xf3,
            0xf9, 0x3d, 0x62, 0xd7, 0x9b, 0x17, 0xa9, 0xae, 0x3a, 0xf7, 0x37, 0x1d, 0xe0, 0x69,
            0x2b, 0x92, 0x97, 0xc4, 0xf3, 0xf5, 0x06, 0xcc, 0xaa, 0x71, 0x45, 0x02, 0xad, 0x92,
            0xfa, 0xa6, 0xea, 0x90, 0xfe, 0x1c, 0x5d, 0x54, 0x72, 0x7e, 0x38, 0xac, 0x24, 0xbe,
            0xe7, 0x34, 0x1a, 0xcf, 0x5c, 0x14, 0x67, 0xfa, 0xc6, 0x4d, 0xa6, 0xd2, 0x54, 0x47,
            0x51, 0xfd, 0xee, 0x9b, 0x3a, 0x96, 0x5c, 0x08, 0xe5, 0x03, 0x3a, 0x74, 0x5d, 0xac,
            0x1e, 0x5d, 0x71, 0x3c, 0x41, 0x5c, 0x72, 0x69, 0xda, 0x93, 0x4a, 0xf7, 0x15, 0x2b,
            0x43, 0xf9, 0x7d, 0xc6, 0x27, 0xd7, 0xc5, 0xc9, 0x56, 0xf5, 0x08, 0xb0, 0x2a, 0xf2,
            0xe6, 0xa2, 0x84, 0xe7, 0xea, 0x00, 0x12, 0x1d, 0x5e, 0xae, 0x38, 0x38, 0x1d, 0x98,
            0x1d, 0xa2, 0xa2, 0x08, 0xcb, 0xd9, 0xb1, 0x0a, 0xde, 0x5d, 0x11, 0x2c, 0x2e, 0x15,
            0xf1, 0xa6, 0xaa, 0x20, 0x13, 0xec, 0xa2, 0x7d, 0x0e, 0xb7, 0x70, 0x37, 0xdf, 0x82,
            0x38, 0x21, 0xcf, 0x21, 0xa4, 0x8e, 0x99, 0x9b, 0x47, 0xcf, 0xb8, 0x07, 0x0b, 0xb7,
            0x34, 0x4c, 0x68, 0x91, 0x65, 0xe8, 0x9a, 0xa4, 0x4e, 0x1f, 0x71, 0xb6, 0xcf, 0x89,
            0x2b, 0x32, 0xf8, 0xc3, 0x8b, 0x8e, 0x95, 0xb6, 0x3c, 0x27, 0xd0, 0x4a, 0xf6, 0x0f,
            0x85, 0x1f, 0x99, 0x7a, 0x72, 0x7d, 0x73, 0x3f, 0x7b, 0x7b, 0x35, 0x41, 0xf0, 0x3d,
            0xf6, 0xac, 0x6f, 0x0a, 0xbb, 0x70, 0x06, 0x51, 0xee, 0xe2, 0x9c, 0x32, 0xba, 0x0a,
            0x08, 0x38, 0x11, 0x29, 0x47, 0x9a, 0x65, 0x7b, 0x15, 0x5b, 0xc5, 0xd2, 0x53, 0xc2,
            0x86, 0x72, 0xc9, 0x35, 0x66, 0x76, 0x3a, 0x75, 0x52, 0xad, 0x04, 0x4a, 0x92, 0xfa,
            0xbc, 0xc5, 0x36, 0x01, 0xd4, 0x18, 0x19, 0xfc, 0x45, 0xf8, 0x0a, 0xd5, 0x97, 0xe8,
            0xb5, 0xd8, 0xe6, 0xb4, 0x86, 0x4f, 0xea, 0x95, 0x9d, 0x0d, 0x7b, 0xb4, 0x4a, 0x3a,
            0x2a, 0xa7, 0xca, 0x2e, 0x7d, 0x58, 0x92, 0xa3, 0x15, 0xc4, 0x08, 0x87, 0xbe, 0x89,
            0x62, 0xca, 0x28, 0x63, 0xd6, 0x75, 0xd6, 0xd0, 0xc8, 0xab, 0xdc, 0xb3, 0x32, 0x7c,
            0x5f, 0x82, 0xf9, 0xc8, 0xc9, 0xca, 0xb8, 0x1e, 0x37, 0xa0, 0x84, 0x6e, 0x32, 0xce,
            0x50, 0xca, 0x5c, 0xe5, 0x0c, 0x78, 0xbc, 0xbf, 0xb1, 0xd5, 0xb1, 0x96, 0x65, 0xe4,
            0x7a, 0x45, 0x97, 0x2b, 0xd4, 0x06, 0x27, 0xb4, 0xd4, 0x1c, 0x44, 0x0a, 0x13, 0x08,
            0x54, 0x80, 0xde, 0x58, 0xd8, 0xd0, 0x2e, 0x5f, 0xd2, 0x25, 0xf7, 0xc9, 0x36, 0x1d,
            0xf5, 0xe7, 0x50, 0x30, 0x13, 0xb1, 0x50, 0x12, 0x45, 0xe8, 0xfd, 0xda, 0x57, 0x61,
            0x84, 0x5f, 0xc7, 0x6a, 0x2e, 0xec, 0xcd, 0xe4, 0xc1, 0x97, 0xd2, 0xa9, 0xc9, 0x87,
            0x1a, 0x22, 0x17, 0xaf, 0xc4, 0x50, 0xc6, 0xe2, 0x84, 0xd8, 0x62, 0xc4, 0xda, 0x8f,
            0x7a, 0xf3, 0x29, 0x6d, 0xa0, 0x0f, 0x40, 0xff, 0xb6, 0x54, 0xef, 0x94, 0x1e, 0x59,
            0xec, 0x12, 0x45, 0x0f, 0x1a, 0xfa, 0x92, 0x48, 0xa8, 0xbc, 0xf6, 0x1d, 0x0c, 0x51,
            0xde, 0x89, 0xeb, 0x29, 0x6a, 0x6f, 0x2c, 0x97, 0x68, 0x83, 0x0d, 0x9b, 0x48, 0x5b,
            0x47, 0x1e, 0x13, 0x81, 0xc5, 0xd7, 0x7f, 0xd1, 0x9c, 0x87, 0x98, 0xc6, 0x0a, 0x8e,
            0x4d, 0x0c, 0xa8, 0xe1, 0x64, 0x30, 0x71, 0xb7, 0x0a, 0x35, 0x93, 0xe7, 0x01, 0x76,
            0x38, 0xf4, 0x3f, 0xaf, 0x98, 0xa7, 0xe6, 0x16, 0x27, 0x55, 0x94, 0xab, 0x0a, 0xa6,
            0xad, 0xdc, 0xac, 0xf7, 0x04, 0xe0, 0xa0, 0xf1, 0x55, 0x98, 0x82, 0x36, 0x09, 0xf7,
            0x28, 0x45, 0xa6, 0x96, 0x9c, 0x26, 0xd6, 0x3a, 0x62, 0xb9, 0x27, 0x18, 0x7c, 0x6e,
            0xed, 0x9d, 0x18, 0x19, 0xf9, 0x6d, 0x8a, 0x59, 0x91, 0x69, 0x4e, 0x48, 0x53, 0xe5,
            0xb0, 0x69, 0xb8, 0x58, 0xdc, 0x3f, 0x51, 0x8a, 0x94, 0xdd, 0xb9, 0x14, 0x4a, 0xbc,
            0x1f, 0x1d, 0x5d, 0x74, 0xf3, 0xb2, 0x00, 0x47, 0xd3, 0xaa, 0x51, 0x16, 0x4e, 0xac,
            0x9b, 0x7a, 0xc9, 0x4c, 0xa5, 0xc9, 0x8f, 0x46, 0x6d, 0x99, 0x54, 0xa9, 0x1c, 0x54,
            0x02, 0x23, 0x83, 0x7c, 0xcb, 0xc5, 0x4e, 0x98, 0x04, 0xf8, 0x5a, 0x35, 0xb3, 0x40,
            0x37, 0x15, 0x1f, 0x3a, 0x64, 0x51, 0xc7, 0x46, 0x53, 0x8f, 0x38, 0xa8, 0xd6, 0x54,
            0xfe, 0xf2, 0x8e, 0xc5, 0x80, 0x24, 0xf5, 0x37, 0xf6, 0x87, 0x2c, 0xb2, 0x68, 0x66,
            0x15, 0x6d, 0xac, 0x27, 0x5b, 0x57, 0x99, 0xe9, 0xd3, 0x89, 0x87, 0x8d, 0x1c, 0x4f,
            0xf5, 0x16, 0x65, 0xf7, 0xf9, 0xbf, 0x29, 0xcd, 0x02, 0xcd, 0x62, 0x31, 0x0b, 0x87,
            0xf1, 0x5b, 0x78, 0xea, 0xba, 0x8c, 0xd3, 0x47, 0xbf, 0x1e, 0x3d, 0x0a, 0x5a, 0x94,
            0xa6, 0x37, 0x9c, 0x5f, 0x16, 0xc6, 0x17, 0x65, 0x14, 0xb6, 0x2b, 0x2e, 0xef, 0x28,
            0x8d, 0xb0, 0x68, 0x6e, 0x40, 0x3a, 0x40, 0x6f, 0x58, 0xf9, 0x41, 0x10, 0x85, 0x41,
            0x61, 0x92, 0x70, 0x90, 0x67, 0x17, 0xbe, 0x41, 0x0a, 0x2d, 0xa6, 0x92, 0x68, 0x85,
            0x9a, 0x8e, 0x1d, 0x7f, 0x1f, 0x22, 0x84, 0x2b, 0x32, 0x8c, 0x6c, 0xea, 0x02, 0xe2,
            0x19, 0x78, 0x93, 0x42, 0x2c, 0xfa, 0x1d, 0xd6, 0xcf, 0x95, 0x0e, 0x6b, 0x8f, 0x30,
            0x0b, 0xf8, 0x13, 0xa0, 0x30, 0x12, 0x10, 0x47, 0xb0, 0x58, 0xf0, 0xe8, 0xa5, 0x61,
            0xe4, 0xec, 0x3d, 0xe5, 0x2e, 0x26, 0x42, 0xa4, 0xf8, 0x30, 0x50, 0xf3, 0xf4, 0x25,
            0x8e, 0x31, 0xd0, 0xa9, 0x75, 0x05, 0xa3, 0xa1, 0xae, 0x97, 0xb2, 0x0f, 0xd4, 0xd3,
            0x0f, 0x1f, 0x21, 0x53, 0xf0, 0x61, 0xff, 0x70, 0x74, 0xda, 0x28, 0x71, 0x95, 0xbb,
            0x4e, 0xa1, 0x4c, 0xb5, 0xe8, 0xa9, 0xe8, 0x30, 0x3d, 0xa2, 0x84, 0xee, 0x60, 0x13,
            0x4a, 0xe9, 0x6c, 0x52, 0x24, 0x7e, 0xb3, 0xa1, 0xf1, 0x34, 0x49, 0x03, 0x2d, 0x83,
            0x77, 0xd4, 0xb8, 0x60, 0x30, 0x45, 0x2a, 0x3a, 0xa8, 0x53, 0x7b, 0xd4, 0x9f, 0x8d,
            0xd1, 0x14, 0xed, 0x16, 0xb2, 0xc1, 0x89, 0x14, 0xe0, 0x35, 0xf5, 0x67, 0xcc, 0x9f,
            0xd1, 0x38, 0xa3, 0xd2, 0x89, 0x86, 0xb6, 0x8d, 0xf8, 0x08, 0xfe, 0x09, 0xbd, 0xec,
            0x53, 0x10, 0x24, 0x51, 0x17, 0x7b, 0x5f, 0xc0, 0x72, 0xe5, 0x4d, 0x25, 0x56, 0x86,
            0x01, 0xb6, 0x22, 0x17, 0x2f, 0xb9, 0x0b, 0x56, 0x65, 0x83, 0x85, 0xd8, 0x77, 0x59,
            0xd4, 0x33, 0x92, 0x95, 0x9a, 0x06, 0x87, 0x25, 0x6a, 0xf9, 0x34, 0xb5, 0x2f, 0x47,
            0xc6, 0x3d, 0xa7, 0xbe, 0x16, 0x20, 0x7f, 0x72, 0x31, 0x17, 0xb3, 0xf9, 0x44, 0xfc,
            0x70, 0x31, 0x9f, 0xcd, 0xa3, 0x72, 0x3f, 0xce, 0xee, 0x7f, 0xba, 0xf9, 0x70, 0x2f,
            0x3e, 0x5e, 0xdc, 0xdd, 0x5d, 0x5c, 0xdf, 0xcf, 0xae, 0xe6, 0x02, 0x73, 0xf8, 0x62,
            0x2c, 0x7f, 0xf3, 0x0e, 0x23, 0xf8, 0x5f, 0xc4, 0xdf, 0x66, 0xd7, 0x97, 0xa0, 0x3b,
            0xda, 0x4f, 0x80, 0x1f, 0xa9, 0x3b, 0xea, 0xf2, 0x4d, 0x34, 0xe3, 0xca, 0xb2, 0x68,
            0x93, 0xe6, 0x08, 0xe2, 0x3e, 0xa9, 0x8c, 0x38, 0x85, 0xa6, 0xba, 0x57, 0x15, 0x17,
            0x44, 0xf6, 0x18, 0x62, 0xa1, 0xcc, 0xfb, 0xd9, 0xfd, 0x7b, 0xbc, 0x07, 0x70, 0x7d,
            0x73, 0xfd, 0x72, 0x76, 0xfd, 0xee, 0x6e, 0x76, 0xfd, 0xe3, 0xd5, 0xcf, 0x57, 0xd7,
            0xf7, 0x95, 0xf8, 0xf9, 0xea, 0xee, 0xed, 0x4f, 0x90, 0xf2, 0xe2, 0x87, 0xd9, 0xfb,
            0xd9, 0xfd, 0x2f, 0xec, 0x42, 0xef, 0x66, 0xf7, 0xd7, 0x57, 0x73, 0xff, 0xfa, 0xc0,
            0x45, 0xd8, 0xe3, 0xf6, 0xe2, 0x0e, 0x06, 0xfb, 0xf0, 0xfe, 0xe2, 0x4e, 0xdc, 0x7e,
            0xb8, 0xbb, 0xbd, 0x99, 0x5f, 0xf9, 0x6c, 0xeb, 0xa7, 0x85, 0x2d, 0x4d, 0x16, 0x20,
            0xff, 0x16, 0x87, 0x6a, 0x9e, 0x3a, 0xf0, 0x64, 0xc6, 0x57, 0x85, 0x63, 0x77, 0x81,
            0xe5, 0xac, 0xd9, 0x62, 0x02, 0x03, 0x6f, 0xe0, 0x0b, 0x37, 0xf0, 0x2e, 0x7a, 0x84,
            0xfd, 0x2f, 0x23, 0x6e, 0xd1, 0x2f, 0xf5, 0xdd, 0x46, 0x34, 0x6e, 0x37, 0x5c, 0xab,
            0x44, 0xb8, 0xd6, 0x8e, 0x91, 0xdd, 0x99, 0x5a, 0xa7, 0x32, 0xd9, 0x83, 0x7a, 0x98,
            0xb3, 0x72, 0x37, 0xb6, 0x1c, 0xb4, 0x1e, 0x17, 0xb3, 0xde, 0xf7, 0xfe, 0x32, 0xc5,
            0xe7, 0xa8, 0x52, 0x5a, 0xf4, 0x5e, 0xcb, 0x05, 0xba, 0xcb, 0xe4, 0x7c, 0x33, 0xca,
            0xbc, 0x02, 0xf4, 0xa7, 0xeb, 0x59, 0x0e, 0xbf, 0x07, 0xbe, 0x6a, 0xb9, 0xd9, 0x09,
            0x19, 0x51, 0x69, 0x17, 0xad, 0x96, 0x38, 0xc9, 0x82, 0x03, 0xf5, 0x65, 0xcb, 0xa0,
            0x53, 0xab, 0x56, 0x83, 0x7d, 0xd5, 0xea, 0xbc, 0x4a, 0xd3, 0xee, 0x6a, 0xd4, 0xca,
            0x4d, 0x9d, 0x9f, 0xcf, 0xfa, 0xfb, 0x99, 0x27, 0x0a, 0xd4, 0xd3, 0x6f, 0xf5, 0x82,
            0x09, 0x1d, 0x0b, 0xb7, 0xa2, 0x7e, 0x44, 0x9a, 0x5b, 0xc4, 0x23, 0x7b, 0x7a, 0x03,
            0xc1, 0xf1, 0x74, 0xfc, 0x74, 0x7c, 0x78, 0xf4, 0x1c, 0xa5, 0x0f, 0x6a, 0xca, 0x44,
            0x93, 0xb5, 0x9a, 0x0f, 0x0e, 0x1d, 0x01, 0x36, 0xad, 0xdc, 0xa0, 0x4b, 0x3e, 0xea,
            0xe1, 0xd3, 0xea, 0xf8, 0x4a, 0x40, 0x7e, 0x39, 0xc0, 0x6d, 0x15, 0xcd, 0xd6, 0x8b,
            0xe9, 0x33, 0x02, 0x0a, 0xc4, 0xd6, 0x8f, 0x12, 0x88, 0xc0, 0xf8, 0x9e, 0x2e, 0x0d,
            0xe4, 0xc2, 0xa6, 0x11, 0xa1, 0xa9, 0xe7, 0x06, 0xb9, 0xa9, 0x5d, 0x6d, 0xfd, 0xcc,
            0x9c, 0xb2, 0x78, 0xca, 0xd5, 0x34, 0x35, 0x3e, 0x2c, 0x74, 0x59, 0x9b, 0x43, 0xc2,
            0x98, 0xc1, 0x7f, 0x83, 0xbe, 0x84, 0x37, 0x66, 0x81, 0xab, 0x65, 0xc7, 0xe0, 0xec,
            0xd9, 0x99, 0x78, 0x94, 0x8a, 0xae, 0xdd, 0x1a, 0xef, 0xb0, 0x2b, 0x63, 0xd0, 0x2a,
            0x6c, 0xcb, 0xde, 0x21, 0x1a, 0x21, 0xbd, 0xd9, 0x6e, 0x25, 0x75, 0x09, 0x89, 0x13,
            0x0c, 0x24, 0x78, 0x83, 0x11, 0xc5, 0x60, 0x7d, 0x36, 0x42, 0x0b, 0x7c, 0xe8, 0x32,
            0xb9, 0xe1, 0x24, 0x78, 0xe2, 0x4d, 0x10, 0x9a, 0x02, 0x90, 0xf3, 0x96, 0xfa, 0xf0,
            0x07, 0x2b, 0x07, 0xc7, 0x21, 0x3f, 0x24, 0x82, 0x7e, 0xd8, 0x88, 0x0b, 0x7b, 0xa4,
            0x66, 0xba, 0x5c, 0x62, 0xb8, 0x49, 0x93, 0x82, 0x26, 0xbc, 0xbe, 0x81, 0x08, 0x08,
            0x4a, 0x88, 0x2f, 0x37, 0x84, 0xed, 0x7d, 0x04, 0x7c, 0x37, 0x15, 0x17, 0x35, 0xe5,
            0x04, 0xd2, 0x42, 0x44, 0x5e, 0x3a, 0xf9, 0x22, 0x27, 0xea, 0x22, 0x28, 0x3e, 0xae,
            0x89, 0xba, 0x8f, 0xc3, 0xf5, 0x70, 0x58, 0xf8, 0xec, 0xb8, 0x2d, 0xb2, 0xd0, 0x7a,
            0x6d, 0x8c, 0xef, 0x82, 0x72, 0xa7, 0x73, 0x34, 0x6c, 0xe7, 0x9e, 0x2b, 0x78, 0x5b,
            0xa3, 0x18, 0x4f, 0x00, 0x75, 0x2c, 0xa1, 0xec, 0x6a, 0xe5, 0x2f, 0xb1, 0xf5, 0x6d,
            0xd0, 0x80, 0x7e, 0x7b, 0xf6, 0x3b, 0xb5, 0xe9, 0xe8, 0xd5, 0x92, 0xdc, 0x10, 0xf3,
            0x6a, 0x6d, 0xa3, 0xec, 0x98, 0xf9, 0xb7, 0xa1, 0x0b, 0xc5, 0xbc, 0xe5, 0x15, 0xc1,
            0x0e, 0x31, 0x5f, 0x3f, 0x6a, 0xc1, 0x7d, 0x28, 0x5e, 0x42, 0x7d, 0xa5, 0xdd, 0x68,
            0xdc, 0x83, 0x02, 0xe3, 0x27, 0xbc, 0x07, 0xf3, 0x40, 0x6f, 0xc2, 0x50, 0x51, 0x95,
            0x14, 0xc6, 0xfa, 0x2c, 0x36, 0xce, 0xf7, 0xe3, 0x37, 0x5a, 0xba, 0xb6, 0x98, 0x86,
            0x24, 0xce, 0x1d, 0xc6, 0x22, 0xdc, 0xc4, 0x0d, 0x5f, 0x13, 0x90, 0x66, 0x18, 0x65,
            0x79, 0x99, 0xe9, 0xe4, 0x29, 0x4a, 0x46, 0xf4, 0xdc, 0x29, 0x2a, 0xdc, 0x20, 0xf4,
            0x84, 0xa9, 0x66, 0xd2, 0x8d, 0xc7, 0x67, 0x0a, 0x78, 0x1f, 0xef, 0xac, 0x9b, 0x26,
            0xe9, 0x06, 0xe3, 0x40, 0x94, 0x2b, 0x7e, 0x05, 0x98, 0xf1, 0xf2, 0x44, 0xeb, 0x5c,
            0xda, 0x0d, 0x23, 0x51, 0x24, 0xd7, 0x49, 0x8b, 0x39, 0x9c, 0x07, 0x6b, 0xf3, 0xb4,
            0x2c, 0x74, 0x8e, 0x81, 0xc9, 0xa8, 0xca, 0xa9, 0x58, 0xf5, 0x4d, 0xd4, 0xea, 0xb8,
            0x6f, 0xbc, 0xd8, 0x07, 0xb2, 0x91, 0x2f, 0xb4, 0x27, 0x0d, 0x64, 0x9d, 0x26, 0x32,
            0xbf, 0x2b, 0xbc, 0xb1, 0xa0, 0x8d, 0x49, 0x16, 0xef, 0xc0, 0x57, 0x78, 0xa7, 0x0d,
            0x79, 0xf5, 0xd4, 0x6b, 0x70, 0xfc, 0xfb, 0xc5, 0xed, 0x2d, 0x1e, 0x99, 0xfd, 0xe3,
            0x0d, 0x99, 0x90, 0xbb, 0x05, 0x40, 0xd4, 0x7d, 0x78, 0x7d, 0xa1, 0x7c, 0x75, 0x8f,
            0x7e, 0x63, 0x51, 0x76, 0x69, 0x96, 0x44, 0xaf, 0xd7, 0x7d, 0xe1, 0x82, 0x2a, 0xbc,
            0x46, 0x31, 0xee, 0x26, 0x44, 0x5a, 0x6d, 0x10, 0x35, 0x16, 0x65, 0x78, 0x1f, 0xbb,
            0x1a, 0x55, 0xae, 0xe4, 0xd1, 0x7c, 0x6b, 0x97, 0x0e, 0xbd, 0xe6, 0x1a, 0xc1, 0xee,
            0x41, 0x7f, 0x41, 0x53, 0x4a, 0x05, 0xcf, 0x9c, 0xfc, 0xfa, 0xdb, 0x24, 0x17, 0x29,
            0xd4, 0x99, 0x08, 0xd9, 0x6e, 0x1f, 0x9d, 0x89, 0x51, 0x35, 0x54, 0x7d, 0x45, 0x25,
            0x3d, 0x15, 0x67, 0x97, 0xa6, 0xfb, 0x43, 0x7a, 0x5f, 0xa0, 0x88, 0xd1, 0xb8, 0xf9,
            0xef, 0xce, 0x05, 0x57, 0xeb, 0x5c, 0xa6, 0x3a, 0xd0, 0x0b, 0x78, 0x02, 0x28, 0x7e,
            0x92, 0x23, 0x54, 0x07, 0x45, 0xda, 0x2e, 0x66, 0xb3, 0x14, 0x2b, 0x6e, 0x0f, 0x3c,
            0x7f, 0x4c, 0x83, 0x50, 0x2e, 0xea, 0xbd, 0x00, 0xc0, 0x09, 0x2c, 0x6c, 0x1d, 0x0d,
            0xa8, 0xfc, 0xd3, 0xa1, 0x4f, 0x1a, 0x51, 0x9c, 0x9f, 0xf5, 0x7e, 0x03, 0x2f, 0x23,
            0xc6, 0xea, 0xcb, 0x2e, 0xa6, 0x99, 0xdb, 0x98, 0x8c, 0xe3, 0x68, 0x75, 0xa1, 0xf2,
            0x2b, 0x2b, 0x3c, 0x21, 0x8d, 0x92, 0x38, 0x5a, 0x38, 0x81, 0x70, 0xdc, 0xb8, 0x26,
            0x0c, 0x9e, 0x50, 0xae, 0x18, 0x4f, 0x3e, 0xc3, 0xcb, 0x2f, 0x24, 0x26, 0x1c, 0x4f,
            0xa7, 0x79, 0x7c, 0xd0, 0x5c, 0x9c, 0xbb, 0xa6, 0xf6, 0x4c, 0x6e, 0x72, 0x48, 0x5b,
            0xaf, 0x69, 0x62, 0xed, 0x9d, 0x21, 0x0f, 0x13, 0x7f, 0xdd, 0xe3, 0xcf, 0x6f, 0xe2,
            0x57, 0x96, 0x1b, 0x72, 0x1e, 0x4c, 0x59, 0x7f, 0xe3, 0xc7, 0x83, 0x93, 0x2c, 0x8b,
            0x9a, 0x69, 0xec, 0x3e, 0x55, 0xf9, 0x42, 0xa8, 0x38, 0xa3, 0x07, 0xd2, 0x3b, 0x97,
            0xe7, 0xdf, 0xd3, 0x16, 0xb1, 0x1e, 0x21, 0x20, 0xf0, 0xe9, 0x2b, 0xb4, 0xcf, 0x23,
            0x8d, 0xd7, 0x5d, 0x28, 0x43, 0x19, 0x1a, 0x93, 0x47, 0x25, 0x8a, 0x53, 0x54, 0xfd,
            0x66, 0xc1, 0xdd, 0x32, 0x39, 0x6a, 0xd9, 0x45, 0x47, 0x96, 0x7d, 0x74, 0xf7, 0xcf,
            0xbd, 0x72, 0xfa, 0x1e, 0xdc, 0xfd, 0x7a, 0x7e, 0xf5, 0x12, 0x22, 0xf3, 0x92, 0x2f,
            0x61, 0xe8, 0x4f, 0x71, 0x8f, 0xf0, 0xce, 0xd9, 0x8b, 0xb2, 0x4b, 0x39, 0xd2, 0x57,
            0x14, 0x8f, 0x5e, 0x61, 0x28, 0x1e, 0x78, 0x8a, 0x81, 0xff, 0x8f, 0xf4, 0x3b, 0x12,
            0x6f, 0x56, 0xdb, 0x5c, 0xa9, 0x91, 0x08, 0xd1, 0xc9, 0x99, 0xd6, 0xc0, 0x67, 0x70,
            0xb5, 0x6e, 0x35, 0xc0, 0xe1, 0x40, 0x09, 0x90, 0x16, 0xba, 0xc3, 0x37, 0xfb, 0x42,
            0xb7, 0x24, 0xf3, 0x75, 0x77, 0x7c, 0xaf, 0xe9, 0x8b, 0xff, 0x00,
        ];
    }

    #[test]
    fn test_bitstream_copy_bytes() -> io::Result<()> {
        let test_data: [u8; 16] = [
            0x78, 0xda, 0xbd, 0x59, 0x6d, 0x8f, 0xdb, 0xb8, 0x11, 0xfe, 0x7c, 0xfa, 0x15, 0xc4,
            0x7e, 0xb9,
        ];
        let mut test_bitstream: DeflateBitstream = DeflateBitstream::new(&test_data, 0);

        let test_value: u32 = test_bitstream.get_value(4);
        assert_eq!(test_value, 0x00000008);

        let mut output_data: [u8; 6] = [0; 6];
        test_bitstream.copy_bytes(5, &mut output_data, 0, 6)?;
        assert_eq!(output_data, [0xda, 0xbd, 0x59, 0x6d, 0x8f, 0x00]);

        let test_value: u32 = test_bitstream.get_value(16);
        assert_eq!(test_value, 0xb8db);

        Ok(())
    }

    #[test]
    fn test_bitstream_get_value() {
        let test_data: [u8; 16] = [
            0x78, 0xda, 0xbd, 0x59, 0x6d, 0x8f, 0xdb, 0xb8, 0x11, 0xfe, 0x7c, 0xfa, 0x15, 0xc4,
            0x7e, 0xb9,
        ];
        let mut test_bitstream: DeflateBitstream = DeflateBitstream::new(&test_data, 0);

        let test_value: u32 = test_bitstream.get_value(0);
        assert_eq!(test_value, 0);

        let test_value: u32 = test_bitstream.get_value(4);
        assert_eq!(test_value, 0x00000008);

        let test_value: u32 = test_bitstream.get_value(12);
        assert_eq!(test_value, 0x00000da7);

        let test_value: u32 = test_bitstream.get_value(32);
        assert_eq!(test_value, 0x8f6d59bd);

        let mut test_bitstream: DeflateBitstream = DeflateBitstream::new(&test_data, 0);

        let test_value: u32 = test_bitstream.get_value(12);
        assert_eq!(test_value, 0x000000a78);

        let test_value: u32 = test_bitstream.get_value(32);
        assert_eq!(test_value, 0xf6d59bdd);
    }

    #[test]
    fn test_bitstream_skip_bits() {
        let test_data: [u8; 16] = [
            0x78, 0xda, 0xbd, 0x59, 0x6d, 0x8f, 0xdb, 0xb8, 0x11, 0xfe, 0x7c, 0xfa, 0x15, 0xc4,
            0x7e, 0xb9,
        ];
        let mut test_bitstream: DeflateBitstream = DeflateBitstream::new(&test_data, 0);

        test_bitstream.skip_bits(4);
        let test_value: u32 = test_bitstream.get_value(12);
        assert_eq!(test_value, 0x00000da7);
    }

    #[test]
    fn test_build_dynamic_huffman_trees() -> io::Result<()> {
        let test_data: Vec<u8> = get_test_data();
        let mut test_context: DeflateContext = DeflateContext::new();

        let mut test_bitstream: DeflateBitstream = DeflateBitstream::new(&test_data, 0);

        let mut test_literals_huffman_tree: HuffmanTree = HuffmanTree::new(288, 15);
        let mut test_distances_huffman_tree: HuffmanTree = HuffmanTree::new(30, 15);

        // Read the block header.
        let test_value: u32 = test_bitstream.get_value(3);
        assert_eq!(test_value, 0x00000005);

        test_context.build_dynamic_huffman_trees(
            &mut test_bitstream,
            &mut test_literals_huffman_tree,
            &mut test_distances_huffman_tree,
        )?;
        Ok(())
    }

    #[test]
    fn test_decompress() -> io::Result<()> {
        let mut test_context: DeflateContext = DeflateContext::new();

        let test_data: Vec<u8> = get_test_data();
        let mut uncompressed_data: Vec<u8> = vec![0; 11358];
        test_context.decompress(&test_data, &mut uncompressed_data)?;
        assert_eq!(test_context.uncompressed_data_size, 11358);

        let expected_data: String = fs::read_to_string("../LICENSE")?;
        assert_eq!(uncompressed_data, expected_data.as_bytes());

        Ok(())
    }
}
